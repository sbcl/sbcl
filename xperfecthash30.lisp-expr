(
(#(0 1 2 4 5 6 C 10 14 18 1F)
 "(1 5 0 2 24 12 6 4 20 16 31)"
 "((let ((tab #a((8) (unsigned-byte 8) 0 8 2 0 0 8 11 0)))
  (let ((b (& val #x7)))
   (let ((a (>> (<< val 27) 29)))
    (^ a (aref tab b))))))")
(#(0 1 2 11 12 13)
 "(18 17 2 19 1 0)"
 "(  (& (+ val (>> val 3)) 7))")
(#(0 1 2 12 13)
 "(18 2 19 1 0)"
 "(  (& (+ val (>> val 4)) 7))")
(#(0 1 5 6 7 8 F)
 "(8 7 0 15 1 5 6)"
 "((let ((tab #a((4) (unsigned-byte 8) 0 4 7 0)))
  (let ((b (& val #x3)))
   (let ((a (>> (<< val 28) 30)))
    (^ a (aref tab b))))))")
(#(0 1 7 8 F)
 "(15 8 7 1 0)"
 "((let ((tab #a((4) (unsigned-byte 8) 0 4 0 0)))
  (let ((b (& val #x3)))
   (let ((a (>> (<< val 28) 30)))
    (^ a (aref tab b))))))")
(#(0 2 4 6 C E)
 "(14 12 4 2 6 0)"
 "(  (& (^ (>> val 1) (>> val 2)) 7))")
(#(1 2 8 10 40)
 "(64 16 8 2 1)"
 "(  (& (+ (>> val 0) (>> val 1) (>> val 5)) 7))")
(#(2 3 5 8 C E)
 "(12 3 2 14 5 8)"
 "((let ((tab #a((4) (unsigned-byte 8) 7 0 0 2)))
  (let ((b (& val #x3)))
   (let ((a (>> (<< val 28) 30)))
    (^ a (aref tab b))))))")
(#(2 3 5 C E)
 "(12 3 2 14 5)"
 "((let ((tab #a((4) (unsigned-byte 8) 7 0 0 2)))
  (let ((b (& val #x3)))
   (let ((a (>> (<< val 28) 30)))
    (^ a (aref tab b))))))")
(#(2 3 6 8 C E)
 "(12 3 2 14 6 8)"
 "((let ((tab #a((4) (unsigned-byte 8) 7 0 0 2)))
  (let ((b (& val #x3)))
   (let ((a (>> (<< val 28) 30)))
    (^ a (aref tab b))))))")
(#(2 3 8 9 C E)
 "(12 3 2 14 8 9)"
 "((let ((tab #a((4) (unsigned-byte 8) 7 0 0 1)))
  (let ((b (& val #x3)))
   (let ((a (>> (<< val 28) 30)))
    (^ a (aref tab b))))))")
(#(2 3 8 C E)
 "(12 3 2 14 8)"
 "((let ((tab #a((4) (unsigned-byte 8) 3 0 4 1)))
  (let ((b (& (>> val 1) #x3)))
   (let ((a (>> (<< val 31) 30)))
    (^ a (aref tab b))))))")
(#(3 5 6 7 D)
 "(7 5 6 3 13)"
 "((let ((tab #a((4) (unsigned-byte 8) 7 0 0 1)))
  (let ((b (>> (<< val 28) 30)))
   (let ((a (& val #x3)))
    (^ a (aref tab b))))))")
(#(A 3C 3F 5B 7B)
 "(#\\? #\\{ #\\[ #\\< #\\Newline)"
 "((let ((tab #a((4) (unsigned-byte 8) 5 0 0 0)))
  (let ((b (& val #x3)))
   (let ((a (>> (<< val 25) 30)))
    (^ a (aref tab b))))))")
(#(23 27 2B 2C 2D 3A 40 56 76)
 "(#\\@ #\\: #\\, #\\' #\\# #\\V #\\v #\\- #\\+)"
 "((let ((tab #a((8) (unsigned-byte 8) 0 2 0 0 4 0 10 0)))
  (+= val #x1679e37f)
  (^= val (>> val 4))
  (let ((b (& val #x7)))
   (let ((a (>> (u32+ val (<< val 25)) 29)))
    (^ a (aref tab b))))))")
(#(44 45 46 4C 52 53)
 "(#\\R #\\L #\\D #\\F #\\S #\\E)"
 "((let ((tab #a((4) (unsigned-byte 8) 4 3 0 3)))
  (let ((b (& val #x3)))
   (let ((a (>> (<< val 27) 30)))
    (^ a (aref tab b))))))")
(#(8A 8E 92 96 9A 9E A2 A6 AA AE B2 B6 BA BE C2 C6 CA CE D2 D6)
 "(138 210 206 194 190 186 182 178 174 170 166 162 158 154 150 146 142 202 198 214)"
 "((let ((tab #a((16) (unsigned-byte 8) 0 13 0 13 0 13 0 13 15 21 3 21 21 11 7 21)))
  (let ((b (& (>> val 2) #xf)))
   (let ((a (>> (<< val 25) 28)))
    (^ a (aref tab b))))))")
(#(8A 8E 92 96 9A 9E A2 A6 AA AE B2 B6 BA BE C2 C6 CA CE D2 D6 DA)
 "(138 210 206 194 190 186 182 178 174 170 166 162 158 154 150 146 142 202 198 218 214)"
 "((let ((tab #a((16) (unsigned-byte 8) 0 13 0 13 0 13 0 13 21 16 3 21 21 11 7 21)))
  (let ((b (& (>> val 2) #xf)))
   (let ((a (>> (<< val 25) 28)))
    (^ a (aref tab b))))))")
(#(8A AA AE B2 BE C2 C6)
 "(194 190 178 174 170 198 138)"
 "((let ((tab #a((4) (unsigned-byte 8) 6 0 0 4)))
  (+= val #x14650a3e)
  (^= val (>> val 4))
  (let ((b (& (>> val 1) #x3)))
   (let ((a (>> (u32+ val (<< val 26)) 30)))
    (^ a (aref tab b))))))")
(#(8A AA AE B2 BE C2 C6 DA)
 "(194 190 178 174 170 198 218 138)"
 "((let ((tab #a((4) (unsigned-byte 8) 0 0 7 4)))
  (+= val #xdb54415e)
  (^= val (>> val 4))
  (let ((b (& (>> val 2) #x3)))
   (let ((a (>> (u32+ val (<< val 27)) 30)))
    (^ a (aref tab b))))))")
(#(8E 92 96 9E A6 B2 B6 BA C2 D6)
 "(194 186 182 178 166 158 150 146 214 142)"
 "((let ((tab #a((8) (unsigned-byte 8) 12 0 0 0 5 0 4 8)))
  (let ((b (& (>> val 2) #x7)))
   (let ((a (>> (<< val 25) 29)))
    (^ a (aref tab b))))))")
(#(8E 92 96 9E A6 B2 B6 BA C2 D6 DA)
 "(194 186 182 178 166 158 150 146 218 214 142)"
 "((let ((tab #a((8) (unsigned-byte 8) 0 0 0 9 11 0 5 6)))
  (let ((b (& (>> val 2) #x7)))
   (let ((a (>> (<< val 25) 29)))
    (^ a (aref tab b))))))")
(#(1000 2000 4000 6000 8000 A000 C000)
 "(4096 40960 49152 32768 24576 16384 8192)"
 "(  (& (>> val 13) 7))")
(#(6641B 2D83FFB 3DD2F1F 166E98EA 18F3A192 19485E2B 1FF01E77)
 "(:ALLOW-OTHER-KEYS :SLOT-NAMES :METACLASS-CONSTRUCTOR :DD-TYPE :METACLASS-NAME :SUPERCLASS-NAME :CLASS-NAME)"
 "(  (& (^ (>> val 1) (>> val 20)) 7))")
(#(7FD94 2D83FFB BF09BC1 19750D5C 1F84C345)
 "(:ALLOW-OTHER-KEYS :Y-TYPE :X-TYPE :SAME-LEAF-NOT-COMPLEX :COMPLEX-P)"
 "(  (& (- val (>> val 27)) 7))")
(#(DFCD7 7E1321 13913B1 1BF9BA5 24D3B50 2D83FFB 2E64121 57CFC3F 6050970 6568C99 65871AE 6B647A0 7EE2BA1 805A8CE 870F40D 9C05C00
   B32A898 B465CCD CC89B6A D4575D9 D64C851 EDCFD06 F463A15 1087745E 1088DA49 111EF72D 1256F00B 15306542 1566B287 164A65E2
   171AFB68 172C8C38 17C2457C 1A355FA0 1A4BD0D1 1B50A359 1B5C8A6A 1BD8B4B6 1CFE2013 1D753C32 1E88666C 1E89C88A 1EDCE097
   1F1704E1)
 "(:ALLOW-OTHER-KEYS :FORM-START-CHAR-POS :FORM-START-BYTE-POS :LAST-NEWLINE :NEWLINES :OBSERVER :OUTPUT-BYTES :REPLACEMENT :CHAR-SIZE :EXTERNAL-FORMAT :PATHNAME :TIMEOUT :HANDLER :OUTPUT-QUEUE :OBUF :EOF-FORCED-P :IBUF :INSTEAD :SERVE-EVENTS :LISTEN :OUTPUT-COLUMN :SYNCHRONIZE-OUTPUT :BUFFERING :FD-TYPE :FD :ELEMENT-MODE :ELEMENT-TYPE :ELEMENT-SIZE :DELETE-ORIGINAL :ORIGINAL :FILE :NAME :INPUT-CHAR-POS :MISC :SOUT :BOUT :COUT :N-BIN :BIN :IN :IN-INDEX :CSIZE-BUFFER :CIN-BUFFER :IN-BUFFER)"
 "((let ((tab #a((32) (unsigned-byte 8) 0 0 51 0 0 34 46 0 0 0 0 10 10 0 34 0 12 12 60 0 0 28 51 29 18 9 0 41 62 0 50 34)))
  (let ((b (& val #x1f)))
   (let ((a (>> (<< val 3) 27)))
    (^ a (aref tab b))))))")
(#(14957D 422AA73 727FC83 A1FC394 B522572 E722D78 16F40154 18F4047A)
 "(:L :HA :BA :B :ADDIS+LD :RLDIC-M :LAYOUT-ID :ABSOLUTE)"
 "(  (& (+ (>> val 9) (>> val 26)) 7))")
(#(14957D 422AA73 727FC83 A1FC394 16F40154 18F4047A)
 "#(:ABSOLUTE :LAYOUT-ID :B :BA :HA :L)"
 "(  (& (+ (>> val 8) (>> val 16)) 7))")
(#(2AD85A 9A1E6B 2C8F438 2D83FFB 82C25BB B5B4BC6 15FBA0DF 17F08D68 1A44E4EA 1FA1A459)
 "(:ALLOW-OTHER-KEYS :DESIGNATOR :RETURNS :WILD-ARGS :ALLOWP :KEYWORDS :KEYP :REST :OPTIONAL :REQUIRED)"
 "((let ((tab #a((8) (unsigned-byte 8) 0 8 0 5 0 13 2 3)))
  (let ((b (& (>> val 5) #x7)))
   (let ((a (>> (<< val 31) 29)))
    (^ a (aref tab b))))))")
(#(2DC59D 42AA17 2D83FFB 3C971D7 5536920 60D0EEC 715C70F CC3F85F F7912D6 1D31FE91)
 "(:ALLOW-OTHER-KEYS :CLEANUP :EXITS :TAIL-P :SOURCE-PATH :LEXENV :PREV :NEXT :REOPTIMIZE :NUMBER)"
 "((let ((tab #a((8) (unsigned-byte 8) 0 12 0 0 0 8 6 0)))
  (let ((b (& val #x7)))
   (let ((a (>> (<< val 5) 29)))
    (^ a (aref tab b))))))")
(#(2DC59D 22F3841 2D83FFB 5612E3B B45269C FA5803C 119EAA75 12F895BA 194313BC 1D30DC7C)
 "(:ALLOW-OTHER-KEYS :INFO :BLOCKS :DEPTH :INFERIORS :SUPERIOR :EXITS :TAIL :HEAD :KIND)"
 "((let ((tab #a((8) (unsigned-byte 8) 0 5 5 8 0 0 0 0)))
  (let ((b (& val #x7)))
   (let ((a (>> (<< val 3) 29)))
    (^ a (aref tab b))))))")
(#(311FC5 246F15A 2D83FFB ADEF6D0 C414B8A CC01211 118559DF 126B59C0 12EAE7EB 1C084D2B 1EDDB4DB)
 "(:ALLOW-OTHER-KEYS :EMERGENCY-BEST-EFFORT :METHOD-FRAME-STYLE :PRINT-FRAME-SOURCE :ARGUMENT-LIMIT :PRINT-PC :PRINT-THREAD :COUNT :FROM :START :STREAM)"
 "((let ((tab #a((8) (unsigned-byte 8) 0 11 5 4 0 5 4 8)))
  (let ((b (& (>> val 10) #x7)))
   (let ((a (>> (<< val 5) 29)))
    (^ a (aref tab b))))))")
(#(311FC5 2D83FFB CC01211 CC3F85F 118559DF 12EAE7EB 1EDDB4DB)
 "(:ALLOW-OTHER-KEYS :EMERGENCY-BEST-EFFORT :METHOD-FRAME-STYLE :ARGUMENT-LIMIT :PRINT-PC :NUMBER :PRINT-FRAME-SOURCE)"
 "(  (& (^ (>> val 7) (>> val 18)) 7))")
(#(38CD08 784712 2D83FFB 36C8D9C 3FC5F0C 195BA73C 196F3AB0)
 "(:ALLOW-OTHER-KEYS :PRECISION :FAST-MODE :ACCRUED-EXCEPTIONS :CURRENT-EXCEPTIONS :ROUNDING-MODE :TRAPS)"
 "(  (& (+ (>> val 2) (>> val 17)) 7))")
(#(3C7904 576A93 2226AC9 AD18698)
 "(:SECTION-RELATIVE :LINE-RELATIVE :SECTION :LINE)"
 "(  (& (>> val 3) 3) )")
(#(42AA17 447873 2D83FFB 41F8394 423BE68 58BD3CC 715C70F CC3F85F 1136A766 120B4DC0 1219D70A 126B59C0 12F895BA 1515DD19 1A4735C3
   1D199C7E 1DA11FBF 1E805E90 1ECBF2E6 1F1704E1)
 "(:ALLOW-OTHER-KEYS :ENVIRONMENT-CACHE :XREFS :INFO :FLAG :COMPONENT :DOMINATOR :LOOP-NEXT :LOOP :OUT :IN :KILL :FLAGS :PREV :NEXT :LAST :START :SUCC :PRED :NUMBER)"
 "((let ((tab #a((16) (unsigned-byte 8) 0 0 0 13 0 13 3 13 21 12 16 8 14 21 0 1)))
  (let ((b (& (>> val 1) #xf)))
   (let ((a (>> (<< val 7) 28)))
    (^ a (aref tab b))))))")
(#(42AA17 496B63 2D83FFB 3C971D7 5536920 715C70F CC3F85F F7912D6 1184FA9F 1AEC1DD5 1D31FE91 1DBEE1CC 1E632C36)
 "(:ALLOW-OTHER-KEYS :NLX-INFO :VALUE :ENTRY :LVAR :DERIVED-TYPE :TAIL-P :SOURCE-PATH :LEXENV :PREV :NEXT :REOPTIMIZE :NUMBER)"
 "((let ((tab #a((8) (unsigned-byte 8) 12 0 0 13 0 0 9 0)))
  (let ((b (& (>> val 2) #x7)))
   (let ((a (>> (<< val 5) 29)))
    (^ a (aref tab b))))))")
(#(42AA17 2B0ECD5 2D83FFB 3C971D7 5536920 715C70F CC3F85F F7912D6 181EB11B 1D31FE91 1F90074C)
 "(:ALLOW-OTHER-KEYS :RESULT-TYPE :RESULT :LAMBDA :TAIL-P :SOURCE-PATH :LEXENV :PREV :NEXT :REOPTIMIZE :NUMBER)"
 "((let ((tab #a((8) (unsigned-byte 8) 12 13 0 14 3 5 2 7)))
  (let ((b (& (>> val 7) #x7)))
   (let ((a (>> (<< val 31) 29)))
    (^ a (aref tab b))))))")
(#(42AA17 2B0ECD5 2D83FFB 3C971D7 5536920 715C70F CC3F85F F7912D6 1D31FE91)
 "(:ALLOW-OTHER-KEYS :LAMBDA :TAIL-P :SOURCE-PATH :LEXENV :PREV :NEXT :REOPTIMIZE :NUMBER)"
 "((let ((tab #a((8) (unsigned-byte 8) 12 5 5 2 3 0 7 6)))
  (let ((b (& (>> val 7) #x7)))
   (let ((a (>> (<< val 31) 29)))
    (^ a (aref tab b))))))")
(#(42AA17 2CDD202 2D83FFB 2E422D7 6DDAAB7 6F1FF99 709AB20 9FD7E4C BD01872 CC3F85F CE97B16 E012C98 1112F2E1 13DB5875 13FB65F5
   16AE7E65 1825DC9D 1A5197C7 1BC72CEA 1D30DC7C 1F46CA52)
 "(:ALLOW-OTHER-KEYS :VERTEX :ENVIRONMENT :COST :OFFSET :SC :SAVE-TN :CURRENT-CONFLICT :GLOBAL-CONFLICTS :LOCAL-CONFLICTS :LOCAL-NUMBER :LOCAL :NEXT* :WRITES :READS :NEXT :LEAF :TYPE :PRIMITIVE-TYPE :KIND :NUMBER)"
 "((let ((tab #a((16) (unsigned-byte 8) 0 31 0 21 0 26 31 13 0 16 13 0 14 0 0 11)))
  (let ((b (& (>> val 12) #xf)))
   (let ((a (>> (<< val 7) 28)))
    (^ a (aref tab b))))))")
(#(42AA17 2D83FFB 3C971D7 42F9C28 5536920 715C70F AA5F8BA CC3F85F F7912D6 1D31FE91)
 "(:ALLOW-OTHER-KEYS :DYNAMIC-EXTENT :FUNS :TAIL-P :SOURCE-PATH :LEXENV :PREV :NEXT :REOPTIMIZE :NUMBER)"
 "((let ((tab #a((8) (unsigned-byte 8) 0 8 2 13 2 5 3 7)))
  (let ((b (& (>> val 7) #x7)))
   (let ((a (>> (<< val 31) 29)))
    (^ a (aref tab b))))))")
(#(42AA17 2D83FFB 3C971D7 507273D 59423EB 1D30DC7C)
 "(:ALLOW-OTHER-KEYS :SOURCE-PATH :BLOCK :USE :NEXT :KIND)"
 "(  (& (- (>> val 7) (>> val 24)) 7))")
(#(42AA17 2D83FFB 3C971D7 5240162 5536920 58F1BE3 66F21DB 715C70F CC3F85F D53410E D5E9C0E F7912D6 1184FA9F 1AEC1DD5 1D31FE91
   1E632C36)
 "(:ALLOW-OTHER-KEYS :SILENT-CONFLICT :CONTEXT :VALUE :%TYPE-CHECK :TYPE-TO-CHECK :ASSERTED-TYPE :LVAR :DERIVED-TYPE :TAIL-P :SOURCE-PATH :LEXENV :PREV :NEXT :REOPTIMIZE :NUMBER)"
 "((let ((tab #a((8) (unsigned-byte 8) 12 11 5 9 5 11 0 0)))
  (+= val #xb6962ba7)
  (^= val (>> val 16))
  (+= val (<< val 8))
  (^= val (>> val 4))
  (let ((b (& (>> val 8) #x7)))
   (let ((a (>> val 29)))
    (^ a (aref tab b))))))")
(#(42AA17 2D83FFB 3C971D7 5536920 60D0EEC 715C70F 8B27B84 CC3F85F F7912D6 12F895BA 1D31FE91 1FC759CF)
 "(:ALLOW-OTHER-KEYS :PRESERVE-INFO :INFO :CLEANUP :VALUES :TAIL-P :SOURCE-PATH :LEXENV :PREV :NEXT :REOPTIMIZE :NUMBER)"
 "((let ((tab #a((8) (unsigned-byte 8) 1 0 12 0 12 0 12 10)))
  (let ((b (& (>> val 4) #x7)))
   (let ((a (>> (<< val 5) 29)))
    (^ a (aref tab b))))))")
(#(42AA17 2D83FFB 3C971D7 5536920 715C70F A1AFD25 CC3F85F D28C61A F7912D6 180C8C3A 1D127E44 1D31FE91 1F5F1937)
 "(:ALLOW-OTHER-KEYS :ALTERNATIVE-CONSTRAINTS :ALTERNATIVE :CONSEQUENT-CONSTRAINTS :CONSEQUENT :TEST :TAIL-P :SOURCE-PATH :LEXENV :PREV :NEXT :REOPTIMIZE :NUMBER)"
 "((let ((tab #a((8) (unsigned-byte 8) 4 13 0 12 14 0 5 4)))
  (let ((b (& (>> val 3) #x7)))
   (let ((a (>> (<< val 5) 29)))
    (^ a (aref tab b))))))")
(#(42AA17 2D83FFB 3C971D7 5536920 715C70F CC3F85F F7912D6 1184FA9F 12FF9C61 1AEC1DD5 1D31FE91 1E632C36)
 "(:ALLOW-OTHER-KEYS :VALUE :VAR :LVAR :DERIVED-TYPE :TAIL-P :SOURCE-PATH :LEXENV :PREV :NEXT :REOPTIMIZE :NUMBER)"
 "((let ((tab #a((8) (unsigned-byte 8) 12 0 0 4 0 10 12 0)))
  (let ((b (& val #x7)))
   (let ((a (>> (<< val 5) 29)))
    (^ a (aref tab b))))))")
(#(447873 12DF278 29F44EF 2D83FFB 72B1D12 7A70ACA 7F043EA 86380DF 92DCAFA A0DBE41 A5446D4 AA5F8BA AC14D1C BD01872 C34266C
   C420C04 CC3F85F CD56774 D524721 F4737B1 12F895BA 1B4B667C 1EEEA5CF)
 "(:ALLOW-OTHER-KEYS :SOURCE-FORM :EQUALITY-CONSTRAINTS-HASH :EQUALITY-CONSTRAINTS :INHERITABLE-CONSTRAINTS :EQL-VAR-CONSTRAINTS :EQ-CONSTRAINTS :CTYPE-CONSTRAINTS :CONSTRAINTS :SPECVAR :ARG-INFO :HOME :FLAGS :SETS :INFO :DYNAMIC-EXTENT :EVER-USED :REFS :WHERE-FROM :DEFINED-TYPE :TYPE :%SOURCE-NAME :NUMBER)"
 "((let ((tab #a((16) (unsigned-byte 8) 0 0 0 0 0 1 18 15 31 13 16 0 25 0 7 18)))
  (let ((b (& (>> val 1) #xf)))
   (let ((a (>> (<< val 7) 28)))
    (^ a (aref tab b))))))")
(#(447873 2D83FFB 4F39EEA 6FD322D 12F895BA 152C3319 1BAA5C56 1E5A73AF)
 "(:ALLOW-OTHER-KEYS :INVALID :BITMAP :INFO :INHERITS :FLAGS :LENGTH :DEPTHOID)"
 "(  (& (^ (>> val 4) (>> val 25)) 7))")
(#(496B63 2B0ECD5 2D83FFB 7CE129D 12F895BA)
 "(:ALLOW-OTHER-KEYS :INFO :NLX-INFO :CLOSURE :LAMBDA)"
 "(  (& (+ val (>> val 2)) 7))")
(#(4A41A7 6EE9F6 91FC29 12352A9 146FDEA 2D83FFB B32A898 F5809D0 104F55EE 11D63D7A 13B7ED4C 1894EF0F 1B3D98A2 1B5666D7 1BB3277A
   1EF9A0A6 1FAC65A0)
 "(:ALLOW-OTHER-KEYS :STRING-TO-OCTETS-FUN :OCTETS-TO-STRING-FUN :WRITE-C-STRING-FUN :READ-C-STRING-FUN :BYTES-FOR-CHAR-FUN :RESYNC-FUN :WRITE-CHAR-FULL-BUFFERED-FUN :WRITE-CHAR-LINE-BUFFERED-FUN :WRITE-CHAR-NONE-BUFFERED-FUN :WRITE-N-BYTES-FUN :READ-CHAR-FUN :READ-N-CHARS-FUN :REPLACEMENT :DEFAULT-REPLACEMENT-CHARACTER :NEWLINE-VARIANT :NAMES)"
 "((let ((tab #a((16) (unsigned-byte 8) 13 0 1 0 0 0 1 1 12 0 0 7 1 0 13 20)))
  (let ((b (& val #xf)))
   (let ((a (>> (<< val 7) 28)))
    (^ a (aref tab b))))))")
(#(526C15 D0C591 7168950 C841474 128A2060 12FE1EC2 1A0CB91B)
 "(:JUMP-TABLE :DOUBLE-FLOAT :DOUBLE-FLOAT-BITS :SINGLE-FLOAT :DWORD :WORD :BYTE)"
 "(  (& (+ (>> val 15) (>> val 18)) 7))")
(#(576A93 67DB9D8 BCB074C BD01872 1251EE6A 130DF36A 19B79FF6 1D493A5F)
 "(:ISSUE :SYSTEM-CLASS :TYPE :GLOSSARY :SECTION :MACRO :SPECIAL-OPERATOR :FUNCTION)"
 "(  (& (^ (>> val 9) (>> val 19)) 7))")
(#(576A93 D2CAFA0 D33AAA6 17C40F86 19B79FF6)
 "(:SECTION :FUNCTION :GENERIC-FUNCTION :INITIALIZATION :READERS)"
 "(  (& (^ (>> val 1) (>> val 4)) 7))")
(#(57F974 2D83FFB D28C61A 1DAB18D0 1E80D3EE)
 "(:ALLOW-OTHER-KEYS :TEST :SORT :KEY-TYPE :CONSTRUCTOR)"
 "(  (& (- (>> val 2) (>> val 20)) 7))")
(#(5919B5 D0C591 1B1217A 8B27B84 9243B73 B46FD79 C841474 10C1D2A1 12E2CBDA 144A7081 1570297F 1577727F 15E7305A 17F48160
   1E21A5F9 1F48ACEF)
 "#(SB-ALIEN::ROOT INTEGER BOOLEAN ENUM FLOAT SINGLE-FLOAT DOUBLE-FLOAT SYSTEM-AREA-POINTER ALIEN-VALUE SB-ALIEN::POINTER SB-ALIEN::MEM-BLOCK ARRAY SB-ALIEN::RECORD SB-ALIEN::FUN VALUES C-STRING)"
 "((let ((tab #a((8) (unsigned-byte 8) 12 12 8 0 0 0 6 13)))
  (+= val #x7a273835)
  (^= val (>> val 16))
  (+= val (<< val 8))
  (^= val (>> val 4))
  (let ((b (& (>> val 6) #x7)))
   (let ((a (>> val 29)))
    (^ a (aref tab b))))))")
(#(641FF3 EC7CBD 19CB8D9 2231780 2D83FFB 5C68A5E 79928BD 7B8B6CD 8897E88 9482954 DACC4EC DE258D6 1067A311 10AD7AE6 16D42968
   1B2A580B 1B4B2A7B 1D3576EB 1D6612B1)
 "(:ALLOW-OTHER-KEYS :COVERAGE-MAP :N-JUMP-TABLE-ENTRIES :SPILLED-TNS :SPILLED-VOPS :ALIAS-TNS :ENTRIES :CONSTANTS :STACK-MESS-UPS :STACK-ALLOCATES-P :VALUES-RECEIVERS :SPECIFIED-SAVE-TNS :NFP :COMPONENT-TNS :CONSTANT-TNS :WIRED-TNS :RESTRICTED-TNS :NORMAL-TNS :GLOBAL-TN-COUNTER)"
 "((let ((tab #a((16) (unsigned-byte 8) 13 0 0 13 1 0 30 31 0 3 1 29 0 0 7 9)))
  (let ((b (& (>> val 2) #xf)))
   (let ((a (>> (<< val 7) 28)))
    (^ a (aref tab b))))))")
(#(641FF3 EC7CBD 19CB8D9 2D83FFB 5C68A5E 79928BD 7B8B6CD 8897E88 9482954 DACC4EC DE258D6 1067A311 10AD7AE6 16D42968 1B2A580B
   1B4B2A7B 1D3576EB 1D6612B1)
 "(:ALLOW-OTHER-KEYS :COVERAGE-MAP :N-JUMP-TABLE-ENTRIES :SPILLED-TNS :SPILLED-VOPS :ALIAS-TNS :ENTRIES :CONSTANTS :STACK-MESS-UPS :STACK-ALLOCATES-P :VALUES-RECEIVERS :SPECIFIED-SAVE-TNS :COMPONENT-TNS :CONSTANT-TNS :WIRED-TNS :RESTRICTED-TNS :NORMAL-TNS :GLOBAL-TN-COUNTER)"
 "((let ((tab #a((16) (unsigned-byte 8) 0 0 0 13 1 0 0 31 0 3 1 29 0 0 7 9)))
  (let ((b (& (>> val 2) #xf)))
   (let ((a (>> (<< val 7) 28)))
    (^ a (aref tab b))))))")
(#(67C9DE 3DA12EF 68C1A9C 76579F3)
 "(:CAPITALIZE-FIRST :CAPITALIZE :DOWNCASE :UPCASE)"
 "(  (& (>> val 16) 3) )")
(#(67C9DE 6A1DD56 76579F3 8BA26DE)
 "(:INVERT :PRESERVE :DOWNCASE :UPCASE)"
 "(  (& (>> val 12) 3) )")
(#(67FBB7 605E196 9F3ECDD DF3F329 12FE1EC2 1EF40DEC)
 "(:WORD :W :DOUBLE :D :SINGLE :S)"
 "(  (& (- (>> val 1) (>> val 17)) 7))")
(#(67FBB7 7168950 128A2060 12FE1EC2 15E7305A)
 "(:DOUBLE :FLOAT :DWORD :WORD :BYTE)"
 "(  (& (^ val (>> val 13)) 7))")
(#(6FAF4E AA95D8F F14865E 17F08D68 18B18FFE)
 "(REST FIRST CDR CAR AREF)"
 "(  (& (- (>> val 1) (>> val 7)) 7))")
(#(784712 2D83FFB 36C8D9C 3FC5F0C 195BA73C 196F3AB0)
 "(:ALLOW-OTHER-KEYS :FAST-MODE :ACCRUED-EXCEPTIONS :CURRENT-EXCEPTIONS :ROUNDING-MODE :TRAPS)"
 "(  (& (- val (>> val 3)) 7))")
(#(78BD39 1133902 246F15A 2D83FFB 4F39EEA 788924E A49CBA5 B46FD79 119945CE 13D73323 14D9EA36 14DE7EAB 15660628 168D24A7
   16F042E9 1745DDFD 17B21252 187BBA2E)
 "(:ALLOW-OTHER-KEYS :SUPPRESS-ERRORS :PPRINT-DISPATCH :LINES :MISER-WIDTH :RIGHT-MARGIN :READABLY :GENSYM :ARRAY :CASE :LENGTH :LEVEL :PRETTY :CIRCLE :BASE :RADIX :ESCAPE :STREAM)"
 "((let ((tab #a((16) (unsigned-byte 8) 0 0 13 0 0 15 13 26 26 0 0 14 0 5 0 0)))
  (let ((b (& val #xf)))
   (let ((a (>> (<< val 3) 28)))
    (^ a (aref tab b))))))")
(#(78BD39 1133902 2D83FFB 4F39EEA 788924E A49CBA5 B46FD79 119945CE 13D73323 14D9EA36 14DE7EAB 15660628 168D24A7 16F042E9
   1745DDFD 17B21252 187BBA2E)
 "(:ALLOW-OTHER-KEYS :SUPPRESS-ERRORS :PPRINT-DISPATCH :LINES :MISER-WIDTH :RIGHT-MARGIN :READABLY :GENSYM :ARRAY :CASE :LENGTH :LEVEL :PRETTY :CIRCLE :BASE :RADIX :ESCAPE)"
 "((let ((tab #a((16) (unsigned-byte 8) 0 0 13 0 0 1 13 9 26 0 13 0 0 5 0 0)))
  (let ((b (& val #xf)))
   (let ((a (>> (<< val 3) 28)))
    (^ a (aref tab b))))))")
(#(79F3D1 F29931 EF3F4BC 1326C3E5 1914ACB5 1973B7A1 1ACB2604 1BE2D9A8 1DC1B640)
 "(DEFSTRUCT-SLOT-DESCRIPTION DEFSTRUCT-DESCRIPTION SB-C::DEBUG-SOURCE SB-C::COMPILED-DEBUG-INFO SB-C::DEBUG-INFO SB-C:DEFINITION-SOURCE-LOCATION CONDITION STRUCTURE-OBJECT T)"
 "((let ((tab #a((8) (unsigned-byte 8) 0 12 0 5 3 3 0 2)))
  (let ((b (& (>> val 12) #x7)))
   (let ((a (>> (<< val 31) 29)))
    (^ a (aref tab b))))))")
(#(79F3D1 B2C6780 EF3F4BC 1C96355F 1D057C78)
 "(SB-BROTHERTREE::UNARY-NODE SB-LOCKLESS::LIST-NODE LAYOUT STRUCTURE-OBJECT T)"
 "(  (& (^ (>> val 1) (>> val 3)) 7))")
(#(7E1321 1BF9BA5 24D3B50 2D83FFB 2E64121 6050970 6568C99 65871AE 6B647A0 7EE2BA1 805A8CE 870F40D 9C05C00 B32A898 B465CCD
   CC89B6A D4575D9 D64C851 EDCFD06 F463A15 1087745E 1088DA49 111EF72D 1256F00B 15306542 164A65E2 172C8C38 17C2457C 1A355FA0
   1A4BD0D1 1B50A359 1B5C8A6A 1BD8B4B6 1CFE2013 1D753C32 1E88666C 1E89C88A 1EDCE097 1F1704E1)
 "(:ALLOW-OTHER-KEYS :OUTPUT-BYTES :REPLACEMENT :CHAR-SIZE :EXTERNAL-FORMAT :PATHNAME :TIMEOUT :HANDLER :OUTPUT-QUEUE :OBUF :EOF-FORCED-P :IBUF :INSTEAD :SERVE-EVENTS :LISTEN :OUTPUT-COLUMN :SYNCHRONIZE-OUTPUT :BUFFERING :FD-TYPE :FD :ELEMENT-MODE :ELEMENT-TYPE :ELEMENT-SIZE :DELETE-ORIGINAL :ORIGINAL :FILE :NAME :INPUT-CHAR-POS :MISC :SOUT :BOUT :COUT :N-BIN :BIN :IN :IN-INDEX :CSIZE-BUFFER :CIN-BUFFER :IN-BUFFER)"
 "((let ((tab #a((32) (unsigned-byte 8) 0 0 0 0 0 36 16 0 0 51 2 9 9 0 11 0 7 7 9 61 0 28 61 6 7 9 0 34 51 0 50 0)))
  (let ((b (& val #x1f)))
   (let ((a (>> (<< val 3) 27)))
    (^ a (aref tab b))))))")
(#(88A33D 2D83FFB 7DB47BF D9F0E46 104FDC4F 181E162D 1A4BD0D1 1C219293)
 "(:ALLOW-OTHER-KEYS :DISPLACED-INDEX-OFFSET :DISPLACED-TO :FILL-POINTER :ADJUSTABLE :INITIAL-CONTENTS :INITIAL-ELEMENT :ELEMENT-TYPE)"
 "(  (& (+ val (>> val 14)) 7))")
(#(88A33D 2D83FFB 7DB47BF D9F0E46 104FDC4F 1A4BD0D1 1C219293)
 "(:ALLOW-OTHER-KEYS :DISPLACED-INDEX-OFFSET :DISPLACED-TO :FILL-POINTER :INITIAL-CONTENTS :INITIAL-ELEMENT :ELEMENT-TYPE)"
 "(  (& (+ val (>> val 8)) 7))")
(#(8FE110 C5F126 B4685DD C7BFBCB EC88182 1110413A 1B4ABA52)
 "(ARRAY-TYPE NEGATION-TYPE ALIEN-TYPE-TYPE SIMD-PACK-256-TYPE SIMD-PACK-TYPE UNKNOWN-TYPE HAIRY-TYPE)"
 "(  (& (+ (>> val 0) (>> val 6) (>> val 27)) 7))")
(#(983B54 2D83FFB 4157BFC 555431D 5A767F5 72B1D12 7A70ACA AA5F8BA ABD0207 AC14D1C B1AD88C BD01872 C420C04 C788991 CC3F85F
   D46D85D D4DC88F D9B0A28 DACC4EC F4737B1 F748A55 F7912D6 FA6ADD3 105B4AC9 11FABC1E 124C48E2 12F895BA 141389A4 14777CB7
   16316BB8 16AE7E65 1750C880 1A5C37C1 1B4B667C 1B62E448 1D0E622B 1D30DC7C 1EFAF033)
 "(:ALLOW-OTHER-KEYS :ALLOW-INSTRUMENTING :CALL-LEXENV :ENVIRONMENT :TAIL-SET :CALLS-OR-CLOSES :DYNAMIC-EXTENTS :ENTRIES :LETS :HOME :RETURN :BIND :OPTIONAL-DISPATCH :VARS :IGNORE :TOP-LEVEL-DEFUN-P :INLINE-EXPANDED :XREF :PLIST :ENCLOSE :DOCUMENTATION :ARG-DOCUMENTATION :LEXENV :INLINE-EXPANSION :INLINEP :ENTRY-FUN :HAS-EXTERNAL-REFERENCES-P :KIND :%DEBUG-NAME :INFO :DYNAMIC-EXTENT :EVER-USED :REFS :WHERE-FROM :DEFINED-TYPE :TYPE :%SOURCE-NAME :NUMBER)"
 "((let ((tab #a((32) (unsigned-byte 8) 0 0 0 0 0 0 0 9 28 0 36 61 0 0 0 18 0 9 9 0 28 28 7 49 50 0 10 32 0 12 4 45)))
  (let ((b (& val #x1f)))
   (let ((a (>> (<< val 3) 27)))
    (^ a (aref tab b))))))")
(#(9A1E6B 2186BB2 2D83FFB 3589A30 3C971D7 4157BFC 555431D 72B1D12 7A70ACA 7AA772E 92E5EEE AA5F8BA ABD0207 AC14D1C B1AD88C
   B1FDCB6 BD01872 C420C04 CC3F85F D9B0A28 F7912D6 FA6ADD3 105B4AC9 11FABC1E 124C48E2 12F895BA 141389A4 14777CB7 16316BB8
   163E7558 1B4B667C 1D30DC7C 1EFAF033 1FA1A459)
 "(:ALLOW-OTHER-KEYS :MAIN-ENTRY :MORE-ENTRY :ENTRY-POINTS :MAX-ARGS :MIN-ARGS :SOURCE-PATH :KEYP :ALLOWP :ARGLIST :IGNORE :TOP-LEVEL-DEFUN-P :INLINE-EXPANDED :XREF :PLIST :ENCLOSE :DOCUMENTATION :ARG-DOCUMENTATION :LEXENV :INLINE-EXPANSION :INLINEP :ENTRY-FUN :HAS-EXTERNAL-REFERENCES-P :KIND :%DEBUG-NAME :INFO :DYNAMIC-EXTENT :EVER-USED :REFS :WHERE-FROM :DEFINED-TYPE :TYPE :%SOURCE-NAME :NUMBER)"
 "((let ((tab #a((32) (unsigned-byte 8) 0 0 28 0 9 0 0 7 7 0 9 38 1 0 9 0 7 0 0 0 0 0 9 7 19 19 26 11 0 30 6 49)))
  (let ((b (& val #x1f)))
   (let ((a (>> (<< val 9) 27)))
    (^ a (aref tab b))))))")
(#(9F41C9 331AF48 3A9E0C9 48FFF8A 7171179 C48E090 CBA8025 1997992F 19B79FF6 1B247926 1DF2363B)
 "(LET* LET IF SYMBOL-MACROLET MACROLET LOCALLY EVAL-WHEN PROGN SETQ QUOTE FUNCTION)"
 "((let ((tab #a((8) (unsigned-byte 8) 5 0 0 0 0 13 11 3)))
  (let ((b (& val #x7)))
   (let ((a (>> (<< val 5) 29)))
    (^ a (aref tab b))))))")
(#(A0D1D7 2D83FFB 2DD0906 D28C61A 10FE97F5 11FE9988 13351B33 1DA0CD1E 1E02DA52)
 "(:ALLOW-OTHER-KEYS :KEY :END2 :START2 :END1 :START1 :TEST-NOT :TEST :FROM-END)"
 "((let ((tab #a((8) (unsigned-byte 8) 12 0 0 0 0 5 5 6)))
  (let ((b (& val #x7)))
   (let ((a (>> (<< val 3) 29)))
    (^ a (aref tab b))))))")
(#(A0D1D7 2D83FFB 10FE97F5 11FE9988 1DA0CD1E)
 "(:ALLOW-OTHER-KEYS :END2 :START2 :END1 :START1)"
 "(  (& (+ val (>> val 8)) 7))")
(#(A4D988 1096515 2BE1526 2D83FFB 80678B2 89645EF D4575D9 11EEF909 152B0C6D 154402DD 161C2AAF 1B01255C 1C5BCA64 1CEB6CD6
   1EE41FED 1F38ADF8 1FC9988C)
 "(:ALLOW-OTHER-KEYS :SUBTYPEP :RESULT-TN :ARG-TN :DEPORT-PIN-P :DEPORT-ALLOC-GEN :DEPORT-GEN :NATURALIZE-GEN :DEPOSIT-GEN :EXTRACT-GEN :ALIEN-REP :LISP-REP :TYPE= :UNPARSE :INCLUDE :DEFSTRUCT-NAME :NAME)"
 "((let ((tab #a((16) (unsigned-byte 8) 7 15 3 0 16 13 0 3 12 12 0 14 14 10 10 1)))
  (let ((b (& (>> val 11) #xf)))
   (let ((a (>> (<< val 31) 28)))
    (^ a (aref tab b))))))")
(#(A4D988 1096515 2BE1526 80678B2 89645EF 11EEF909 152B0C6D 154402DD 161C2AAF 1B01255C 1C5BCA64 1CEB6CD6 1EE41FED)
 "((:UNPARSE . SB-ALIEN::ALIEN-TYPE-CLASS-UNPARSE) (:TYPE= . SB-ALIEN::ALIEN-TYPE-CLASS-TYPE=) (:SUBTYPEP . SB-ALIEN::ALIEN-TYPE-CLASS-SUBTYPEP) (:LISP-REP . SB-ALIEN::ALIEN-TYPE-CLASS-LISP-REP) (:ALIEN-REP . SB-ALIEN::ALIEN-TYPE-CLASS-ALIEN-REP) (:EXTRACT-GEN . SB-ALIEN::ALIEN-TYPE-CLASS-EXTRACT-GEN) (:DEPOSIT-GEN . SB-ALIEN::ALIEN-TYPE-CLASS-DEPOSIT-GEN) (:NATURALIZE-GEN . SB-ALIEN::ALIEN-TYPE-CLASS-NATURALIZE-GEN) (:DEPORT-GEN . SB-ALIEN::ALIEN-TYPE-CLASS-DEPORT-GEN) (:DEPORT-ALLOC-GEN . SB-ALIEN::ALIEN-TYPE-CLASS-DEPORT-ALLOC-GEN) (:DEPORT-PIN-P . SB-ALIEN::ALIEN-TYPE-CLASS-DEPORT-PIN-P) (:ARG-TN . SB-ALIEN::ALIEN-TYPE-CLASS-ARG-TN) (:RESULT-TN . SB-ALIEN::ALIEN-TYPE-CLASS-RESULT-TN))"
 "((let ((tab #a((8) (unsigned-byte 8) 8 0 5 2 0 15 0 0)))
  (let ((b (& (>> val 4) #x7)))
   (let ((a (>> (<< val 5) 29)))
    (^ a (aref tab b))))))")
(#(AD3E74 4EDA9A1 7C835DD 15FB05B6 1607B33C 17158E95 180E1F3F 1D00B976 1DD07497)
 "(SB-VM::COMPLEX-SINGLE-REG SB-VM::COMPLEX-DOUBLE-REG SB-VM::DOUBLE-REG SB-VM::SINGLE-REG SB-VM::DESCRIPTOR-REG SB-VM::SAP-REG SB-VM::SIGNED-REG SB-VM::UNSIGNED-REG SB-VM::ANY-REG)"
 "((let ((tab #a((8) (unsigned-byte 8) 12 2 0 0 0 0 5 7)))
  (let ((b (>> (<< val 3) 29)))
   (let ((a (& val #x7)))
    (^ a (aref tab b))))))")
(#(AD3E74 7C835DD 1256235A 17158E95)
 "((SB-VM::DESCRIPTOR-REG . 0) (SB-VM::ANY-REG . 1) (SB-VM::SIGNED-REG . 2) (CONSTANT . 3))"
 "(  (& (>> val 7) 3) )")
(#(B13785 31B55FB A0FCA41 D28C61A E999239 EF3F4BC 1256235A 1411B855 1CB86B05)
 "(:NOT :AND :OR :SAME-AS :TEST :NEGATIVE :POSITIVE :CONSTANT T)"
 "((let ((tab #a((8) (unsigned-byte 8) 0 0 5 8 7 0 0 0)))
  (let ((b (& val #x7)))
   (let ((a (>> (<< val 3) 29)))
    (^ a (aref tab b))))))")
(#(BC6EF6 D0C591 245F357 C841474 EF3F4BC 12FE1EC2 1F15A357)
 "(COMPLEX-DOUBLE-FLOAT COMPLEX-SINGLE-FLOAT DOUBLE-FLOAT SINGLE-FLOAT SB-VM:SIGNED-WORD WORD T)"
 "(  (& (^ (>> val 4) (>> val 10)) 7))")
(#(BC6EF6 D0C591 245F357 C841474 19739539 1A7396CC 1E21A5F9 1F644387)
 "(SYSTEM-AREA-POINTER SB-VM::UNSIGNED-BYTE-31 SB-VM::UNSIGNED-BYTE-32 SB-VM::SIGNED-BYTE-32 COMPLEX-SINGLE-FLOAT COMPLEX-DOUBLE-FLOAT SINGLE-FLOAT DOUBLE-FLOAT)"
 "(  (& (- (>> val 2) (>> val 7)) 7))")
(#(BC6EF6 245F357 3E144A7 56D9B60 10F360C2 1FE7F45F)
 "(* COMPLEX-SINGLE-FLOAT COMPLEX-DOUBLE-FLOAT SB-VM::TAGGED-NUM SB-VM::SIGNED-NUM SB-VM::UNSIGNED-NUM)"
 "(  (& (- (>> val 1) (>> val 17)) 7))")
(#(BF818F 2D1C9B6 31D9492 42F11A6 61980DD 8198403 EF3F4BC FBF992C FCC005F 141DAF55 1C33E6FC 1CF40AC6 1DD1C1D7 1ECBE59C)
 "((:T . 31) (:LT . 16) (:LE . 20) (:EQ . 4) (:LNG . 6) (:GE . 12) (:NE . 24) (:NG . 20) (:LLT . 2) (:F . 0) (:LLE . 6) (:LGE . 5) (:LGT . 1) (:LNL . 5))"
 "((let ((tab #a((8) (unsigned-byte 8) 13 12 5 0 0 14 1 13)))
  (let ((b (& (>> val 5) #x7)))
   (let ((a (>> (<< val 5) 29)))
    (^ a (aref tab b))))))")
(#(C9ABA9 7F1D96D C4FD31D 102153B3 127D4631)
 "(NIL :FORTHCOMING-DEFCLASS-TYPE :INSTANCE :DEFINED :PRIMITIVE)"
 "(  (& (^ (>> val 1) (>> val 21)) 7))")
(#(CB4E00 21DB9DF 2D83FFB 10C1F263 1BC6CA0F)
 "(:ALLOW-OTHER-KEYS :IMMEDIATE-TESTED :VALUE-TN-REF :DROP-THROUGH :EXCEPT)"
 "(  (& (+ (>> val 9) (>> val 17)) 7))")
(#(D0C591 11D1FAD C841474 12F86037)
 "(SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)"
 "(  (& (>> val 18) 3) )")
(#(D0C591 331CAB8 48D4754 6B4780F 8892768 A8C210D B445B28 C841474 EF3F4BC 102153B3 10BE7277 12E2CBDA 1A7E09AF 1BAC0C5C)
 "(NIL COMPLEX INTEGER MOD SINGLE-FLOAT DOUBLE-FLOAT SIGNED-BYTE UNSIGNED-BYTE FIXNUM BIT CHARACTER STANDARD-CHAR BASE-CHAR T)"
 "((let ((tab #a((8) (unsigned-byte 8) 0 12 15 0 9 2 8 5)))
  (let ((b (& (>> val 7) #x7)))
   (let ((a (>> (<< val 5) 29)))
    (^ a (aref tab b))))))")
(#(D0C591 331CAB8 48D4754 6B4780F 8892768 A8C210D B445B28 C841474 EF3F4BC 102153B3 10BE7277 12E2CBDA 1A7E09AF 1BAC0C5C 1EDA4470)
 "(NIL COMPLEX INTEGER MOD SINGLE-FLOAT DOUBLE-FLOAT SIGNED-BYTE UNSIGNED-BYTE FIXNUM BIT EXTENDED-CHAR CHARACTER STANDARD-CHAR BASE-CHAR T)"
 "((let ((tab #a((8) (unsigned-byte 8) 8 5 0 0 13 15 10 5)))
  (let ((b (& (>> val 18) #x7)))
   (let ((a (>> (<< val 5) 29)))
    (^ a (aref tab b))))))")
(#(D0C591 35ED22C BCE7F62 C841474 12E2CBDA 15E7305A)
 "(REAL FLOAT DOUBLE-FLOAT SINGLE-FLOAT RATIONAL INTEGER)"
 "(  (& (+ (>> val 5) (>> val 6)) 7))")
(#(D0C591 6B4780F B445B28 C841474 EF3F4BC)
 "(BASE-CHAR CHARACTER T SINGLE-FLOAT DOUBLE-FLOAT)"
 "(  (& (^ val (>> val 19)) 7))")
(#(D0C591 8892768 C841474 10BE7277 12214AE8 12E2CBDA 12FE1EC2 1724089B 1F15A357)
 "#(FIXNUM SINGLE-FLOAT DOUBLE-FLOAT INTEGER SB-VM:SIGNED-WORD WORD BIGNUM COMPLEX RATIO)"
 "((let ((tab #a((8) (unsigned-byte 8) 12 0 0 5 2 2 3 7)))
  (let ((b (& (>> val 8) #x7)))
   (let ((a (>> (<< val 31) 29)))
    (^ a (aref tab b))))))")
(#(D0C591 9243B73 C841474 10C1D2A1 1577727F 15E7305A 1E21A5F9 1F48ACEF)
 "(FLOAT SB-ALIEN::MEM-BLOCK ALIEN-VALUE SINGLE-FLOAT DOUBLE-FLOAT SYSTEM-AREA-POINTER SB-ALIEN::RECORD ENUM)"
 "(  (& (- val (>> val 27)) 7))")
(#(D0C591 9243B73 C841474 1577727F 1E21A5F9)
 "(SYSTEM-AREA-POINTER DOUBLE-FLOAT SINGLE-FLOAT ENUM SB-ALIEN::RECORD)"
 "(  (& (^ val (>> val 15)) 7))")
(#(D621C0 15115EA 4157BFC 5D2FA71 6DFCD3D 805D985 8E4C2C2 C62CDF1 DBAFDA3 EBA358E FBB375F FCB0B8A 12F895BA 132E85C2 17126502
   17DA1CEC 19F6CB0B 1A99ABFA 1ABEE259 1AEA59DD 1B44F7BA 1D748C83 1E1E0B08 1EC15774 1F318E5B)
 "(:GC-BARRIER :OPTIONAL-RESULTS :SAVE-P :POLICY :GUARD :TRANSLATE :RESULT-TYPES :ARG-TYPES :NOTE :NODE-VAR :MOVE-ARGS :RESULT-REFS :ARG-REFS :VOP-VAR :VARIANT-COST :VARIANT-VARS :VARIANT :IGNORE :INFO :BEFORE-LOAD :GENERATOR :TEMPORARY :CONDITIONAL :RESULTS :ARGS)"
 "((let ((tab #a((16) (unsigned-byte 8) 0 0 0 0 24 31 11 1 0 0 16 0 15 11 20 26)))
  (let ((b (& (>> val 1) #xf)))
   (let ((a (>> (<< val 7) 28)))
    (^ a (aref tab b))))))")
(#(D621C0 2B0ECD5 2D83FFB 31DFC01 42F9C28 60D0EEC 646420E 667E35F 11459198 13775562 15E54542 1785EE92 194313BC 1B62E448
   1FF78BA5)
 "(:ALLOW-OTHER-KEYS :PARENT :FLUSHABLE :USER-DATA :POLICY :DISABLED-PACKAGE-LOCKS :HANDLED-CONDITIONS :CLEANUP :LAMBDA :TYPE-RESTRICTIONS :TAGS :BLOCKS :VARS :FUNS :DEFAULT)"
 "((let ((tab #a((8) (unsigned-byte 8) 0 14 13 4 13 0 15 3)))
  (let ((b (& val #x7)))
   (let ((a (>> (<< val 5) 29)))
    (^ a (aref tab b))))))")
(#(D621C0 2D83FFB 33831B6 14862A02 1F16D452)
 "(:ALLOW-OTHER-KEYS :SOURCE-NAMESTRING :SOURCE-PLIST :POLICY :OVERRIDE)"
 "(  (& (- (>> val 7) (>> val 12)) 7))")
(#(D621C0 2D83FFB BD01872 14FFD87A 19B79FF6)
 "(:ALLOW-OTHER-KEYS :POLICY :IMPORTANT :FUNCTION :TYPE)"
 "(  (& (>> val 24) 7))")
(#(DD4ACE 2E422D7 3347C83 D955117 170316D3)
 "(:UNKNOWN-KEYS :KNOWN :ERROR :FULL :LOCAL)"
 "(  (& (- (>> val 2) (>> val 19)) 7))")
(#(DD4ACE BAC3F17 102153B3 1522715E 18915102 19B7D934 1DB42CAD 1FC40BAC)
 "(NIL :SUPERSEDE :APPEND :OVERWRITE :RENAME-AND-DELETE :RENAME :NEW-VERSION :ERROR)"
 "(  (& (+ (>> val 0) (>> val 8) (>> val 15)) 7))")
(#(DD4ACE BAC3F17 102153B3 1522715E 18915102 19B7D934 1FC40BAC)
 "(:APPEND :SUPERSEDE :RENAME-AND-DELETE :RENAME NIL :ERROR :NEW-VERSION)"
 "(  (& (^ (>> val 14) (>> val 21)) 7))")
(#(DD4ACE EA2EA63 1584640E 1DED3ADB)
 "(:FORCE :ERROR :WARN :PUNT)"
 "(  (& (>> val 21) 3) )")
(#(DD4ACE 10CA5ADC 1584640E 15F567F4 16B00232)
 "(ERROR WARN STYLE-WARN SB-C:COMPILER-WARN SB-C:COMPILER-STYLE-WARN)"
 "(  (& (- (>> val 4) (>> val 8)) 7))")
(#(DD4ACE 1584640E 1A6275AB 1F7FA0B6)
 "(SIGNAL ERROR CERROR WARN)"
 "(  (& (>> val 16) 3) )")
(#(DF2367 3A83C0C C4FD31D C697EEC 113CB58C 1CC7F46E)
 "(:DEFINED-METHOD :DEFINED :DEFINED-HERE :ASSUMED :DECLARED-VERIFY :DECLARED)"
 "(  (& (+ val (>> val 5)) 7))")
(#(DF2367 C4FD31D 113CB58C 1CC7F46E)
 "(:DEFINED :ASSUMED :DEFINED-METHOD :DECLARED)"
 "(  (& val 3) )")
(#(E4CB82 2D83FFB 11FB8EC1 120C8616 18ED9EA3 1A5017F1)
 "(:ALLOW-OTHER-KEYS :ALIGNMENT :N-WORDS :RAW-TYPE :COMPARATOR :ACCESSOR-FUN)"
 "(  (& (- (>> val 1) (>> val 25)) 7))")
(#(E75737 2AAD219 4F34DDE 6F35104 7F35297 B08DE4D F039DEB 16B428A2 1C33E6FC)
 "(= >= <= > < EQL EQ SB-C::%INSTANCE-TYPEP %TYPEP)"
 "((let ((tab #a((8) (unsigned-byte 8) 0 0 13 0 0 0 7 5)))
  (let ((b (& val #x7)))
   (let ((a (>> (<< val 3) 29)))
    (^ a (aref tab b))))))")
(#(EAAC33 2D83FFB 82A6565 AAC2B7F B631293 1260D105 191307EE 198F2A0D 19ADB46A)
 "(:ALLOW-OTHER-KEYS :VALUE-SOURCE-FORMS :LOCAL-POLICY :POST-BINDING-LEXENV :NOTE-LEXICAL-BINDINGS :DEBUG-NAME :SOURCE-NAME :AUX-VALS :AUX-VARS)"
 "((let ((tab #a((8) (unsigned-byte 8) 0 0 0 0 0 5 9 4)))
  (let ((b (& val #x7)))
   (let ((a (>> (<< val 5) 29)))
    (^ a (aref tab b))))))")
(#(F3DEB2 42F11A6 61980DD 72DACBB 8198403 822B0BF 9198596 9F3ECDD A198729 AF3EE70 C198A4F 1119922E 131427B9 132570DA 13FFFF01
   141DAF55 15F3FFC1 16F40154 17344F50 182AE654 18F4047A 19F4060D 1A19A059 1B19A1EC 1BF40933 1C33E6FC 1DF40C59 1E000EBF
   1E197445 1F1975D8 1FF40F7F)
 "((:O . 0) (:NO . 1) (:B . 2) (:NAE . 2) (:C . 2) (:NB . 3) (:AE . 3) (:NC . 3) (:EQ . 4) (:E . 4) (:Z . 4) (:NE . 5) (:NZ . 5) (:BE . 6) (:NA . 6) (:NBE . 7) (:A . 7) (:S . 8) (:NS . 9) (:P . 10) (:PE . 10) (:NP . 11) (:PO . 11) (:L . 12) (:NGE . 12) (:NL . 13) (:GE . 13) (:LE . 14) (:NG . 14) (:NLE . 15) (:G . 15))"
 "((let ((tab #a((16) (unsigned-byte 8) 14 15 16 26 17 0 21 18 15 26 0 0 0 31 15 24)))
  (let ((b (& (>> val 1) #xf)))
   (let ((a (>> (<< val 5) 28)))
    (^ a (aref tab b))))))")
(#(F3DEB2 B2EEA4B 1119922E 111DAA9C 13195146 1ABA962F)
 "(:GEZ :GZ :NZ :LZ :LEZ :Z)"
 "(  (& (+ (>> val 0) (>> val 5) (>> val 12)) 7))")
(#(F3DEB2 B2EEA4B 1119922E 111DAA9C 13195146 1ABA962F 1FBAE402)
 "#(:RESERVED :Z :LEZ :LZ :RESERVED :NZ :GZ :GEZ)"
 "(  (& (- (>> val 4) (>> val 26)) 7))")
(#(10C484B 31D9492 42F11A6 60C502A 80C5350 8198403 A059AB1 A19431B AF3EE70 BBA7E92 EF3F4BC F9136D7 FF3F64F 141DAF55 14F3FE2E
   152EFA09 15556F9C 1562A04F 15F3FFC1 15F42066 161DB27B 16F40154 1A05B3E1 1C33E6FC 1CF40AC6 1DF40C59)
 "(:LG :F :EQ :LE :LT :LEU :LTU :N :VS :T :NE :GT :GE :GTU :GEU :P :VC :O :ULE :UGE :UE :U :G :UG :L :UL)"
 "((let ((tab #a((16) (unsigned-byte 8) 18 0 1 12 18 11 13 21 0 26 13 9 31 0 25 1)))
  (let ((b (& val #xf)))
   (let ((a (>> (<< val 3) 28)))
    (^ a (aref tab b))))))")
(#(10C484B 42F11A6 60C502A 80C5350 8198403 EF3F4BC FF3F64F 141DAF55 15556F9C 1562A04F 15F3FFC1 161DB27B 16F40154 1C33E6FC
   1CF40AC6 1DF40C59)
 "#(:F :NE :LG :UL :L :UG :G :U :T :EQ :UE :GE :UGE :LE :ULE :O)"
 "((let ((tab #a((8) (unsigned-byte 8) 0 5 8 9 6 8 7 12)))
  (let ((b (& (>> val 12) #x7)))
   (let ((a (>> (<< val 5) 29)))
    (^ a (aref tab b))))))")
(#(11242EA 9E7E496 C8B4E43 EC3EAC9 10A5F7E1 1B5DB13A 1C58D005 1C805E5B 1ED1FDF2 1F4BDEE8)
 "(SB-C:MULTIPLE-CALL SB-C:MULTIPLE-CALL-LOCAL SB-C:MULTIPLE-CALL-NAMED SB-C:STATIC-MULTIPLE-CALL-NAMED SB-C:MULTIPLE-CALL-VARIABLE SB-C:PUSH-VALUES VALUES-LIST SB-C::REVERSE-VALUES-LIST SB-C:%MORE-ARG-VALUES UNALIGNED-DX-CONS)"
 "((let ((tab #a((8) (unsigned-byte 8) 14 0 0 2 0 5 10 0)))
  (let ((b (& val #x7)))
   (let ((a (>> (<< val 3) 29)))
    (^ a (aref tab b))))))")
(#(1133902 2D83FFB 3C13640 D4575D9 12FF9C61 1C084D2B 1E38A336)
 "(:ALLOW-OTHER-KEYS :ACTION :LEVEL :COUNT :VAR :DESCRIPTION :NAME)"
 "(  (& (^ (>> val 18) (>> val 26)) 7))")
(#(11BBD24 2D83FFB 4F3EC9B 80678B2 86508A6 9DEB0A1 A843D76 AFE864E B650D5F D4575D9 EBA0CC8 10078F6A 13B59B8C 172C7D24 1B6C0324
   1C117DC2)
 "(:ALLOW-OTHER-KEYS :SINGLETON-P :ENUMERABLE-P :MIGHT-CONTAIN-OTHER-TYPES-P :UNPARSE :NEGATE :COMPLEX-= :SIMPLE-= :COMPLEX-INTERSECTION2 :SIMPLE-INTERSECTION2 :COMPLEX-UNION2 :SIMPLE-UNION2 :COMPLEX-SUBTYPEP-ARG2 :COMPLEX-SUBTYPEP-ARG1 :SIMPLE-SUBTYPEP :NAME)"
 "((let ((tab #a((8) (unsigned-byte 8) 8 12 0 13 0 0 13 8)))
  (let ((b (& (>> val 1) #x7)))
   (let ((a (>> (<< val 5) 29)))
    (^ a (aref tab b))))))")
(#(11BBD24 4F3EC9B 80678B2 86508A6 AFE864E B650D5F EBA0CC8 172C7D24 1C117DC2)
 "(:SIMPLE-= :SIMPLE-SUBTYPEP :SIMPLE-UNION2 :SIMPLE-INTERSECTION2 :COMPLEX-SUBTYPEP-ARG2 :UNPARSE :SINGLETON-P :NEGATE :COMPLEX-SUBTYPEP-ARG1)"
 "((let ((tab #a((8) (unsigned-byte 8) 0 0 0 8 0 1 0 0)))
  (let ((b (& (>> val 1) #x7)))
   (let ((a (>> (<< val 5) 29)))
    (^ a (aref tab b))))))")
(#(12AF47F 31D9492 420397C 42F11A6 8198403 A059AB1 A1D9F97 A25EE5C 1214B1D3 141DAF55 152EFA09 181488E5 1A05B3E1 1A26078C
   1B000A06 1C33E6FC 1E1DBF13)
 "((:EQ . 0) (:NE . 1) (:CS . 2) (:HS . 2) (:CC . 3) (:LO . 3) (:MI . 4) (:PL . 5) (:VS . 6) (:VC . 7) (:HI . 8) (:LS . 9) (:GE . 10) (:LT . 11) (:GT . 12) (:LE . 13) (:AL . 14))"
 "((let ((tab #a((16) (unsigned-byte 8) 0 13 7 0 0 13 1 15 0 1 0 0 0 0 0 16)))
  (let ((b (& val #xf)))
   (let ((a (>> (<< val 3) 28)))
    (^ a (aref tab b))))))")
(#(13961AC 190B2E4 19199E6 2D83FFB 2E52CBF 6A86009 AC8E54E F3F7AE8 F4B6B30 12C34A8F 1BE94ADF 1FCFEEB7)
 "(:ALLOW-OTHER-KEYS :ABORTED :BYTES-CONSED :PAGE-FAULTS :LAMBDAS-CONVERTED :EVAL-CALLS :PROCESSOR-CYCLES :GC-REAL-TIME-MS :GC-RUN-TIME-MS :SYSTEM-RUN-TIME-US :USER-RUN-TIME-US :REAL-TIME-MS)"
 "((let ((tab #a((8) (unsigned-byte 8) 12 0 12 0 3 8 10 0)))
  (+= val #x9f80cb0a)
  (^= val (>> val 16))
  (+= val (<< val 8))
  (^= val (>> val 4))
  (let ((b (& (>> val 3) #x7)))
   (let ((a (>> val 29)))
    (^ a (aref tab b))))))")
(#(141F2C7 2E7601A 805D985 CB8AB5F 103FB4B0 1098B012 17131B20 1A5197C7 1DDF9D6B)
 "(:PRINTER :VOP-VAR :PINNED :DELAY :DEPENDENCIES :COST :ATTRIBUTES :DECLARE :EMITTER)"
 "((let ((tab #a((8) (unsigned-byte 8) 0 0 0 4 4 0 15 2)))
  (let ((b (>> (<< val 3) 29)))
   (let ((a (& val #x7)))
    (^ a (aref tab b))))))")
(#(15115EA 2D83FFB 4297528 5D2FA71 6DFCD3D 805D985 8E4C2C2 C62CDF1 D4575D9 D5791F8 EBA358E FADF401 FBB375F FCB0B8A 108E958D
   132E85C2 158649C9 1682E177 17126502 1A5197C7 1A99ABFA 1A9BD84A 1ABEE259 1BAA5C56 1C06EE2A 1CA49203 1D748C83 1DD1B60F
   1E1E0B08 1EC15774)
 "(:ALLOW-OTHER-KEYS :GC-BARRIER :BEFORE-LOAD :MOVE-ARGS :SAVE-P :LTN-POLICY :TRANSLATE :NOTE :INFO-ARGS :NODE-VAR :VOP-VAR :VARIANT-VARS :VARIANT :BODY :COST :GUARD :RESULT-TYPES :ARG-TYPES :CONDITIONAL-P :IGNORES :OPTIONAL-RESULTS :OPERANDS :MORE-RESULTS :MORE-ARGS :TEMPS :RESULTS :ARGS :INHERITS :NAME :SOURCE-LOCATION)"
 "((let ((tab #a((16) (unsigned-byte 8) 1 16 0 13 16 31 21 18 7 0 31 24 0 13 21 26)))
  (let ((b (& (>> val 12) #xf)))
   (let ((a (>> (<< val 7) 28)))
    (^ a (aref tab b))))))")
(#(1513AC6 8B5C19C 91D9E04 AD1FFFF 18C92483 1CC1B151)
 "(:FPSCR :CTR :LR :XER :CCR :MEMORY)"
 "(  (& (+ (>> val 6) (>> val 15)) 7))")
(#(15A1431 5176003 B6F61B4 EBA8F8E)
 "(:UNKNOWN-RETURN-PARTNER :FUN-END :FUN-START :CODE-LOCATION)"
 "(  (& val 3) )")
(#(15C440D 2D83FFB C398ABB D4575D9 11FABC1E 154A8914)
 "(:ALLOW-OTHER-KEYS :VALUES-DOCUMENTATION :DOCUMENTATION :GETTER :EXPRESSION :NAME)"
 "(  (& (+ (>> val 12) (>> val 16)) 7))")
(#(17AC5DD 2D83FFB 5377C73 B465CCD 10F97264 15D20604 17D52C83 1B5C8A6A 1CFA2708)
 "(:ALLOW-OTHER-KEYS :STYLE-WARNING-TRACKER :SUBFORMS :POSITIONS :FORMS :WRITE-DATE :PATHNAME :EXTERNAL-FORMAT :%TRUENAME)"
 "((let ((tab #a((8) (unsigned-byte 8) 0 0 14 0 7 4 0 0)))
  (let ((b (& val #x7)))
   (let ((a (>> (<< val 3) 29)))
    (^ a (aref tab b))))))")
(#(189AAE9 2D83FFB 69C75C3 16D2EA8F 1B5C784C)
 "(:ALLOW-OTHER-KEYS :ERRORP :CLASSIFY-SYMLINKS :DIRECTORIES :FILES)"
 "(  (& (+ val (>> val 8)) 7))")
(#(1A93B9F B00D22F ED60332 10932BD7 179EC24E 1BE841E7)
 "(MEMBER-IF-NOT MEMBER-IF RASSOC-IF-NOT RASSOC-IF ASSOC-IF-NOT ASSOC-IF)"
 "(  (& (^ (>> val 19) (>> val 22)) 7))")
(#(1B44A78 2D83FFB B4D6D7F EB88712 1F52D597)
 "(:ALLOW-OTHER-KEYS :LEXICAL-VARS :DECLARATIONS :WALK-FORM :WALK-FUNCTION)"
 "(  (& (^ val (>> val 14)) 7))")
(#(1C5C66D 2D83FFB 497BDAC 9894789 DD9FE8B 1264B103 12B75C5F 1C78155D)
 "(:ALLOW-OTHER-KEYS :PRINT-WEEKDAY :PRINT-TIMEZONE :PRINT-MERIDIAN :PRINT-SECONDS :DATE-FIRST :STYLE :TIMEZONE)"
 "(  (& (+ (>> val 2) (>> val 7) (>> val 11)) 7))")
(#(1C5FD66 91ED00E 102153B3 1336F1AC 1CF43650)
 "(:FIXED :KNOWN-RETURN :LOCAL-CALL :FULL-CALL NIL)"
 "(  (& (+ (>> val 10) (>> val 18)) 7))")
(#(1C5FD66 CA550C6 10BCF1E4 15455F60 1647F466)
 "(:STACK :UNUSED :UNKNOWN :FIXED :DELAYED)"
 "(  (& (^ (>> val 1) (>> val 15)) 7))")
(#(1C75C2C 3E50FA6 4753DB6 5D6927A 75D1F42 7A567F2 9D698C6 A97EAE8 102153B3 109CD648 15E4F99C 1675D04A 17D67C70 189821D4
   195D0938 1A5D0ACB 1BC819B0 1FE5095A)
 "#(:BO-DNZF :BO-DNZFP :BO-DZF :BO-DZFP :BO-F :BO-FP NIL NIL :BO-DNZT :BO-DNZTP :BO-DZT :BO-DZTP :BO-T :BO-TP NIL NIL :BO-DNZ :BO-DNZP :BO-DZ :BO-DZP :BO-U NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL)"
 "((let ((tab #a((16) (unsigned-byte 8) 0 0 0 0 7 31 0 13 12 15 0 15 0 1 7 30)))
  (let ((b (& (>> val 3) #xf)))
   (let ((a (>> (<< val 7) 28)))
    (^ a (aref tab b))))))")
(#(1CA2A1F 7F70F1A CB6FC99 108AFA38 17AEF707 1F6ADF7D)
 "#(COMPILATION-SPEED DEBUG SAFETY SPACE SPEED INHIBIT-WARNINGS)"
 "(  (& (^ (>> val 4) (>> val 14)) 7))")
(#(1D91E1C 25963AB 2D83FFB 488D5DE 7C68770 7CE129D A17F098 ABF8C0F D35E444 D6D7850 11FAF42A 148B0D35 1BAF2F35)
 "(:ALLOW-OTHER-KEYS :CLOSURE-SAVE-TN :ENVIRONMENT-START :ELSEWHERE-START :DEBUG-LIVE-TNS :LIVE-TNS :NUMBER-STACK-P :CFP-SAVED-PC :LRA-SAVED-PC :RETURN-PC-PASS :RETURN-PC :OLD-FP :CLOSURE)"
 "((let ((tab #a((8) (unsigned-byte 8) 0 4 5 0 0 8 15 1)))
  (let ((b (& (>> val 3) #x7)))
   (let ((a (>> (<< val 5) 29)))
    (^ a (aref tab b))))))")
(#(1D91E1C 2D83FFB 488D5DE 7C68770 7CE129D A17F098 D35E444 D6D7850 F4B97B6 11FAF42A 148B0D35)
 "(:ALLOW-OTHER-KEYS :BSP-SAVE-TN :CLOSURE-SAVE-TN :ENVIRONMENT-START :ELSEWHERE-START :DEBUG-LIVE-TNS :LIVE-TNS :RETURN-PC-PASS :RETURN-PC :OLD-FP :CLOSURE)"
 "((let ((tab #a((8) (unsigned-byte 8) 0 0 13 7 5 5 11 0)))
  (let ((b (& val #x7)))
   (let ((a (>> (<< val 3) 29)))
    (^ a (aref tab b))))))")
(#(1D91E1C 2D83FFB 6390A20 6EF69DC 7C68770 82C25BB ABF8C0F D35E444 D4575D9 F575E80 162CDE7F 194313BC 1AFE108A 1B62E448 1BAF2F35
   1D30DC7C)
 "(:ALLOW-OTHER-KEYS :ELSEWHERE-PC :START-PC :CLOSURE-SAVE :CFP-SAVED-PC :LRA-SAVED-PC :OLD-FP :RETURN-PC-PASS :RETURN-PC :RETURNS :ARGUMENTS :TLF-NUMBER :BLOCKS :VARS :KIND :NAME)"
 "((let ((tab #a((8) (unsigned-byte 8) 12 12 2 0 12 14 7 6)))
  (let ((b (& (>> val 11) #x7)))
   (let ((a (>> (<< val 5) 29)))
    (^ a (aref tab b))))))")
(#(1DE9D83 29F44EF 2D83FFB 72B1D12 7A70ACA AA5F8BA AC14D1C BD01872 C420C04 CC3F85F FA6ADD3 12F895BA 15CC0915 1B4B667C 1D30DC7C
   1EFAF033)
 "(:ALLOW-OTHER-KEYS :FUNCTIONAL :SAME-BLOCK-P :INLINE-EXPANSION :INLINEP :KIND :SETS :INFO :DYNAMIC-EXTENT :EVER-USED :REFS :WHERE-FROM :DEFINED-TYPE :TYPE :%SOURCE-NAME :NUMBER)"
 "((let ((tab #a((8) (unsigned-byte 8) 0 12 12 4 14 6 14 0)))
  (let ((b (& (>> val 10) #x7)))
   (let ((a (>> (<< val 5) 29)))
    (^ a (aref tab b))))))")
(#(1E847AD A771EC5 E70844A 1A23C247 1AAF3CC2 1C5EFFF8)
 "(SB-C::PROPER-OR-DOTTED-LIST SB-C::PROPER-OR-CIRCULAR-LIST SB-C::PROPER-SEQUENCE SB-C::PROPER-LIST TYPE-SPECIFIER SB-C::MODIFYING)"
 "(  (& (^ (>> val 1) (>> val 13)) 7))")
(#(1E847AD A771EC5 1A23C247 1AAF3CC2 1C5EFFF8)
 "(SB-C::PROPER-OR-CIRCULAR-LIST SB-C::PROPER-OR-DOTTED-LIST SB-C::PROPER-LIST SB-C::PROPER-SEQUENCE TYPE-SPECIFIER)"
 "(  (& (^ (>> val 5) (>> val 20)) 7))")
(#(1E847AD A771EC5 1AAF3CC2 1C5EFFF8)
 "(SB-C::PROPER-OR-DOTTED-LIST SB-C::PROPER-OR-CIRCULAR-LIST SB-C::PROPER-SEQUENCE SB-C::PROPER-LIST)"
 "(  (& (>> val 2) 3) )")
(#(1E9089F 2D83FFB 8BDE5B2 B7AF76D E6D6C2F)
 "(:ALLOW-OTHER-KEYS :FLAG-TN :TEMP-TN :NODE :STACK-P)"
 "(  (& (- val (>> val 9)) 7))")
(#(1FB9BE8 7CF6BF7 A6F713D 185ABB09 1926D5EE)
 "(:FINAL :NUMERIC :FILTERED :SIGN-EXTENDED :RAW)"
 "(  (& (^ (>> val 6) (>> val 17)) 7))")
(#(2186BB2 2CF0EF9 2D83FFB 5324C60 5AA3342 A788DDA B465CCD C85B539 CEAB9AF 19DC5A17)
 "(:ALLOW-OTHER-KEYS :EMIT-CFASL :ENTRY-POINTS :BLOCK-COMPILE :TRACE-FILE :PROGRESS :EXTERNAL-FORMAT :PRINT :VERBOSE :OUTPUT-FILE)"
 "((let ((tab #a((8) (unsigned-byte 8) 8 4 0 8 0 7 0 0)))
  (let ((b (& val #x7)))
   (let ((a (>> (<< val 3) 29)))
    (^ a (aref tab b))))))")
(#(2186BB2 2CF0EF9 2D83FFB 880B5A9 12DFB17D 1BE22828)
 "(:ALLOW-OTHER-KEYS :COMPILE-TOPLEVEL-OBJECT :ENTRY-POINTS :BLOCK-COMPILE :MSAN-UNPOISON :COVERAGE-METADATA)"
 "(  (& (- val (>> val 25)) 7))")
(#(223F137 2D83FFB 314FDF6 6DDCB4B 79928BD 7C7407E 972DBF5 9773C53 AB30BBE AD0F217 AFA87CC E05B14F E3707AB 123B71A6 14EF2663
   15735C77 16D80B83 184A30FD 1A9E090D 1D1D6422 1DDF9D6B 1E17AD07 1F2CFB0C)
 "(:ALLOW-OTHER-KEYS :READ-ONLY-ARGS :CONSTANTS :EXTERNALLY-CHECKABLE-TYPE :FOLDER :ANNOTATION :CALL-TYPE-DERIVER :RESULT-ARG :PREDICATE-TYPE :TEMPLATES :EQUALITY-CONSTRAINT :CONSTRAINT-PROPAGATE-IF :CONSTRAINT-PROPAGATE-RESULT :CONSTRAINT-PROPAGATE-BACK :CONSTRAINT-PROPAGATE :STACK-ALLOCATE-RESULT :IR2-HOOK :IR2-CONVERT :LTN-ANNOTATE :OPTIMIZER :DERIVE-TYPE :TRANSFORMS :ATTRIBUTES)"
 "((let ((tab #a((16) (unsigned-byte 8) 0 0 0 1 1 15 0 31 0 21 21 14 24 28 11 9)))
  (let ((b (>> (<< val 3) 28)))
   (let ((a (& val #xf)))
    (^ a (aref tab b))))))")
(#(2272EB9 2D83FFB 4F39EEA D4575D9 152FF428 1812BD4D 1B8B3DFE)
 "(:ALLOW-OTHER-KEYS :SLOTS :VARIABLE-LENGTH-P :LENGTH :LOWTAG :WIDETAG :NAME)"
 "(  (& (>> val 19) 7))")
(#(22B5571 2F74C2C 42EDADD 49305EF 9DC592F BD01872 EF36E51 11478F0B 131B15E2 131CDF30 1506BD28 1873EDAE 1A8E5A04 1BF9B8CE
   1C15D24A 1CC5F551 1E15845B 1FA65DEC)
 "(DECLARATION DEPRECATED MAYBE-INLINE NOTINLINE INLINE ENABLE-PACKAGE-LOCKS DISABLE-PACKAGE-LOCKS UNMUFFLE-CONDITIONS MUFFLE-CONDITIONS OPTIMIZE END-BLOCK START-BLOCK FREEZE-TYPE FTYPE TYPE ALWAYS-BOUND GLOBAL SPECIAL)"
 "((let ((tab #a((16) (unsigned-byte 8) 13 0 0 0 0 0 0 0 9 0 31 0 13 18 7 4)))
  (let ((b (& val #xf)))
   (let ((a (>> (<< val 3) 28)))
    (^ a (aref tab b))))))")
(#(22B5571 4157BFC 49305EF 51FC14A 9DC592F AA5F8BA BD01872 EF36E51 11478F0B 131B15E2 131CDF30 13775562 1384909E 1396A1B6
   1506BD28 173E9024 1A8E5A04 1BF9B8CE 1FA987D3)
 "(SB-C::CONSTANT-VALUE SB-C::NO-CONSTRAINTS SB-C::CURRENT-DEFMETHOD SB-ASSEM::FLUSHABLE ENABLE-PACKAGE-LOCKS DISABLE-PACKAGE-LOCKS DYNAMIC-EXTENT UNMUFFLE-CONDITIONS MUFFLE-CONDITIONS OPTIMIZE SB-C::NO-COMPILER-MACRO MAYBE-INLINE NOTINLINE INLINE FTYPE SPECIAL IGNORABLE IGNORE TYPE)"
 "((let ((tab #a((16) (unsigned-byte 8) 13 0 0 0 0 0 6 0 24 0 7 24 17 0 15 8)))
  (let ((b (& val #xf)))
   (let ((a (>> (<< val 7) 28)))
    (^ a (aref tab b))))))")
(#(22B5571 4157BFC 49305EF 9DC592F AA5F8BA BD01872 11478F0B 131B15E2 131CDF30 1506BD28 1BF9B8CE 1FA987D3)
 "(UNMUFFLE-CONDITIONS MUFFLE-CONDITIONS MAYBE-INLINE NOTINLINE INLINE FTYPE OPTIMIZE IGNORABLE IGNORE TYPE DYNAMIC-EXTENT SPECIAL)"
 "((let ((tab #a((8) (unsigned-byte 8) 8 0 0 8 5 15 4 0)))
  (let ((b (& (>> val 4) #x7)))
   (let ((a (>> (<< val 5) 29)))
    (^ a (aref tab b))))))")
(#(246F15A 2D83FFB EBC958D ED9FD53 14FF6FA7 15E54542)
 "(:ALLOW-OTHER-KEYS :PARENT :LAST-DEFN-SOURCE-LOC :STREAM :FILE-INFO :START-REAL-TIME)"
 "(  (& (- val (>> val 16)) 7))")
(#(247BA21 32D1CBD 47B9C46 EAAAF1F 1ECBF2B4 1FC1A890)
 "(%RAW-INSTANCE-REF/COMPLEX-DOUBLE %RAW-INSTANCE-REF/COMPLEX-SINGLE %RAW-INSTANCE-REF/SIGNED-WORD %RAW-INSTANCE-REF/DOUBLE %RAW-INSTANCE-REF/SINGLE %RAW-INSTANCE-REF/WORD)"
 "(  (& (- (>> val 1) (>> val 23)) 7))")
(#(24AA20E 2B68C07 2BAE11F 86FEA63 1DBEE1CC)
 "(:COVERAGE-MARKS :KNOWN-FUN :FDEFINITION :LOAD-TIME-VALUE :ENTRY)"
 "(  (& (^ val (>> val 18)) 7))")
(#(25503B8 2D83FFB 634E9C8 D9B0A28 DDD7F24 EA1E569 19B79FF6)
 "(:ALLOW-OTHER-KEYS :FUNCTION :FORM :PLIST :START-POSITIONS :CREATED :NAMESTRING)"
 "(  (& (- (>> val 1) (>> val 15)) 7))")
(#(25827B9 2B3EDA3 391E233 7436840 BD01872 11F25102 12821F1C 159CB801 1D5DAB1C 1DAB18D0 1F38ADF8)
 "(:PURE :INITIAL-OFFSET :NAMED :TYPE :PRINT-OBJECT :PRINT-FUNCTION :INCLUDE :PREDICATE :COPIER :CONSTRUCTOR :CONC-NAME)"
 "((let ((tab #a((8) (unsigned-byte 8) 0 5 8 11 4 1 0 5)))
  (let ((b (& (>> val 4) #x7)))
   (let ((a (>> (<< val 5) 29)))
    (^ a (aref tab b))))))")
(#(25827B9 391E233 102153B3 12821F1C 159CB801 1DAB18D0)
 "(:NAMED :PREDICATE :COPIER :CONSTRUCTOR :CONC-NAME NIL)"
 "(  (& (- (>> val 3) (>> val 5)) 7))")
(#(2595136 2D83FFB 65A2E63 95A3EE5 16AE7E65)
 "(:ALLOW-OTHER-KEYS :WRAP-BLOCK :ENVIRONMENT :DOC-STRING-ALLOWED :ACCESSOR)"
 "(  (& (- (>> val 7) (>> val 22)) 7))")
(#(25963AB 2D83FFB 2DD22FE 54F17B8 57BCC60 6050970 AA13F3E AFD7FDF CC3F85F D4575D9 F25F601 F49D139 11FB8EC1 132E85C2 17264E90
   1ACDEFE7 1AE3A81C 1E6013D9)
 "(:ALLOW-OTHER-KEYS :RESERVE-LOCATIONS :ALIGNMENT :NUMBER-STACK-P :MOVE-ARG-VOPS :MOVE-COSTS :MOVE-VOPS :LOAD-COSTS :MOVE-FUNS :SAVE-P :CONSTANT-SCS :ALTERNATE-SCS :OPERAND-SIZE :LOCATIONS :ELEMENT-SIZE :SB :NUMBER :NAME)"
 "((let ((tab #a((16) (unsigned-byte 8) 0 1 13 0 5 0 7 0 11 3 26 7 23 0 0 13)))
  (let ((b (& (>> val 9) #xf)))
   (let ((a (>> (<< val 7) 28)))
    (^ a (aref tab b))))))")
(#(25B3CE5 2D83FFB 45CF61B 4BF0315 A9A92D0 BD01872 1BC82B5D)
 "(:ALLOW-OTHER-KEYS :INFINITY-DATA :OPERATIONS :FLAG-VARIABLE :TEMP-VARIABLE :TYPE :ANSWER-VARIABLE)"
 "(  (& (+ (>> val 2) (>> val 6) (>> val 25)) 7))")
(#(28AA72B 727FC83 7C57A17 EBCAB16 1398C4BF)
 "#(:CALL :SETHI :ADD :ABSOLUTE :SETHI+ADD)"
 "(  (& (>> val 20) 7))")
(#(291DA8E 2D83FFB 2F68790 58F1BE3 5A66CDA E241B0F 10FFF308 11CFC247 125C7089 174147E2 17F372BB 1DF478CA 1FF78BA5)
 "(:ALLOW-OTHER-KEYS :HANDLED-CONDITIONS :ORIGINAL-SOURCE-PATH :INITIALIZED :FORMAT-ARGS :PATH :FILE-POSITION :FILE-NAME :CONTEXT :ORIGINAL-FORM-STRING :ORIGINAL-FORM :%SOURCE :%ENCLOSING-SOURCE)"
 "((let ((tab #a((8) (unsigned-byte 8) 2 14 0 9 0 12 0 0)))
  (let ((b (& val #x7)))
   (let ((a (>> (<< val 3) 29)))
    (^ a (aref tab b))))))")
(#(29F44EF 2D83FFB 72B1D12 7A70ACA AA5F8BA AC14D1C BD01872 C420C04 CC3F85F 12F895BA 1B4B667C 1D30DC7C)
 "(:ALLOW-OTHER-KEYS :KIND :SETS :INFO :DYNAMIC-EXTENT :EVER-USED :REFS :WHERE-FROM :DEFINED-TYPE :TYPE :%SOURCE-NAME :NUMBER)"
 "((let ((tab #a((8) (unsigned-byte 8) 4 0 0 9 5 0 14 12)))
  (let ((b (& (>> val 12) #x7)))
   (let ((a (>> (<< val 4) 29)))
    (^ a (aref tab b))))))")
(#(29F44EF 4C0DDF8 9F3BC27 B9DB7B4 19019F31)
 "#(:BINDS :CALLS :SETS :REFERENCES :MACROEXPANDS)"
 "(  (& (- (>> val 4) (>> val 24)) 7))")
(#(2AEA20D 2D83FFB 3FD7B36 58F1BE3 F7912D6)
 "(:ALLOW-OTHER-KEYS :ALLOW-LAMBDA-LIST :CONTEXT :BINDING-FORM-P :LEXENV)"
 "(  (& (- (>> val 7) (>> val 9)) 7))")
(#(2B0ECD5 331AF48 6FE04AB D28C61A D7290B0 EBCAB16 102153B3 16FE7D1C 1750C880 19B79FF6)
 "(SB-WALKER::CALL LAMBDA SET NIL QUOTE RETURN SB-WALKER::EFFECT SB-WALKER::TEST FUNCTION EVAL)"
 "((let ((tab #a((8) (unsigned-byte 8) 0 0 5 0 12 8 4 0)))
  (let ((b (& val #x7)))
   (let ((a (>> (<< val 3) 29)))
    (^ a (aref tab b))))))")
(#(2B0ECD5 18A41582 19A5A571 19B79FF6)
 "(FUNCTION SB-C::GLOBAL-FUNCTION LAMBDA NAMED-LAMBDA)"
 "(  (& (>> val 1) 3) )")
(#(2B36623 36DB542 51A470F 76EBABE 130DF36A 1551D38C 15D24E04)
 "(SB-PCL::CONDITION-CLASS STRUCTURE-CLASS SB-PCL:SYSTEM-CLASS BUILT-IN-CLASS SB-MOP:FUNCALLABLE-STANDARD-CLASS STANDARD-CLASS SB-PCL::SLOT-CLASS)"
 "(  (& (+ (>> val 4) (>> val 6)) 7))")
(#(2B3EDA3 391E233 7436840 BD01872 11F25102 12821F1C 159CB801 1D5DAB1C 1DAB18D0 1F38ADF8)
 "(:PURE :INITIAL-OFFSET :TYPE :PRINT-OBJECT :PRINT-FUNCTION :INCLUDE :PREDICATE :COPIER :CONSTRUCTOR :CONC-NAME)"
 "((let ((tab #a((8) (unsigned-byte 8) 0 5 11 0 15 1 0 5)))
  (let ((b (& (>> val 4) #x7)))
   (let ((a (>> (<< val 5) 29)))
    (^ a (aref tab b))))))")
(#(2B3EDA3 391E233 7436840 BD01872 11F25102 12821F1C 159CB801 1D5DAB1C 1F38ADF8)
 "#(:INCLUDE :INITIAL-OFFSET :PURE :TYPE :CONC-NAME :COPIER :PREDICATE :PRINT-FUNCTION :PRINT-OBJECT)"
 "((let ((tab #a((8) (unsigned-byte 8) 0 5 1 11 3 0 0 5)))
  (let ((b (& (>> val 4) #x7)))
   (let ((a (>> (<< val 5) 29)))
    (^ a (aref tab b))))))")
(#(2D83FFB 2DBFF73 449C786 5E9B881 732BDD9 8B27B84 9867CB5 B4D6D7F F207877 F3DD31A 10720886 1091E960 11459198 14E24D80 163E7558
   19E1605A 1B0DCB72)
 "(:ALLOW-OTHER-KEYS :SHARE-BLOCK-P :BLOCK-NAME :KEYWORD-BITS :N-OPTIONAL :MIN-ARGS :N-BOUND-VARS :SPECIALS :SEXPR :VALUES :SPECIAL-B :SYMBOLS :TYPE-RESTRICTIONS :EXTRA-TYPECHECKS :BINDING-TYPECHECKS :%POLICY :DECLARATIONS)"
 "((let ((tab #a((16) (unsigned-byte 8) 0 0 13 0 13 7 13 12 15 13 1 13 0 0 0 21)))
  (let ((b (& val #xf)))
   (let ((a (>> (<< val 3) 28)))
    (^ a (aref tab b))))))")
(#(2D83FFB 2DD0906 D28C61A 10BC6DF5 126B59C0 13351B33 1C084D2B 1E02DA52)
 "(:ALLOW-OTHER-KEYS :KEY :COUNT :END :START :TEST-NOT :TEST :FROM-END)"
 "(  (& (^ (>> val 4) (>> val 28)) 7))")
(#(2D83FFB 2DD0906 D28C61A 10BC6DF5 126B59C0 13351B33 1E02DA52)
 "(:ALLOW-OTHER-KEYS :KEY :FROM-END :END :START :TEST-NOT :TEST)"
 "(  (& (+ val (>> val 3)) 7))")
(#(2D83FFB 2F60CFC 847A57F BD01872 E38F6F8 FAC50C3 15EA1B2C 17131B20 1AEC1DD5)
 "(:ALLOW-OTHER-KEYS :FIELDS :FIELD :USE-LABEL :SIGN-EXTEND :PRINTER :PREFILTER :TYPE :VALUE)"
 "((let ((tab #a((8) (unsigned-byte 8) 0 0 0 8 3 3 5 2)))
  (let ((b (& (>> val 2) #x7)))
   (let ((a (>> (<< val 31) 29)))
    (^ a (aref tab b))))))")
(#(2D83FFB 2F99B31 864222B 1662A88A 1F029D6B)
 "(:ALLOW-OTHER-KEYS :SIMILAR-CONSTANTS :EQL-CONSTANTS :FREE-FUNS :FREE-VARS)"
 "(  (& (+ (>> val 1) (>> val 11)) 7))")
(#(2D83FFB 2FD791A 48CBBE0 8FBD71C D9D128B 19F99308)
 "(:ALLOW-OTHER-KEYS :COLINC :COLNUM :RELATIVEP :SECTIONP :POSN)"
 "(  (& (^ val (>> val 2)) 7))")
(#(2D83FFB 2FD791A 7DF5576 87B625D 119EAA75 16280FBF 19287F33)
 "(:ALLOW-OTHER-KEYS :SUFFIX :PREFIX :BLOCK-END :SECTION-END :DEPTH :POSN)"
 "(  (& (+ val (>> val 3)) 7))")
(#(2D83FFB 2FD791A 119EAA75 16280FBF 1D30DC7C)
 "(:ALLOW-OTHER-KEYS :KIND :SECTION-END :DEPTH :POSN)"
 "(  (& (^ (>> val 1) (>> val 10)) 7))")
(#(2D83FFB 314FDF6 74D1EE3 AD0F217 E3707AB 123B71A6 12ADBA95 184A30FD 1D1D6422)
 "(:ALLOW-OTHER-KEYS :READ-ONLY :FOLDER :ANNOTATION :CALL-TYPE-DERIVER :OVERWRITE-FNDB-SILENTLY :RESULT-ARG :OPTIMIZER :DERIVE-TYPE)"
 "((let ((tab #a((8) (unsigned-byte 8) 0 0 15 0 0 3 2 6)))
  (let ((b (& val #x7)))
   (let ((a (>> (<< val 3) 29)))
    (^ a (aref tab b))))))")
(#(2D83FFB 31DFC01 5CAEFED 7D36284 13351B33 13720D3F 1ACE528D 1D30DC7C)
 "(:ALLOW-OTHER-KEYS :KEY :DEFAULT-P :DEFAULT :SUPPLIED-USED-P :SUPPLIED-P :KIND :SPECIALP)"
 "(  (& (- (>> val 3) (>> val 21)) 7))")
(#(2D83FFB 32BDBE5 3511E3A 3D2F179 5D2FA71 6DFCD3D 8E4C2C2 8FDE47B 99C08B3 BD01872 C62CDF1 D4575D9 D9ED77E E3707AB FBB375F
   10113B7E 132E85C2 14673302 14D7A12A 1573C22C 158649C9 17126502 1803E7E1 1884DD16 1A5197C7 1ABEE259 1AF68EAF 1B6BC745
   1CA49203 1D77E2C6 1E1E0B08 1EBC6344 1FF51002)
 "(:ALLOW-OTHER-KEYS :GC-BARRIER :AFTER-SC-SELECTION :MOVE-VOP-P :OPTIONAL-RESULTS :OPTIMIZER :TARGETS :REF-ORDERING :TEMPS :NUM-RESULTS :NUM-ARGS :VARIANT :GENERATOR-FUNCTION :MORE-ARG-LOAD-SCS :RESULT-LOAD-SCS :ARG-LOAD-SCS :MORE-RESULT-COSTS :MORE-ARG-COSTS :RESULT-COSTS :ARG-COSTS :MOVE-ARGS :SAVE-P :INFO-ARG-COUNT :NOTE :COST :LTN-POLICY :GUARD :MORE-RESULTS-TYPE :MORE-ARGS-TYPE :RESULT-TYPES :ARG-TYPES :TYPE :NAME)"
 "((let ((tab #a((32) (unsigned-byte 8) 0 0 0 0 0 9 0 28 28 0 19 0 28 0 0 10 0 0 16 9 0 0 9 0 0 0 12 9 0 16 9 47)))
  (let ((b (& val #x1f)))
   (let ((a (>> (<< val 3) 27)))
    (^ a (aref tab b))))))")
(#(2D83FFB 339ECDA 4FFE764 D524721 19B79FF6)
 "(:ALLOW-OTHER-KEYS :ARG-INFO :NEXT-METHOD-CALL :PV :FUNCTION)"
 "(  (& (+ (>> val 1) (>> val 10)) 7))")
(#(2D83FFB 341F7D8 3C971D7 58F1BE3 BD01872 F7912D6)
 "(:ALLOW-OTHER-KEYS :CONTEXT :TYPE :FIRED :LEXENV :SOURCE-PATH)"
 "(  (& (^ (>> val 1) (>> val 27)) 7))")
(#(2D83FFB 341F7D8 3C971D7 BD01872 F7912D6 11B095DD 126ADB02 1A80F201 1B408880)
 "(:ALLOW-OTHER-KEYS :TYPE :RESULT-SPECS :ARG-SPECS :CALLER :DEPS :FIRED :LEXENV :SOURCE-PATH)"
 "((let ((tab #a((8) (unsigned-byte 8) 0 14 0 5 0 5 0 7)))
  (let ((b (& val #x7)))
   (let ((a (>> (<< val 3) 29)))
    (^ a (aref tab b))))))")
(#(2D83FFB 341F7D8 3C971D7 BF5F421 F7912D6)
 "(:ALLOW-OTHER-KEYS :LAMBDA-VAR :FIRED :LEXENV :SOURCE-PATH)"
 "(  (& (- (>> val 5) (>> val 21)) 7))")
(#(2D83FFB 341F7D8 3C971D7 F7912D6 11B095DD)
 "(:ALLOW-OTHER-KEYS :CALLER :FIRED :LEXENV :SOURCE-PATH)"
 "(  (& (+ val (>> val 1)) 7))")
(#(2D83FFB 341F7D8 3C971D7 F7912D6 15416355)
 "(:ALLOW-OTHER-KEYS :HOOK :FIRED :LEXENV :SOURCE-PATH)"
 "(  (& (- val (>> val 4)) 7))")
(#(2D83FFB 341F7D8 3C971D7 F7912D6 1B408880)
 "(:ALLOW-OTHER-KEYS :DEPS :FIRED :LEXENV :SOURCE-PATH)"
 "(  (& (- val (>> val 4)) 7))")
(#(2D83FFB 341F7D8 3C971D7 F7912D6 1D30DC7C)
 "(:ALLOW-OTHER-KEYS :KIND :FIRED :LEXENV :SOURCE-PATH)"
 "(  (& (- (>> val 5) (>> val 21)) 7))")
(#(2D83FFB 3533B6B D4575D9 1C084D2B 1D30DC7C)
 "(:ALLOW-OTHER-KEYS :WARNINGS :COUNT :KIND :NAME)"
 "(  (& (- val (>> val 5)) 7))")
(#(2D83FFB 35E6BCC 4046244 7E8EB38 D2CAFA0 D3D4FDE D4575D9 D4BB6B9 E285EA3 11FABC1E 19D0000A)
 "(:ALLOW-OTHER-KEYS :DOCUMENTATION :CELL :ALLOCATION :INITFUNCTION :INITFORM :INITFORM-P :WRITERS :READERS :INITARGS :NAME)"
 "((let ((tab #a((8) (unsigned-byte 8) 8 0 13 0 5 0 0 15)))
  (let ((b (& (>> val 12) #x7)))
   (let ((a (>> (<< val 5) 29)))
    (^ a (aref tab b))))))")
(#(2D83FFB 36A976D 940F22A C9563A8 1169B946 11FB8EC1 1E1E0B08 1F90074C)
 "(:ALLOW-OTHER-KEYS :CONVENTION :STUB :VARARGS :ARG-TYPES :RESULT-TYPE :ALIGNMENT :BITS)"
 "(  (& (>> val 10) 7))")
(#(2D83FFB 36B96CA E8BB4F4 168D24A7 1C90D22E)
 "(:ALLOW-OTHER-KEYS :DISP :SCALE :INDEX :BASE)"
 "(  (& (+ (>> val 1) (>> val 19)) 7))")
(#(2D83FFB 378C570 E881FA6 10339647 10F11E52)
 "(:ALLOW-OTHER-KEYS :WHERE :UNWINNAGE-FUN :LOSSAGE-FUN :REALLY-ASSERT)"
 "(  (& (^ (>> val 10) (>> val 21)) 7))")
(#(2D83FFB 37BBA18 79F0A54 125824DE 1A44E4EA)
 "(:ALLOW-OTHER-KEYS :PATH-KEYWORDS :FOR-KEYWORDS :ITERATION-KEYWORDS :KEYWORDS)"
 "(  (& (^ (>> val 3) (>> val 12)) 7))")
(#(2D83FFB 3BF2033 8673AFB 870F40D AB65FE6 B465CCD CF81B20 D4575D9 D64C851 111EF72D 15306542 1588B4F0 17C2457C 1A4BD0D1
   1B5C8A6A 1E5DB7A4 1EDCE097)
 "(:ALLOW-OTHER-KEYS :AUTO-CLOSE :NAME :DUAL-CHANNEL-P :INPUT-BUFFER-P :PATHNAME :DELETE-ORIGINAL :ORIGINAL :FILE :TIMEOUT :SERVE-EVENTS :EXTERNAL-FORMAT :BUFFERING :ELEMENT-TYPE :OUTPUT :INPUT :CLASS)"
 "((let ((tab #a((16) (unsigned-byte 8) 0 13 13 0 0 0 7 1 0 11 14 13 27 0 0 0)))
  (let ((b (& val #xf)))
   (let ((a (>> (<< val 3) 28)))
    (^ a (aref tab b))))))")
(#(2D83FFB 3CDD395 7E8EB38 EFA06BE F2710D0 13D11A29 166C1599 19968386 1DEBE2C0)
 "(:ALLOW-OTHER-KEYS :MAKUNBOUND :BOUNDP :WRITER :READER :LOCATION :ALLOCATION :TYPECHECK :SLOTD)"
 "((let ((tab #a((8) (unsigned-byte 8) 0 8 0 0 0 5 4 7)))
  (let ((b (>> (<< val 3) 29)))
   (let ((a (& val #x7)))
    (^ a (aref tab b))))))")
(#(2D83FFB 4157BFC 555431D 72B1D12 7A70ACA AA5F8BA ABD0207 AC14D1C B1AD88C BD01872 C420C04 CC3F85F D9B0A28 F7912D6 FA6ADD3
   105B4AC9 11FABC1E 124C48E2 12F895BA 141389A4 14777CB7 16316BB8 1B4B667C 1D30DC7C 1EFAF033)
 "(:ALLOW-OTHER-KEYS :IGNORE :TOP-LEVEL-DEFUN-P :INLINE-EXPANDED :XREF :PLIST :ENCLOSE :DOCUMENTATION :ARG-DOCUMENTATION :LEXENV :INLINE-EXPANSION :INLINEP :ENTRY-FUN :HAS-EXTERNAL-REFERENCES-P :KIND :%DEBUG-NAME :INFO :DYNAMIC-EXTENT :EVER-USED :REFS :WHERE-FROM :DEFINED-TYPE :TYPE :%SOURCE-NAME :NUMBER)"
 "((let ((tab #a((16) (unsigned-byte 8) 0 0 13 31 21 0 0 21 0 0 0 21 0 30 1 23)))
  (let ((b (& val #xf)))
   (let ((a (>> (<< val 7) 28)))
    (^ a (aref tab b))))))")
(#(2D83FFB 468DEF7 58F1BE3 F8EA2F3 12F372F7)
 "(:ALLOW-OTHER-KEYS :SIGNAL-VIA :ALLOW-SYMBOL-MACRO :ALLOW-SPECIAL :CONTEXT)"
 "(  (& (^ (>> val 4) (>> val 21)) 7))")
(#(2D83FFB 488D5DE 556E0F3 612F3EB 6473916 15C078F4 1689D418 1F8ACC18)
 "(:ALLOW-OTHER-KEYS :WIRED-MAP :LAST-BLOCK-COUNT :LIVE-TNS :ALWAYS-LIVE :CONFLICTS :LAST-OFFSET :CURRENT-SIZE)"
 "(  (& (^ val (>> val 25)) 7))")
(#(2D83FFB 4D01102 8B83D2D 8E8BEBA CF81B20 DD4199E)
 "(:ALLOW-OTHER-KEYS :HIGH :LOW :COMPLEXP :FORMAT :CLASS)"
 "(  (& (+ (>> val 3) (>> val 18)) 7))")
(#(2D83FFB 4D1F085 4F39EEA 85B2F11 97C5E0B E07876B 11685E73 11F25102 131DC383 199F1C76 1CEEE404)
 "(:ALLOW-OTHER-KEYS :DEBUG-FUN :HOOKS :INITIAL-OFFSET :CODE-CALLABLES :CODE :STORAGE-INFO :VIRTUAL-LOCATION :LENGTH :SAP-MAKER :OBJECT)"
 "((let ((tab #a((8) (unsigned-byte 8) 0 5 12 9 2 14 3 7)))
  (let ((b (& (>> val 6) #x7)))
   (let ((a (>> (<< val 31) 29)))
    (^ a (aref tab b))))))")
(#(2D83FFB 4D1F085 6A4B4F0 BD01872 E8BB4F4 1AEC1DD5 1E4E1AAC)
 "(:ALLOW-OTHER-KEYS :ENCLOSING-OBJECT :VALUE :SLOT-NAME :INDEX :OBJECT :TYPE)"
 "(  (& (+ (>> val 0) (>> val 3) (>> val 8)) 7))")
(#(2D83FFB 5240162 BD01872 C697EEC 12F895BA 1F495633)
 "(:ALLOW-OTHER-KEYS :TYPE :ASSERTED-TYPE :DEFINED-HERE :UNKNOWN-KEYS-FUN :INFO)"
 "(  (& (^ (>> val 1) (>> val 6)) 7))")
(#(2D83FFB 58F1BE3 1551D38C 190922BB 1F61E816)
 "(:ALLOW-OTHER-KEYS :SILENT :CONDITION-CLASS :ACCEPT :CONTEXT)"
 "(  (& (^ (>> val 3) (>> val 4)) 7))")
(#(2D83FFB 5AA3342 B465CCD 16A5F5BD 19DC5A17)
 "(:ALLOW-OTHER-KEYS :EXTERNAL-FORMAT :IF-DOES-NOT-EXIST :PRINT :VERBOSE)"
 "(  (& (^ (>> val 7) (>> val 18)) 7))")
(#(2D83FFB 5BB6475 1914ACB5 1DB79145 1FCFFA18)
 "(:ALLOW-OTHER-KEYS :LAST-FORM-RETRIEVED :LAST-LOCATION-RETRIEVED :TOPLEVEL-FORM-INDEX :DEBUG-SOURCE)"
 "(  (& (+ (>> val 3) (>> val 13)) 7))")
(#(2D83FFB 5D14F18 82C25BB 13351B33 17F08D68)
 "(:ALLOW-OTHER-KEYS :RETURNS :KEY :REST :POSITIONAL)"
 "(  (& (>> val 12) 7))")
(#(2D83FFB 634E9C8 D4E6353 1336F7AC 1B5C8A6A)
 "(:ALLOW-OTHER-KEYS :DONT-SAVE :HANDLE :NAMESTRING :PATHNAME)"
 "(  (& (^ val (>> val 10)) 7))")
(#(2D83FFB 634E9C8 D9B0A28 DDD7F24 EA1E569)
 "(:ALLOW-OTHER-KEYS :PLIST :START-POSITIONS :CREATED :NAMESTRING)"
 "(  (& (- (>> val 5) (>> val 20)) 7))")
(#(2D83FFB 6390A20 6EF69DC 82C25BB 9AB8F2B D4575D9 F575E80 162CDE7F 194313BC 1AFE108A 1B62E448 1D30DC7C)
 "(:ALLOW-OTHER-KEYS :ELSEWHERE-PC :START-PC :BSP-SAVE :CLOSURE-SAVE :RETURNS :ARGUMENTS :TLF-NUMBER :BLOCKS :VARS :KIND :NAME)"
 "((let ((tab #a((8) (unsigned-byte 8) 0 14 2 8 4 0 0 2)))
  (let ((b (& val #x7)))
   (let ((a (>> (<< val 5) 29)))
    (^ a (aref tab b))))))")
(#(2D83FFB 6E73EF3 80678B2 997D748 AD0D0F0 AF736AF B97E34D D2B9AC4 D4575D9 112D1B22 12CF0BBC 184EA3AD 1A250FF2 1A612CC9
   1BFA75F3 1D083852)
 "(:ALLOW-OTHER-KEYS :CANON-TRANSLS :TRANSLATIONS :NAME :NAME-HASH :CUSTOMARY-CASE :SIMPLIFY-NAMESTRING :UNPARSE-DIRECTORY-SEPARATOR :UNPARSE-ENOUGH :UNPARSE-FILE :UNPARSE-DIRECTORY :UNPARSE-HOST :UNPARSE-NATIVE :UNPARSE :PARSE-NATIVE :PARSE)"
 "((let ((tab #a((8) (unsigned-byte 8) 13 0 2 0 12 14 8 6)))
  (let ((b (& (>> val 1) #x7)))
   (let ((a (>> (<< val 5) 29)))
    (^ a (aref tab b))))))")
(#(2D83FFB 6E73EF3 80678B2 997D748 AD0D0F0 AF736AF D2B9AC4 12CF0BBC 184EA3AD 1A612CC9 1BFA75F3 1D083852)
 "(:ALLOW-OTHER-KEYS :CUSTOMARY-CASE :SIMPLIFY-NAMESTRING :UNPARSE-DIRECTORY-SEPARATOR :UNPARSE-ENOUGH :UNPARSE-FILE :UNPARSE-DIRECTORY :UNPARSE-HOST :UNPARSE-NATIVE :UNPARSE :PARSE-NATIVE :PARSE)"
 "((let ((tab #a((8) (unsigned-byte 8) 8 9 4 0 5 8 0 7)))
  (let ((b (& val #x7)))
   (let ((a (>> (<< val 5) 29)))
    (^ a (aref tab b))))))")
(#(2D83FFB 73646F9 130281FD 134243B0 1472E300 1512BD3E)
 "(:ALLOW-OTHER-KEYS :INTERACTIVE-THREADS-QUEUE :INTERACTIVE-THREADS :THREADS :LOCK :NEW-ENROLLEES)"
 "(  (& (- (>> val 1) (>> val 15)) 7))")
(#(2D83FFB 788924E 88BF057 BD01872 C444648 D4575D9 120FC1D0 17EE124C 1B3436A8)
 "(:ALLOW-OTHER-KEYS :CASE :DEFAULTS :VERSION :TYPE :NAME :DIRECTORY :DEVICE :HOST)"
 "((let ((tab #a((8) (unsigned-byte 8) 0 4 0 0 0 0 0 10)))
  (let ((b (& val #x7)))
   (let ((a (>> (<< val 3) 29)))
    (^ a (aref tab b))))))")
(#(2D83FFB 788A7AA C414B8A D4575D9 1169B946 11FB8EC1 13FB65F5 1D30DC7C 1E0A9C1B)
 "(:ALLOW-OTHER-KEYS :OFFSET :KIND :TO :FROM :NAME :SIGNED :ALIGNMENT :BITS)"
 "((let ((tab #a((8) (unsigned-byte 8) 0 0 4 1 5 12 4 0)))
  (let ((b (& val #x7)))
   (let ((a (>> (<< val 3) 29)))
    (^ a (aref tab b))))))")
(#(2D83FFB 793DF15 C20D4F1 10B6CEEA 147E276F)
 "(:ALLOW-OTHER-KEYS :SO-DATA :SO-KEY :NODE-HASH :%NODE-NEXT)"
 "(  (& (- (>> val 3) (>> val 10)) 7))")
(#(2D83FFB 7AA772E 163E7558 1A95FD85 1D9A19B2)
 "(:ALLOW-OTHER-KEYS :KEYS :TYPES :MAX-ARGS :MIN-ARGS)"
 "(  (& (+ val (>> val 25)) 7))")
(#(2D83FFB 7F71775 D4575D9 1A95FD85 1FA1A459)
 "(:ALLOW-OTHER-KEYS :ALLOWP :TYPES :POSITION :NAME)"
 "(  (& (^ (>> val 5) (>> val 12)) 7))")
(#(2D83FFB 7FE2EDD 9348843 D28C61A 13154864 1772E431 1E6D8DE3 1F1148B1)
 "(:ALLOW-OTHER-KEYS :SYNCHRONIZED :WEAKNESS :HASH-FUNCTION :REHASH-THRESHOLD :REHASH-SIZE :SIZE :TEST)"
 "(  (& (- (>> val 1) (>> val 22)) 7))")
(#(2D83FFB 808911B B465CCD 1169B946 11FB8EC1 1A4BD0D1 1E0A9C1B)
 "(:ALLOW-OTHER-KEYS :NOT-NULL :ELEMENT-TYPE :EXTERNAL-FORMAT :TO :ALIGNMENT :BITS)"
 "(  (& (+ (>> val 2) (>> val 16) (>> val 21)) 7))")
(#(2D83FFB 8317BFE D4575D9 15F71886 17207020 1F3BEF40)
 "(:ALLOW-OTHER-KEYS :PROTOTYPE :LAMBDA-LIST :SIGNEDP :WIDTH :NAME)"
 "(  (& (+ (>> val 17) (>> val 27)) 7))")
(#(2D83FFB 8440E40 CF81B20 D4575D9 10731FD3 1BF8051A 1EDCD394 1F3E3A22)
 "(:ALLOW-OTHER-KEYS :DATA :DTYPE :SPECIFIED-TYPE :TEMPVARS :HISTORY :CLASS :NAME)"
 "(  (& (- val (>> val 5)) 7))")
(#(2D83FFB 8470C00 BD01872 D4575D9 F575E80 10AFABB9 13FB65F5 14777CB7)
 "(:ALLOW-OTHER-KEYS :XREF :TYPE :FORM/DOC :ARGUMENTS :NAME :OFFSET :CLOSURE-TN)"
 "(  (& (- (>> val 3) (>> val 26)) 7))")
(#(2D83FFB 9348843 F9F647F 10EAF5B9 11923CDB)
 "(:ALLOW-OTHER-KEYS :MUTEX :TEST-FUNCTION :HASH-FUNCTION :STORAGE)"
 "(  (& (^ (>> val 2) (>> val 5)) 7))")
(#(2D83FFB 9348843 10EAF5B9 11923CDB 120C8616 14C7B81E 1C084D2B)
 "(:ALLOW-OTHER-KEYS :COUNT :TOMBSTONES :MUTEX :HASH-FUNCTION :COMPARATOR :STORAGE)"
 "(  (& (+ (>> val 5) (>> val 21)) 7))")
(#(2D83FFB 959D740 E881FA6 10F11E52 1ECAA706)
 "(:ALLOW-OTHER-KEYS :UNWINNAGE-FUN :LOSSAGE-FUN :RESULT-TEST :ARGUMENT-TEST)"
 "(  (& (- val (>> val 6)) 7))")
(#(2D83FFB 97C5E0B E07876B 11F25102 131DC383 1CEEE404 1F0803BD)
 "(:ALLOW-OTHER-KEYS :HOOKS :SOURCE-FORM-CACHE :DEBUG-FUN :VIRTUAL-LOCATION :INITIAL-OFFSET :CODE)"
 "(  (& (^ (>> val 18) (>> val 19)) 7))")
(#(2D83FFB A4B00C6 B465CCD CF81B20 10408856 16A5F5BD 18D32AF5 1A4BD0D1)
 "(:ALLOW-OTHER-KEYS :OVERLAPPED :CLASS :EXTERNAL-FORMAT :IF-DOES-NOT-EXIST :IF-EXISTS :ELEMENT-TYPE :DIRECTION)"
 "(  (& (^ val (>> val 9)) 7))")
(#(2D83FFB A4B00C6 B465CCD CF81B20 16A5F5BD 18D32AF5 1A4BD0D1)
 "(:ALLOW-OTHER-KEYS :CLASS :EXTERNAL-FORMAT :IF-DOES-NOT-EXIST :IF-EXISTS :ELEMENT-TYPE :DIRECTION)"
 "(  (& (^ val (>> val 23)) 7))")
(#(2D83FFB A7A4F23 D4575D9 E8BB4F4 F9E05CF 1D30DC7C 1E6D8DE3)
 "(:ALLOW-OTHER-KEYS :SIZE-ALIGNMENT :SIZE-INCREMENT :INDEX :SIZE :KIND :NAME)"
 "(  (& (>> val 13) 7))")
(#(2D83FFB B0D415F BE6567B F638C46 166B2149 17A03D93 1FD95B64)
 "(:ALLOW-OTHER-KEYS :SECTION-START-LINE :SUFFIX-LENGTH :PREFIX-LENGTH :PER-LINE-PREFIX-END :SECTION-COLUMN :START-COLUMN)"
 "(  (& (+ (>> val 3) (>> val 13)) 7))")
(#(2D83FFB B2C6780 D4575D9 D8AA718 133CFE4E 13C13473 159CB801 1682E177 17F8A7D9 19B8CDC8 1D062757 1F659069)
 "(:ALLOW-OTHER-KEYS :PREDICATE :TRANSLATION :PCL-CLASS :%LOCK :SUBCLASSES :SOURCE-LOCATION :DIRECT-SUPERCLASSES :STATE :LAYOUT :NAME :%BITS)"
 "((let ((tab #a((8) (unsigned-byte 8) 8 4 12 14 0 6 7 0)))
  (let ((b (& (>> val 17) #x7)))
   (let ((a (>> (<< val 4) 29)))
    (^ a (aref tab b))))))")
(#(2D83FFB B465CCD 10BC6DF5 126B59C0 1AEAA371)
 "(:ALLOW-OTHER-KEYS :NULL-TERMINATE :EXTERNAL-FORMAT :END :START)"
 "(  (& (+ (>> val 6) (>> val 23)) 7))")
(#(2D83FFB BD01872 18887AB1 19FD76A2 1CEE294B)
 "(:ALLOW-OTHER-KEYS :STRICT :SINGLE-PREDECESSOR :CAST :TYPE)"
 "(  (& (>> val 24) 7))")
(#(2D83FFB C414B8A 118559DF 126B59C0 1C084D2B 1EDDB4DB)
 "(:ALLOW-OTHER-KEYS :METHOD-FRAME-STYLE :FROM :START :ARGUMENT-LIMIT :COUNT)"
 "(  (& (+ (>> val 6) (>> val 21)) 7))")
(#(2D83FFB CCE35B7 D4575D9 E39B2CD E9862F9 F31BE0A 11BE8EC1 13FB65F5 1A0D8C5F 1C077216 1CDD7838 1D30DC7C)
 "(:ALLOW-OTHER-KEYS :UNUSED-IF :OFFSET :SCS :LOAD :LOAD-TN :DIES :BORN :TEMP :TARGET :KIND :NAME)"
 "((let ((tab #a((8) (unsigned-byte 8) 12 0 8 12 0 4 0 1)))
  (let ((b (& (>> val 5) #x7)))
   (let ((a (>> (<< val 5) 29)))
    (^ a (aref tab b))))))")
(#(2D83FFB CCE35B7 E42B920 F4737B1 10D71785 17438343)
 "(:ALLOW-OTHER-KEYS :BLOCK-TN :TARGET :DYNAMIC-STATE :SAVE-SP :HOME)"
 "(  (& (+ (>> val 2) (>> val 3)) 7))")
(#(2D83FFB CE52EBC 1073B181 10BC6DF5 126B59C0)
 "(:ALLOW-OTHER-KEYS :AS-DIRECTORY :JUNK-ALLOWED :END :START)"
 "(  (& (+ val (>> val 7)) 7))")
(#(2D83FFB D4575D9 FAC50C3 1169B946 11FB8EC1 1D30DC7C)
 "(:ALLOW-OTHER-KEYS :FIELDS :NAME :KIND :ALIGNMENT :BITS)"
 "(  (& (+ (>> val 1) (>> val 2)) 7))")
(#(2D83FFB F5809D0 118C3C77 1785EE92 19B79FF6 1FD3A3E3)
 "(:ALLOW-OTHER-KEYS :USER-DATA :FUNCTION :INCLUSIVE-PERMITTED :PREPOSITION-GROUPS :NAMES)"
 "(  (& (^ (>> val 5) (>> val 22)) 7))")
(#(2D83FFB 1073B181 10BC6DF5 126B59C0 187BBA2E)
 "(:ALLOW-OTHER-KEYS :JUNK-ALLOWED :RADIX :END :START)"
 "(  (& (^ (>> val 1) (>> val 25)) 7))")
(#(2D83FFB 10BC6DF5 10D071CC 126B59C0 13351B33 1E02DA52)
 "(:ALLOW-OTHER-KEYS :INITIAL-VALUE :END :START :FROM-END :KEY)"
 "(  (& (+ val (>> val 3)) 7))")
(#(2D83FFB 10BC6DF5 126B59C0 13351B33 1C084D2B 1E02DA52)
 "(:ALLOW-OTHER-KEYS :COUNT :END :KEY :START :FROM-END)"
 "(  (& (^ (>> val 4) (>> val 10)) 7))")
(#(2D83FFB 10BC6DF5 126B59C0 13351B33 1E02DA52)
 "(:ALLOW-OTHER-KEYS :KEY :END :START :FROM-END)"
 "(  (& (>> val 22) 7))")
(#(2D83FFB 1169B946 11FB8EC1 1A4BD0D1 1FD54E0F)
 "(:ALLOW-OTHER-KEYS :DIMENSIONS :ELEMENT-TYPE :ALIGNMENT :BITS)"
 "(  (& (- (>> val 11) (>> val 21)) 7))")
(#(2D83FFB 131C23DC 181EB11B 1A9BD84A 1F7BF790)
 "(:ALLOW-OTHER-KEYS :FAST :BODY :INTO :RESULT)"
 "(  (& (^ (>> val 2) (>> val 7)) 7))")
(#(2D83FFB 17264E90 198D0F31 1A95FD85 1C084D2B 1D30DC7C)
 "(:ALLOW-OTHER-KEYS :LOCATIONS :TYPES :PRIMITIVE-TYPES :COUNT :KIND)"
 "(  (& (^ val (>> val 28)) 7))")
(#(2DD0906 D28C61A 13351B33 159CB801 19B79FF6)
 "(FUNCTION SB-IMPL::PREDICATE SB-IMPL::KEY SB-IMPL::TEST SB-IMPL::TEST-NOT)"
 "(  (& (^ (>> val 3) (>> val 6)) 7))")
(#(2E47517 34C00E1 BCA1BE4 16252622 17505980 1B5C8A6A)
 "(COMPILED-FUNCTION HASH-TABLE PACKAGE PATHNAME RANDOM-STATE READTABLE)"
 "(  (& (+ (>> val 4) (>> val 18)) 7))")
(#(2E47517 34C00E1 BCA1BE4 17505980 1B5C8A6A)
 "(HASH-TABLE PACKAGE PATHNAME RANDOM-STATE READTABLE)"
 "(  (& (^ (>> val 1) (>> val 28)) 7))")
(#(2F7D2FB 4BD45A5 59E8BAB 7F71775 19402A3C)
 "(RASSOC ASSOC MEMBER POSITION FIND)"
 "(  (& (- (>> val 1) (>> val 11)) 7))")
(#(31B55FB CF81B20 E999239 1411B855 16B428A2 1DD50DB7)
 "(EQL SB-PCL::CLASS-EQ CLASS OR AND NOT)"
 "(  (& (>> val 1) 7))")
(#(31D9492 425593D 6558A5F 6FD7993 C2565D5 D66AC25 FDEE342 FFA0179 132570DA 13FE7863 141DAF55 15556F9C 1C33E6FC 1CF40AC6
   1EF9E6B6 1F0C4525)
 "#(:F :UN :EQ :UEQ :OLT :ULT :OLE :ULE :SF :NGLE :SEQ :NGL :LT :NGE :LE :NGT)"
 "((let ((tab #a((8) (unsigned-byte 8) 14 0 0 12 13 0 0 2)))
  (let ((b (& (>> val 3) #x7)))
   (let ((a (>> (<< val 4) 29)))
    (^ a (aref tab b))))))")
(#(31D9492 42F11A6 8198403 A059AB1 A19431B AF3EE70 BBA7E92 EF3F4BC F9136D7 141DAF55 14F3FE2E 152EFA09 15F42066 1A05B3E1
   1C33E6FC 1CF40AC6)
 "#(:F :EQ :LE :LT :LEU :LTU :N :VS :T :NE :GT :GE :GTU :GEU :P :VC)"
 "((let ((tab #a((8) (unsigned-byte 8) 0 0 5 12 13 0 8 8)))
  (let ((b (& (>> val 10) #x7)))
   (let ((a (>> (<< val 5) 29)))
    (^ a (aref tab b))))))")
(#(31D9492 152EFA09 1C33E6FC 1DFD6B68)
 "#(:LT :GT :EQ :SO)"
 "(  (& (>> val 4) 3) )")
(#(324535E 331AF48 507273D 7171179 739D471 9B69A83 1475799D 1866B7E5 1B247926 1BA778A0)
 "(THE* SB-C::WITH-SOURCE-FORM PROGV MULTIPLE-VALUE-PROG1 BLOCK UNWIND-PROTECT THE PROGN IF QUOTE)"
 "((let ((tab #a((8) (unsigned-byte 8) 0 0 0 11 5 0 0 10)))
  (let ((b (& (>> val 1) #x7)))
   (let ((a (>> (<< val 5) 29)))
    (^ a (aref tab b))))))")
(#(324535E 397A057 4F67ABB 16FE7D1C 19968386)
 "(MAKUNBOUND DEFCONSTANT COMPARE-AND-SWAP PROGV SET)"
 "(  (& (^ (>> val 3) (>> val 5)) 7))")
(#(331AF48 46D7E02 7171179 1926F0BC 1B0749E6)
 "(QUOTE :COND :IF :WHEN :UNLESS)"
 "(  (& (^ (>> val 3) (>> val 25)) 7))")
(#(34580D8 727FC83 793CD96 177AF51F 19F30CFE)
 "#(:ABSOLUTE :JMP :LUI :ADDI :SLL-SA)"
 "(  (& (^ val (>> val 15)) 7))")
(#(35DC68D 487643D 15B1443E 18EAA919)
 "(FUNCALLABLE-STRUCTURE LIST VECTOR STRUCTURE)"
 "(  (& (>> val 17) 3) )")
(#(35ED22C 102153B3 12E2CBDA 15E7305A)
 "(NIL FLOAT RATIONAL INTEGER)"
 "(  (& (>> val 6) 3) )")
(#(37C7C73 456475A 53C5D56 899E277 CDCC3EF D5CCCEE E713420 EF17DD1 112E187F 12383212 13880CF4 15FBA0DF 16A886E3)
 "#(:REQUIRED &OPTIONAL &REST &MORE &KEY &AUX &ENVIRONMENT &WHOLE &ALLOW-OTHER-KEYS &BODY :POST-ENV :POST-REST :POST-MORE)"
 "((let ((tab #a((8) (unsigned-byte 8) 0 13 0 15 4 14 2 4)))
  (let ((b (& (>> val 10) #x7)))
   (let ((a (>> (<< val 5) 29)))
    (^ a (aref tab b))))))")
(#(37C7C73 456475A 53C5D56 899E277 CDCC3EF EF17DD1 112E187F 12383212 13880CF4)
 "(&ALLOW-OTHER-KEYS &AUX &BODY &ENVIRONMENT &KEY &MORE &OPTIONAL &REST &WHOLE)"
 "((let ((tab #a((8) (unsigned-byte 8) 0 5 4 8 5 0 6 0)))
  (let ((b (& val #x7)))
   (let ((a (>> (<< val 3) 29)))
    (^ a (aref tab b))))))")
(#(37C7C73 53C5D56 899E277 CDCC3EF EF17DD1 112E187F 12383212 13880CF4)
 "(&WHOLE &BODY &ENVIRONMENT &AUX &ALLOW-OTHER-KEYS &KEY &MORE &REST)"
 "(  (& (^ val (>> val 2)) 7))")
(#(37EFB8E 7D5BCEA AC11619 E3391D6 1256235A 15455F60)
 "(SB-VM::NOISE SB-VM::IMMEDIATE-CONSTANT CONSTANT SB-VM::STACK SB-VM::FLOAT-REGISTERS SB-VM::REGISTERS)"
 "(  (& (>> val 26) 7))")
(#(391E233 12821F1C 159CB801 1DAB18D0)
 "(:CONC-NAME :CONSTRUCTOR :COPIER :PREDICATE)"
 "(  (& (>> val 15) 3) )")
(#(3A9E0C9 48FFF8A C48E090 1B247926 1DF2363B)
 "(PROGN LOCALLY SYMBOL-MACROLET MACROLET EVAL-WHEN)"
 "(  (& (>> val 4) 7))")
(#(3AF52DD 487643D 12D6C85E 15B1443E)
 "(SB-IMPL::|List| LIST SB-IMPL::|Vector| VECTOR)"
 "(  (& (>> val 20) 3) )")
(#(3BC72D2 102153B3 11B13DF2 16124E24)
 "(NIL :FAIL :DEFER :LISP)"
 "(  (& (>> val 24) 3) )")
(#(3CD666D 8A18EE5 D96C390 10BCF1E4 1256235A 1362CBC8 15AD1E77 16AE7E65 16EC497E 18E49987 1C077216 1DA11FBF)
 "(:ARG-PASS :SPECIFIED-SAVE :UNUSED :ALIAS :COMPONENT :CONSTANT :LOAD :SAVE-ONCE :SAVE :DEBUG-ENVIRONMENT :ENVIRONMENT :NORMAL)"
 "((let ((tab #a((8) (unsigned-byte 8) 12 0 13 3 0 0 6 12)))
  (let ((b (>> (<< val 3) 29)))
   (let ((a (& val #x7)))
    (^ a (aref tab b))))))")
(#(3CD666D 8A18EE5 D96C390 10BCF1E4 1256235A 1362CBC8 15AD1E77 16AE7E65 18E49987 1C077216 1DA11FBF)
 "(:ARG-PASS :UNUSED :ALIAS :COMPONENT :CONSTANT :LOAD :SAVE-ONCE :SAVE :DEBUG-ENVIRONMENT :ENVIRONMENT :NORMAL)"
 "((let ((tab #a((8) (unsigned-byte 8) 0 0 5 0 2 0 0 15)))
  (let ((b (& val #x7)))
   (let ((a (>> (<< val 3) 29)))
    (^ a (aref tab b))))))")
(#(3CDD395 4B90ACE 7E8EB38 95A3EE5 BD01872 D3D4FDE 11FABC1E 13D11A29)
 "(:TYPE :DOCUMENTATION :ALLOCATION :INITARG :INITFORM :ACCESSOR :WRITER :READER)"
 "(  (& (- (>> val 5) (>> val 6)) 7))")
(#(3CDD395 4B90ACE 95A3EE5 D3D4FDE 13D11A29)
 "(:INITFORM :INITARG :WRITER :READER :ACCESSOR)"
 "(  (& (>> val 26) 7))")
(#(3CDD395 EFA06BE 13D11A29 19968386)
 "(SB-PCL::READER SB-PCL::WRITER BOUNDP MAKUNBOUND)"
 "(  (& (>> val 3) 3) )")
(#(4006A45 9007224 1122FCBD 1623049C)
 "(:NFKC :NFC :NFKD :NFD)"
 "(  (& (>> val 4) 3) )")
(#(4157BFC 49305EF AA5F8BA 1396A1B6 173E9024 1FA987D3)
 "(SPECIAL IGNORABLE IGNORE DYNAMIC-EXTENT SB-C::CONSTANT-VALUE SB-C::NO-CONSTRAINTS)"
 "(  (& (- (>> val 5) (>> val 15)) 7))")
(#(41FB34E 732BDD9 BC2D01D 102153B3)
 "(NIL :STRINGS :BOTH :SYMBOLS)"
 "(  (& (>> val 1) 3) )")
(#(42EDADD 49305EF BD01872 11478F0B 131CDF30 1506BD28 1BF9B8CE 1CC5F551 1FA65DEC)
 "(MAYBE-INLINE NOTINLINE INLINE TYPE FTYPE END-BLOCK START-BLOCK GLOBAL SPECIAL)"
 "((let ((tab #a((8) (unsigned-byte 8) 0 0 0 12 4 0 0 1)))
  (let ((b (& val #x7)))
   (let ((a (>> (<< val 3) 29)))
    (^ a (aref tab b))))))")
(#(42F11A6 8198403 141DAF55 1A19A059)
 "#(:GE :LE :NE :NS)"
 "(  (& (>> val 1) 3) )")
(#(444822D 17C44102 1CA2F2FA 1DA2F48D 1EA2F620 1FA2F7B3)
 "(:XCC :ICC :FCC3 :FCC2 :FCC1 :FCC0)"
 "(  (& (- val (>> val 9)) 7))")
(#(444822D 17C44102 1CA2F2FA 1DA2F48D 1EA2F620 1FA2F7B3 1FBAE402)
 "#(:FCC0 :FCC1 :FCC2 :FCC3 :ICC :RESERVED :XCC :RESERVED)"
 "(  (& (- (>> val 1) (>> val 6)) 7))")
(#(444822D 17C44102 1FBAE402)
 "#(:ICC :RESERVED :XCC :RESERVED)"
 "(  (& (>> val 8) 3) )")
(#(450DECD DB121C2 102153B3 12B126B3 13D924E0)
 "(NIL :FROB-NFP :LOAD-RETURN-PC :LOAD-OLD-FP :LOAD-NARGS)"
 "(  (& (+ (>> val 5) (>> val 7)) 7))")
(#(456475A 53C5D56 CDCC3EF 12383212 13880CF4)
 "(&KEY &BODY &REST &AUX &OPTIONAL)"
 "(  (& (+ val (>> val 8)) 7))")
(#(468CEE4 C414B8A CCE35B7 DF0AB1F E39B2CD 1A0D8C5F 1E0A9C1B)
 "(:TO :FROM :TARGET :MORE :LOAD-IF :LOAD-TN :SCS)"
 "(  (& (+ (>> val 1) (>> val 26)) 7))")
(#(487643D 49039A2 9F68C87 15B1443E 18919578 1B91FC64)
 "(SIMPLE-BASE-STRING SIMPLE-STRING STRING SIMPLE-VECTOR VECTOR LIST)"
 "(  (& (^ (>> val 14) (>> val 21)) 7))")
(#(487643D 49039A2 102153B3 15B1443E 1B6D6FD7)
 "(SIMPLE-VECTOR VECTOR CONS LIST NIL)"
 "(  (& (+ (>> val 1) (>> val 4)) 7))")
(#(48D4754 6B4780F A8C210D 158C39E7)
 "(:BIVALENT SIGNED-BYTE UNSIGNED-BYTE CHARACTER)"
 "(  (& (- val (>> val 5)) 3) )")
(#(49305EF 55E7F8C E9A5410 10241AE7)
 "(SB-PCL::%CLASS SB-PCL::%PARAMETER SB-PCL::%VARIABLE-REBINDING SPECIAL)"
 "(  (& (>> val 8) 3) )")
(#(49305EF BCB074C 10599A53 1256235A 1647F466 1CC5F551)
 "(:UNKNOWN :ALIEN :GLOBAL :MACRO :CONSTANT :SPECIAL)"
 "(  (& (- (>> val 1) (>> val 4)) 7))")
(#(49305EF 1647F466 18A41582 1CC5F551)
 "(:UNKNOWN :GLOBAL :GLOBAL-FUNCTION :SPECIAL)"
 "(  (& (^ val (>> val 2)) 3) )")
(#(4BC5E38 91ED00E B3B8431 E786994 1132711D 13EA8DF2 19306CD4 19B25748 1B4FDEF8)
 "(:UNPARSED :NON-LOCAL-ENTRY :SINGLE-VALUE-RETURN :CALL-SITE :BLOCK-START :NON-LOCAL-EXIT :INTERNAL-ERROR :KNOWN-RETURN :UNKNOWN-RETURN)"
 "((let ((tab #a((8) (unsigned-byte 8) 0 5 4 0 4 9 1 0)))
  (let ((b (& val #x7)))
   (let ((a (>> (<< val 5) 29)))
    (^ a (aref tab b))))))")
(#(4BC5E38 91ED00E B3B8431 E786994 1132711D 13EA8DF2 19B25748 1B4FDEF8)
 "(:NON-LOCAL-ENTRY :SINGLE-VALUE-RETURN :CALL-SITE :BLOCK-START :NON-LOCAL-EXIT :INTERNAL-ERROR :KNOWN-RETURN :UNKNOWN-RETURN)"
 "(  (& (+ (>> val 0) (>> val 11) (>> val 17)) 7))")
(#(4F34DDE 611D6DF 6F35104 7F35297 B08DE4D F039DEB 140D5AD7 16B428A2 1C33E6FC)
 "(>= <= > < = EQL EQ CHAR-EQUAL CHAR=)"
 "((let ((tab #a((8) (unsigned-byte 8) 8 2 0 0 2 3 5 7)))
  (let ((b (& (>> val 9) #x7)))
   (let ((a (>> (<< val 31) 29)))
    (^ a (aref tab b))))))")
(#(4F34DDE 6F35104 7F35297 8CD29AE B08DE4D F039DEB 16B428A2 16FE7D1C 1B95FF18)
 "(SET SB-C::EQUALITY EQL <= >= = > < TYPEP)"
 "((let ((tab #a((8) (unsigned-byte 8) 0 0 13 0 0 0 5 1)))
  (let ((b (& val #x7)))
   (let ((a (>> (<< val 3) 29)))
    (^ a (aref tab b))))))")
(#(4F34DDE 6F35104 7F35297 B08DE4D F039DEB)
 "(<= < >= > =)"
 "(  (& (+ val (>> val 10)) 7))")
(#(4F34DDE 6F35104 7F35297 B08DE4D F039DEB 16B428A2 1C33E6FC)
 "(>= <= > < EQL EQ =)"
 "(  (& (+ (>> val 8) (>> val 11)) 7))")
(#(4F34DDE 6F35104 7F35297 B08DE4D 16B428A2 1C33E6FC)
 "(> = EQL EQ <= <)"
 "(  (& (- (>> val 6) (>> val 13)) 7))")
(#(4F34DDE 6F35104 7F35297 F039DEB 16B428A2 1C33E6FC)
 "(< = EQL EQ >= >)"
 "(  (& (+ val (>> val 10)) 7))")
(#(4F34DDE 6F35104 B08DE4D F039DEB)
 "(< <= > >=)"
 "(  (& val 3) )")
(#(4F34DDE 7F35297 F039DEB 16B428A2 1C33E6FC)
 "(= EQL EQ >= >)"
 "(  (& (^ val (>> val 15)) 7))")
(#(4F3E4FE 59258CB 7925BF1 A08DCBA B23EB4A C039932 FF1208B 1CF373A6)
 "(SB-C::>> SB-C::<< SB-C::U32- SB-C::U32+ SB-C::^ SB-C::& SB-C::+= SB-C::^=)"
 "(  (& (- (>> val 3) (>> val 22)) 7))")
(#(503BB3B 5E8B47F EFF6827 10C23A77 131FD5F8)
 "(:MANDATORY :LITERAL :MISER :FILL :LINEAR)"
 "(  (& (+ val (>> val 9)) 7))")
(#(507273D 739D471 AA5F8BA AD5FA8A 1109EA7F 150D7553 1CF409E4)
 "(:RESTORE-NSP :DYNAMIC-EXTENT :TAGBODY :BLOCK :UNWIND-PROTECT :CATCH :SPECIAL-BIND)"
 "(  (& (>> val 7) 7))")
(#(507273D 739D471 AA5F8BA 1109EA7F 150D7553 1CF409E4)
 "(:DYNAMIC-EXTENT :TAGBODY :BLOCK :UNWIND-PROTECT :CATCH :SPECIAL-BIND)"
 "(  (& (+ (>> val 5) (>> val 23)) 7))")
(#(507273D 739D471 AA5F8BA 150D7553 1CF409E4)
 "(:DYNAMIC-EXTENT :UNWIND-PROTECT :CATCH :TAGBODY :BLOCK)"
 "(  (& (+ val (>> val 6)) 7))")
(#(56E935B 578E28F 95BECAA A1FC394 A31A1DB B2C6780 136C4AC5 14FE847C 1836DEFB 1D714507 1F87FE72 1FE456EC)
 "#(:ASSEMBLY-ROUTINE :CARD-TABLE-INDEX-MASK :SYMBOL-TLS-INDEX :ALIEN-CODE-LINKAGE-INDEX :ALIEN-DATA-LINKAGE-INDEX :FOREIGN :FOREIGN-DATAREF :CODE-OBJECT :LAYOUT :IMMOBILE-SYMBOL :SYMBOL-VALUE :LAYOUT-ID)"
 "((let ((tab #a((8) (unsigned-byte 8) 0 14 8 13 0 0 0 3)))
  (let ((b (& (>> val 1) #x7)))
   (let ((a (>> (<< val 5) 29)))
    (^ a (aref tab b))))))")
(#(5BA4FD3 7168950 F5ABDAB 128A2060 12FE1EC2)
 "(:QWORD :DWORD :WORD :HALFWORD :BYTE)"
 "(  (& (>> val 12) 7))")
(#(5E06B8A 6E06D1D 7E06EB0 8E07043 9E071D6 AE07369 BE074FC CE0768F)
 "#(:CR0 :CR1 :CR2 :CR3 :CR4 :CR5 :CR6 :CR7)"
 "(  (& val 7))")
(#(5E8B47F EFF6827 10C23A77 131FD5F8)
 "(:MANDATORY :MISER :FILL :LINEAR)"
 "(  (& (>> val 14) 3) )")
(#(60D0EEC B5B4BC6 B8666B5 BFEA11D DF0AB1F 102153B3)
 "(:MORE :CLEANUP :TOPLEVEL :EXTERNAL :OPTIONAL NIL)"
 "(  (& (^ val (>> val 20)) 7))")
(#(611D6DF 140D5AD7 14D53330 16B428A2 1C33E6FC)
 "(EQ EQL EQUAL CHAR= CHAR-EQUAL)"
 "(  (& (- val (>> val 10)) 7))")
(#(611D6DF 140D5AD7 16B428A2 1C33E6FC)
 "(EQL EQ CHAR= CHAR-EQUAL)"
 "(  (& (>> val 11) 3) )")
(#(611D6DF 14D53330 16B428A2 1C33E6FC)
 "(EQ EQL EQUAL CHAR=)"
 "(  (& (>> val 1) 3) )")
(#(6B4780F B445B28 102153B3 10F360C2)
 "(NIL BASE-CHAR CHARACTER *)"
 "(  (& (>> val 7) 3) )")
(#(6F35104 7F35297 B08DE4D 16B428A2 1C33E6FC)
 "(= EQL EQ <= <)"
 "(  (& (+ val (>> val 14)) 7))")
(#(7168950 C841474 128A2060 12FE1EC2 1A0CB91B)
 "(:JUMP-TABLE :DOUBLE-FLOAT :DWORD :WORD :BYTE)"
 "(  (& (^ val (>> val 28)) 7))")
(#(727FC83 188D2B64 18B597DD 1BA66A22 1D0C745F)
 "(:BACK :UP :RELATIVE :WILD-INFERIORS :ABSOLUTE)"
 "(  (& (^ (>> val 3) (>> val 7)) 7))")
(#(73B3AD9 8DDA865 B465CCD CC89B6A D185500 DC97723 106958FC 136F5171 13FC44DD 15F44723 1737F6F1 17DFA05E 1A4BD0D1 1A52FE49
   1B4C4A1F 1B50A359 1DF8659C 1F0CC3B3)
 "(:RESET-UNICODE-P :INTERACTIVE-P :CLOSE :CLEAR-OUTPUT :CLEAR-INPUT :FILE-STRING-LENGTH :FILE-LENGTH :LINE-LENGTH :EXTERNAL-FORMAT :ELEMENT-MODE :ELEMENT-TYPE :SET-FILE-POSITION :GET-FILE-POSITION :CHARPOS :FINISH-OUTPUT :FORCE-OUTPUT :UNREAD :LISTEN)"
 "((let ((tab #a((16) (unsigned-byte 8) 15 0 0 0 0 12 0 0 0 15 22 0 15 14 13 27)))
  (let ((b (& val #xf)))
   (let ((a (>> (<< val 7) 28)))
    (^ a (aref tab b))))))")
(#(7514124 9EACDAD 102153B3 15870C8A)
 "(:UNC :WILD :UNSPECIFIC NIL)"
 "(  (& val 3) )")
(#(75FEA5B BCB074C F042E0D 1081D8FA 1D6F2783)
 "(DEFMETHOD DESTRUCTURING-BIND :MACRO :VALUES-TYPE :FUNCTION-TYPE)"
 "(  (& (^ (>> val 7) (>> val 15)) 7))")
(#(790D6FC BFEA11D 102153B3 11DAB32E 173C9675)
 "(:DELETED :INITIAL :COMPLEX-TOPLEVEL :TOPLEVEL NIL)"
 "(  (& (^ (>> val 1) (>> val 11)) 7))")
(#(7AE26A0 CAE2E7F 18DD7CF2 1B2EB4EB 1D10BF43)
 "(:SLOT-SET :STRUCT-SET :SVSET :RPLACD :RPLACA)"
 "(  (& (- (>> val 18) (>> val 27)) 7))")
(#(7D5BCEA AC11619 D8563BC E3391D6 120B0948 1256235A)
 "(SB-VM::IMMEDIATE-CONSTANT CONSTANT SB-C:NON-DESCRIPTOR-STACK SB-VM::CONTROL-STACK SB-VM::FLOAT-REGISTERS SB-VM::REGISTERS)"
 "(  (& (- (>> val 4) (>> val 20)) 7))")
(#(7F1D96D EF3F4BC 102153B3 10F360C2 15AAA551 1714A2A1)
 "(NIL EXTENDED-SEQUENCE FUNCALLABLE-INSTANCE INSTANCE * T)"
 "(  (& (>> val 8) 7))")
(#(7F35297 C9FE1B2 14D53330 16B428A2)
 "(= EQL EQUAL EQUALP)"
 "(  (& (>> val 8) 3) )")
(#(8673AFB 12319BAE 1E17034E 1E5DB7A4)
 "(:PROBE :IO :OUTPUT :INPUT)"
 "(  (& (>> val 21) 3) )")
(#(8892768 F881CEA 19B79FF6 1B5C8A6A 1CFF71F8 1E21A5F9)
 "(LOGICAL-PATHNAME PATHNAME WEAK-POINTER SYSTEM-AREA-POINTER FUNCTION COMPLEX)"
 "(  (& (- (>> val 8) (>> val 15)) 7))")
(#(88BF057 BD01872 C444648 D4575D9 102153B3 120FC1D0 17EE124C)
 "(:VERSION :TYPE :NAME :DIRECTORY :DEVICE :HOST NIL)"
 "(  (& (- (>> val 5) (>> val 24)) 7))")
(#(88BF057 BD01872 C444648 D4575D9 120FC1D0 17EE124C)
 "(:VERSION :TYPE :NAME :DIRECTORY :DEVICE :HOST)"
 "(  (& (^ val (>> val 26)) 7))")
(#(91ED00E A697378 10FA655D 12B87111 1750C880 1AB41F21)
 "(SB-C:RETURN-SINGLE RETURN SB-C:KNOWN-RETURN SB-C:TAIL-CALL SB-C:TAIL-CALL-NAMED SB-C:STATIC-TAIL-CALL-NAMED)"
 "(  (& (- (>> val 2) (>> val 13)) 7))")
(#(92447CE DB121C2 102153B3 105D4415 13D924E0 1EE57DB1)
 "(NIL :LOAD-FP :SAVE-FP :FROB-NFP :COMP-LRA :LOAD-NARGS)"
 "(  (& (^ (>> val 4) (>> val 21)) 7))")
(#(99FDFD4 9FE1D98 EF3F4BC 102153B3)
 "(:COMPUTE-ONLY :FORCE-TO-STACK NIL T)"
 "(  (& (>> val 2) 3) )")
(#(9EACDAD AFFE954 102153B3 15870C8A)
 "(:UNSPECIFIC :WILD :NEWEST NIL)"
 "(  (& val 3) )")
(#(9FD7E4C C414B8A CCE35B7 F31BE0A 13FB65F5 1A0D8C5F 1E0A9C1B)
 "(:UNUSED-IF :SCS :TO :FROM :OFFSET :SC :TARGET)"
 "(  (& (+ (>> val 4) (>> val 8)) 7))")
(#(A165721 B5B4BC6 B5C01D1 15FBA0DF 17F08D68 1AB9061B)
 "(:MORE-COUNT :MORE-CONTEXT :REST :KEYWORD :OPTIONAL :REQUIRED)"
 "(  (& (^ val (>> val 12)) 7))")
(#(A38D658 1658D79A 1BB71F76)
 "((:24-BIT . 0) (:53-BIT . 2) (:64-BIT . 3))"
 "(  (^ (& (>> val 1) 3) 1) )")
(#(A6D3871 C62CDF1 FBB375F 102153B3 17DA1CEC 1E1E0B08)
 "(NIL :RESULT-TYPES :CONDITIONAL :ARG-TYPES :ARG-CHECK :GUARD)"
 "(  (& (^ (>> val 3) (>> val 12)) 7))")
(#(A8CA715 C2284AB 139B1FAB 18A9616D 1E0A9C1B)
 "(:BY :BELOW :ABOVE :DOWNTO :TO)"
 "(  (& (+ (>> val 3) (>> val 19)) 7))")
(#(A9C7C49 D7290B0 15AD1E77 181EB11B 1C077216)
 "(:SAVE :RESULT :EVAL :ARGUMENT :LOAD)"
 "(  (& (+ (>> val 1) (>> val 12)) 7))")
(#(A9C7C49 DBAFDA3 10B865CB 17878591 181EB11B)
 "(:MORE-RESULT :MORE-ARGUMENT :TEMPORARY :RESULT :ARGUMENT)"
 "(  (& (^ (>> val 3) (>> val 28)) 7))")
(#(B0CDFDC 120B4DC0 1D4AE0BB 1F1704E1)
 "(:IN :COPY :OUT :IN-OUT)"
 "(  (& (>> val 4) 3) )")
(#(B327A56 DBC97D6 FAE4B5C 1911B186)
 "((:NEAREST . 0) (:ZERO . 3) (:POSITIVE-INFINITY . 1) (:NEGATIVE-INFINITY . 2))"
 "(  (& (>> val 13) 3) )")
(#(B45269C BC2D01D FA5803C 102153B3)
 "(NIL :HEAD :TAIL :BOTH)"
 "(  (& (>> val 14) 3) )")
(#(B4685DD D00BEAF F042E0D FC649FE 13CAD052 1BBACBF8)
 "(ALIEN-TYPE-TYPE FUN-TYPE NUMERIC-TYPE CLASSOID CONSTANT-TYPE VALUES-TYPE)"
 "(  (& (- (>> val 2) (>> val 25)) 7))")
(#(B57C9E9 102153B3 111B9D42 11DECFF1)
 "(:AUTO :IMMOBILE :DYNAMIC NIL)"
 "(  (& (>> val 9) 3) )")
(#(B5B4BC6 DF0AB1F 173C9675 17F08D68 1ACE528D)
 "(SB-C::MORE REST SB-C::OPTIONAL SB-C::SUPPLIED-P SB-C::DELETED)"
 "(  (& (+ (>> val 6) (>> val 21)) 7))")
(#(B8666B5 102153B3 19F613BF 1C51B03E)
 "(NIL :INHERITED :EXTERNAL :INTERNAL)"
 "(  (& (>> val 13) 3) )")
(#(BCB074C 102153B3 16D95212 19B79FF6)
 "(:SPECIAL-FORM :MACRO :FUNCTION NIL)"
 "(  (& (>> val 5) 3) )")
(#(C9FE1B2 102153B3 14D53330 16B428A2 1C33E6FC)
 "(NIL EQUALP EQUAL EQL EQ)"
 "(  (& (+ val (>> val 14)) 7))")
(#(C9FE1B2 14D53330 16B428A2 1C33E6FC)
 "#(EQ EQL EQUAL EQUALP)"
 "(  (& (>> val 8) 3) )")
(#(CA3F5D8 12ADBA95 17656D61 1F11BB81)
 "(SB-VM::FIXEDOBJ SB-VM::TEXT SB-VM::PERMGEN SB-VM::READ-ONLY)"
 "(  (& (- val (>> val 7)) 3) )")
(#(CE1DD11 E70844A 19B79FF6 1EB2407E)
 "(SB-C::INHIBIT-FLUSHING SB-C::MODIFYING FUNCTION-DESIGNATOR FUNCTION)"
 "(  (& (>> val 2) 3) )")
(#(CF81B20 E999239 13A0775E 1411B855 16B428A2 1DD50DB7)
 "(CLASS SB-PCL::CLASS-EQ SB-PCL::WRAPPER-EQ EQL AND NOT)"
 "(  (& (- (>> val 16) (>> val 17)) 7))")
(#(CF81B20 15F71886 16B428A2 1DD50DB7)
 "(CLASS SB-PCL::PROTOTYPE SB-PCL::CLASS-EQ EQL)"
 "(  (& (+ val (>> val 1)) 3) )")
(#(ED40272 F9C515E 13C450C1 16E6C362 1ADFFA0F)
 "(SB-IMPL::FILL-POINTER-OUTPUT-STREAM SB-IMPL::STRING-OUTPUT-STREAM SB-IMPL::STRING-INPUT-STREAM FD-STREAM ANSI-STREAM)"
 "(  (& (+ (>> val 2) (>> val 14)) 7))")
(#(ED40272 F9C515E 13C450C1 16E6C362 1ADFFA0F 1B5C8A6A 1CFF71F8)
 "(LOGICAL-PATHNAME PATHNAME SB-IMPL::FILL-POINTER-OUTPUT-STREAM SB-IMPL::STRING-OUTPUT-STREAM SB-IMPL::STRING-INPUT-STREAM FD-STREAM ANSI-STREAM)"
 "(  (& (+ (>> val 3) (>> val 4)) 7))")
(#(EF3F4BC 102153B3 14624023 16FE7D1C)
 "(SB-C::INITIAL-UNUSED T SET NIL)"
 "(  (& (>> val 7) 3) )")
(#(102153B3 11478F0B 131CDF30 1506BD28)
 "(NIL NOTINLINE MAYBE-INLINE INLINE)"
 "(  (& (>> val 16) 3) )")
(#(102153B3 13351B33 1AD3464D 1AEC1DD5 1B794797)
 "(:KEY-OR-VALUE :KEY-AND-VALUE :VALUE :KEY NIL)"
 "(  (& (^ (>> val 4) (>> val 25)) 7))")
(#(10944646 12DFA7D4 18E8D162 1E5A73AF 1F8CB4AC 1FE1B094)
 "((:UNDERFLOW . 16) (:OVERFLOW . 8) (:INEXACT . 32) (:INVALID . 1) (:DIVIDE-BY-ZERO . 4) (:DENORMALIZED-OPERAND . 2))"
 "(  (& (^ (>> val 7) (>> val 8)) 7))")
(#(10944646 12DFA7D4 18E8D162 1E5A73AF 1FE1B094)
 "((:UNDERFLOW . 8) (:OVERFLOW . 4) (:INEXACT . 16) (:INVALID . 1) (:DIVIDE-BY-ZERO . 2))"
 "(  (& (- (>> val 1) (>> val 6)) 7))")
(#(109BE3BD 10D2EA4E 1224C557 15A58D85 15B5A2B5 163D9B36 17524A78 1769E419 183E6CEC 18906D08 19577539 1C065CB8 1C26FCE6
   1C8E20BF 1CAE048E 1D66C932)
 "#(((:TYPE SB-C::REF)) ((:TYPE SB-C::CIF)) ((:TYPE SB-C:JUMP-TABLE)) ((:TYPE SB-C::COMBINATION) (:TYPE SB-C::MV-COMBINATION) (:TYPE SB-C::BASIC-COMBINATION)) ((:TYPE BIND)) ((:TYPE EXIT)) ((:TYPE SB-C::ENTRY)) ((:TYPE SB-C::CRETURN)) ((:TYPE SB-C::CSET)) ((:TYPE DELAY) (:TYPE SB-C::ARRAY-INDEX-CAST) (:TYPE CAST)) ((:TYPE SB-C::ENCLOSE)) ((:TYPE SB-C::CDYNAMIC-EXTENT)))"
 "((let ((tab #a((8) (unsigned-byte 8) 0 13 0 12 0 15 8 6)))
  (+= val #x6bc5524)
  (^= val (>> val 16))
  (+= val (<< val 8))
  (^= val (>> val 4))
  (let ((b (& (>> val 11) #x7)))
   (let ((a (>> val 29)))
    (^ a (aref tab b))))))")
(#(109BE3BD 10D2EA4E 1224C557 15A58D85 15B5A2B5 163D9B36 17524A78 1769E419 18906D08 19577539 1C065CB8 1D66C932)
 "#(((:TYPE SB-C::REF) (:TYPE BIND)) ((:TYPE SB-C::CIF)) ((:TYPE SB-C::CSET)) ((:TYPE SB-C::CRETURN)) ((:TYPE EXIT)) ((:TYPE SB-C::COMBINATION) (:TYPE SB-C::MV-COMBINATION) (:TYPE SB-C::BASIC-COMBINATION)) ((:TYPE DELAY) (:TYPE SB-C::ARRAY-INDEX-CAST) (:TYPE CAST)))"
 "((let ((tab #a((8) (unsigned-byte 8) 12 4 12 0 0 8 2 0)))
  (let ((b (& (>> val 6) #x7)))
   (let ((a (>> (<< val 5) 29)))
    (^ a (aref tab b))))))")
(#(109BE3BD 10D2EA4E 1224C557 15A58D85 15B5A2B5 17524A78 1769E419 183E6CEC 18906D08 19577539 1C065CB8 1C26FCE6 1C8E20BF
   1CAE048E 1D66C932)
 "#(((:TYPE SB-C:JUMP-TABLE) (:TYPE SB-C::CDYNAMIC-EXTENT) (:TYPE SB-C::ENCLOSE) (:TYPE EXIT) (:TYPE DELAY) (:TYPE SB-C::ARRAY-INDEX-CAST) (:TYPE CAST) (:TYPE SB-C::MV-COMBINATION) (:TYPE SB-C::ENTRY) (:TYPE SB-C::CIF) (:TYPE SB-C::CRETURN)) ((:TYPE SB-C::COMBINATION)) ((:TYPE SB-C::REF)) ((:TYPE SB-C::CSET)) ((:TYPE BIND)))"
 "((let ((tab #a((8) (unsigned-byte 8) 0 0 8 5 10 8 0 13)))
  (+= val #x6884db6b)
  (^= val (>> val 16))
  (+= val (<< val 8))
  (^= val (>> val 4))
  (let ((b (& (>> val 10) #x7)))
   (let ((a (>> val 29)))
    (^ a (aref tab b))))))")
(#(109BE3BD 10D2EA4E 15A58D85 15B5A2B5 17524A78 1769E419 18906D08)
 "#(((:TYPE BIND)) ((:TYPE SB-C::REF)) ((:TYPE DELAY)) ((:TYPE SB-C::ARRAY-INDEX-CAST) (:TYPE CAST)) ((:TYPE SB-C::CSET)) ((:TYPE SB-C::COMBINATION)))"
 "(  (& (+ (>> val 1) (>> val 11)) 7))")
(#(10A42F45 11651A3C 15CBCE15 1793ACF5 17C9E519 1B009DDD 1FCCE011)
 "#(((:TYPE SB-C::CLAMBDA) (:TYPE SB-C::OPTIONAL-DISPATCH) (:TYPE SB-C::FUNCTIONAL) (:TYPE CONSTANT)) ((:TYPE SB-C::LAMBDA-VAR)) ((:TYPE SB-C::DEFINED-FUN)) ((:TYPE SB-C::GLOBAL-VAR)))"
 "(  (& (- (>> val 6) (>> val 13)) 7))")
(#(10BCF1E4 1256235A 16AE7E65 1DA11FBF)
 "(:COMPONENT :ENVIRONMENT :CONSTANT :UNUSED)"
 "(  (& val 3) )")
(#(10BE7277 12214AE8 12E2CBDA 19739539 1A7396CC 1F3556C7 1F644387)
 "(SB-VM::POSITIVE-FIXNUM FIXNUM INTEGER BIGNUM SB-VM::UNSIGNED-BYTE-31 SB-VM::UNSIGNED-BYTE-32 SB-VM::SIGNED-BYTE-32)"
 "(  (& (^ (>> val 7) (>> val 16)) 7))")
(#(10BE7277 12214AE8 12E2CBDA 19739539 1F3556C7 1F644387)
 "(INTEGER BIGNUM SB-VM::UNSIGNED-BYTE-31 SB-VM::SIGNED-BYTE-32 FIXNUM SB-VM::POSITIVE-FIXNUM)"
 "(  (& (^ val (>> val 22)) 7))")
(#(10D2EA4E 1224C557 15A58D85 15B5A2B5 17524A78 1769E419 18906D08 19577539 1C065CB8 1D66C932)
 "#(((:TYPE SB-C::REF)) ((:TYPE SB-C::COMBINATION)) ((:TYPE SB-C::CIF)) ((:TYPE SB-C::CRETURN)) ((:TYPE SB-C::MV-COMBINATION)) ((:TYPE EXIT)) ((:TYPE SB-C::CSET)) ((:TYPE DELAY) (:TYPE SB-C::ARRAY-INDEX-CAST) (:TYPE CAST)))"
 "((let ((tab #a((8) (unsigned-byte 8) 0 5 2 8 13 3 0 0)))
  (let ((b (& (>> val 5) #x7)))
   (let ((a (>> (<< val 31) 29)))
    (^ a (aref tab b))))))")
(#(10D2EA4E 15A58D85 15B5A2B5 17524A78 1769E419 18906D08 1C065CB8 1D66C932)
 "#(((:TYPE SB-C::REF)) ((:TYPE SB-C::COMBINATION)) ((:TYPE SB-C::MV-COMBINATION)) ((:TYPE EXIT)) ((:TYPE SB-C::CSET)) ((:TYPE DELAY) (:TYPE SB-C::ARRAY-INDEX-CAST) (:TYPE CAST)))"
 "(  (& (+ (>> val 1) (>> val 11)) 7))")
(#(10D2EA4E 15A58D85 17524A78 1769E419 18906D08 1C8E20BF 1CAE048E)
 "#(((:TYPE SB-C::REF)) ((:TYPE DELAY) (:TYPE SB-C::ARRAY-INDEX-CAST) (:TYPE CAST)) ((:TYPE SB-C::COMBINATION)) ((:TYPE SB-C::ENTRY) (:TYPE SB-C::ENCLOSE)))"
 "(  (& (^ (>> val 12) (>> val 22)) 7))")
(#(10E5F3A4 11A06A14 122C92F3 136B4536 13B9A07A 145CF1D8 1726350B 181715FE 185DF065 193198DD 1C3EC592 1CB61112 1EDB1FA6
   1F26DED5 1FF2D364)
 "#(((:TYPE ALIEN-BOOLEAN-TYPE) (:TYPE ALIEN-ENUM-TYPE) (:TYPE ALIEN-INTEGER-TYPE)) ((:TYPE ALIEN-SINGLE-FLOAT-TYPE) (:TYPE ALIEN-DOUBLE-FLOAT-TYPE) (:TYPE ALIEN-FLOAT-TYPE)) ((:TYPE ALIEN-RECORD-TYPE)) ((:TYPE ALIEN-ARRAY-TYPE)) ((:TYPE SB-ALIEN::ALIEN-C-STRING-TYPE)) ((:TYPE ALIEN-POINTER-TYPE)) ((:TYPE ALIEN-FUN-TYPE)) ((:TYPE SB-ALIEN::ALIEN-ALIEN-VALUE-TYPE) (:TYPE SB-ALIEN::ALIEN-MEM-BLOCK-TYPE) (:TYPE SB-ALIEN::ALIEN-SYSTEM-AREA-POINTER-TYPE)) ((:TYPE ALIEN-VALUES-TYPE)))"
 "((let ((tab #a((8) (unsigned-byte 8) 0 13 12 0 8 0 13 2)))
  (+= val #x34e7165e)
  (^= val (>> val 16))
  (+= val (<< val 8))
  (^= val (>> val 4))
  (let ((b (& (>> val 21) #x7)))
   (let ((a (>> val 29)))
    (^ a (aref tab b))))))")
(#(10F360C2 11F36255 15F368A1 17F36BC7)
 "#(+ - * /)"
 "(  (& (>> val 1) 3) )")
(#(115209AA 13D49E10 14891D3D 14FADC0A 1502A9DB 1581B093 169E3C90 180BD2A6 180C07C9 18D9EE98 18DED7BA 18DF2FFE 18EFF350
   1924816D 1927B9CD 19E0BFD8 1A71F300 1AC04DEF 1C93B267 1D06EE71 1D1DDF40 1D58AAD5 1DA983E2 1DB667FB 1E121A85 1ECA94F7)
 "#(((:TYPE NUMERIC-TYPE)) ((:TYPE ARRAY-TYPE)) ((:TYPE UNION-TYPE)) ((:TYPE INTERSECTION-TYPE)) ((:TYPE MEMBER-TYPE)) ((:TYPE NAMED-TYPE)) ((:TYPE CHARACTER-SET-TYPE)) ((:TYPE CONS-TYPE)) ((:TYPE BUILT-IN-CLASSOID)) ((:TYPE FUN-DESIGNATOR-TYPE)) ((:TYPE FUN-TYPE)) ((:TYPE UNDEFINED-CLASSOID) (:TYPE CONDITION-CLASSOID) (:TYPE STRUCTURE-CLASSOID) (:TYPE STANDARD-CLASSOID) (:TYPE STATIC-CLASSOID) (:TYPE CLASSOID)) ((:TYPE CONSTANT-TYPE) (:TYPE VALUES-TYPE) (:TYPE ARGS-TYPE) (:TYPE UNKNOWN-TYPE) (:TYPE NEGATION-TYPE) (:TYPE ALIEN-TYPE-TYPE) (:TYPE HAIRY-TYPE) (:TYPE COMPOUND-TYPE) (:TYPE CTYPE)))"
 "((let ((tab #a((16) (unsigned-byte 8) 1 3 13 17 0 31 0 0 31 1 26 31 31 18 13 21)))
  (let ((b (& (>> val 2) #xf)))
   (let ((a (>> (<< val 7) 28)))
    (^ a (aref tab b))))))")
(#(115209AA 13D49E10 14FADC0A 1581B093 180BD2A6 180C07C9 18DF2FFE 1927B9CD 1A71F300 1AC04DEF 1C93B267)
 "#(((:TYPE UNION-TYPE) (:TYPE INTERSECTION-TYPE) (:TYPE COMPOUND-TYPE)) ((:TYPE NEGATION-TYPE)) ((:TYPE CONS-TYPE)) ((:TYPE ARRAY-TYPE)) ((:TYPE CONSTANT-TYPE)) ((:TYPE VALUES-TYPE) (:TYPE FUN-TYPE) (:TYPE FUN-DESIGNATOR-TYPE) (:TYPE ARGS-TYPE)))"
 "((let ((tab #a((8) (unsigned-byte 8) 12 0 5 9 3 14 7 2)))
  (let ((b (& (>> val 8) #x7)))
   (let ((a (>> (<< val 31) 29)))
    (^ a (aref tab b))))))")
(#(115209AA 13D49E10 14FADC0A 1581B093 180BD2A6 18D9EE98 18DED7BA 18DF2FFE 18EFF350 1927B9CD 19E0BFD8 1A71F300 1AC04DEF
   1C93B267 1D58AAD5 1DB667FB)
 "#(((:TYPE VALUES-TYPE)) ((:TYPE FUN-DESIGNATOR-TYPE) (:TYPE FUN-TYPE)) ((:TYPE NUMERIC-TYPE)) ((:TYPE UNION-TYPE) (:TYPE INTERSECTION-TYPE) (:TYPE COMPOUND-TYPE)) ((:TYPE MEMBER-TYPE)) ((:TYPE ARRAY-TYPE)) ((:TYPE UNKNOWN-TYPE) (:TYPE HAIRY-TYPE)) ((:TYPE NEGATION-TYPE)) ((:TYPE CONSTANT-TYPE)) ((:TYPE CONS-TYPE)) ((:TYPE CHARACTER-SET-TYPE)) ((:TYPE ALIEN-TYPE-TYPE)))"
 "((let ((tab #a((8) (unsigned-byte 8) 12 14 2 13 2 0 7 8)))
  (let ((b (& (>> val 1) #x7)))
   (let ((a (>> (<< val 5) 29)))
    (^ a (aref tab b))))))")
(#(115209AA 14891D3D 14FADC0A 1502A9DB 1581B093 169E3C90 180BD2A6 180C07C9 18D9EE98 18DED7BA 18EFF350 1924816D 1927B9CD
   19E0BFD8 1A71F300 1AC04DEF 1C93B267 1D06EE71 1D1DDF40 1D58AAD5 1ECA94F7)
 "#(((:TYPE UNKNOWN-TYPE) (:TYPE HAIRY-TYPE)) ((:TYPE NEGATION-TYPE)) ((:TYPE UNION-TYPE)) ((:TYPE INTERSECTION-TYPE)) ((:TYPE MEMBER-TYPE)) ((:TYPE VALUES-TYPE) (:TYPE FUN-TYPE) (:TYPE FUN-DESIGNATOR-TYPE) (:TYPE ARGS-TYPE)) ((:TYPE NUMERIC-TYPE)) ((:TYPE UNDEFINED-CLASSOID) (:TYPE BUILT-IN-CLASSOID) (:TYPE CONDITION-CLASSOID) (:TYPE STRUCTURE-CLASSOID) (:TYPE STANDARD-CLASSOID) (:TYPE STATIC-CLASSOID) (:TYPE CLASSOID)) ((:TYPE ARRAY-TYPE)) ((:TYPE CONS-TYPE)) ((:TYPE CHARACTER-SET-TYPE)))"
 "((let ((tab #a((16) (unsigned-byte 8) 13 0 13 14 5 9 0 0 0 16 24 13 8 21 23 8)))
  (let ((b (& (>> val 2) #xf)))
   (let ((a (>> (<< val 7) 28)))
    (^ a (aref tab b))))))")
(#(115209AA 14891D3D 14FADC0A 1502A9DB 1581B093 169E3C90 18D9EE98 18DED7BA 18EFF350 1924816D 19E0BFD8 1AC04DEF 1D06EE71
   1D1DDF40 1D58AAD5 1ECA94F7)
 "#(((:TYPE MEMBER-TYPE)) ((:TYPE UNDEFINED-CLASSOID) (:TYPE BUILT-IN-CLASSOID) (:TYPE CONDITION-CLASSOID) (:TYPE STRUCTURE-CLASSOID) (:TYPE STANDARD-CLASSOID) (:TYPE STATIC-CLASSOID) (:TYPE CLASSOID)) ((:TYPE NUMERIC-TYPE) (:TYPE CHARACTER-SET-TYPE) (:TYPE ARRAY-TYPE) (:TYPE CONS-TYPE)) ((:TYPE INTERSECTION-TYPE)) ((:TYPE UNION-TYPE)) ((:TYPE UNKNOWN-TYPE) (:TYPE HAIRY-TYPE)))"
 "((let ((tab #a((8) (unsigned-byte 8) 12 14 0 4 14 12 14 6)))
  (let ((b (& (>> val 6) #x7)))
   (let ((a (>> (<< val 5) 29)))
    (^ a (aref tab b))))))")
(#(115209AA 14FADC0A 1581B093 180BD2A6 180C07C9 18D9EE98 18DED7BA 18DF2FFE 18EFF350 1927B9CD 19E0BFD8 1A71F300 1AC04DEF
   1C93B267 1D58AAD5)
 "#(((:TYPE UNKNOWN-TYPE) (:TYPE HAIRY-TYPE) (:TYPE CHARACTER-SET-TYPE) (:TYPE MEMBER-TYPE) (:TYPE NUMERIC-TYPE)) ((:TYPE VALUES-TYPE) (:TYPE FUN-TYPE) (:TYPE FUN-DESIGNATOR-TYPE) (:TYPE ARGS-TYPE)) ((:TYPE CONS-TYPE)) ((:TYPE ARRAY-TYPE)) ((:TYPE UNION-TYPE) (:TYPE INTERSECTION-TYPE) (:TYPE COMPOUND-TYPE)) ((:TYPE NEGATION-TYPE)))"
 "((let ((tab #a((8) (unsigned-byte 8) 0 12 11 13 7 0 12 3)))
  (let ((b (& (>> val 4) #x7)))
   (let ((a (>> (<< val 5) 29)))
    (^ a (aref tab b))))))")
(#(12092764 13074178 1C5CBC33 1C8BC21F 1FADAD2E)
 "#(((:TYPE SB-PRETTY::NEWLINE)) ((:TYPE SB-PRETTY::INDENTATION)) ((:TYPE SB-PRETTY::BLOCK-START)) ((:TYPE SB-PRETTY::BLOCK-END)) ((:TYPE SB-PRETTY::TAB)))"
 "(  (& (^ (>> val 3) (>> val 26)) 7))")
(#(12ADBA95 13CE8BFA 173AF383 1ABDB350)
 "(:LIVE :READ-ONLY :WRITE :READ)"
 "(  (& val 3) )")
(#(140C9427 15CAB0CC 1A91B005 1D1675BD)
 "(:UNSAFE-DEFAULT :SAFE-DEFAULT :UNBOUND :TRAP)"
 "(  (& (>> val 17) 3) )")
(#(15864167 16BB0EEC 19E82C53 1C6604C1 1F7BF790)
 "(:FAST-SAFE :FAST :SMALL-SAFE :SMALL :SAFE)"
 "(  (& (- val (>> val 22)) 7))")
(#(15E8B3F3 16E16869 1BF8051A 1C219293 1CE2F046 1DD377BC)
 "(SB-VM::DISPLACED-FROM SB-VM::DISPLACED-P SB-VM::DISPLACEMENT SB-VM::ELEMENTS FILL-POINTER SB-VM::DATA)"
 "(  (& (- (>> val 21) (>> val 25)) 7))")
(#(1CA2F2FA 1DA2F48D 1EA2F620 1FA2F7B3)
 "#(:FCC0 :FCC1 :FCC2 :FCC3)"
 "(  (& val 3) )")
)
;; EOF
