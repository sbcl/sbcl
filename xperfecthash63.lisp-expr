(
(#(0 1 2 F 10 11 15 16)
 "(15 16 21 22 2 17 1 0)"
 "(  (& (+ (>> val 0) (>> val 2) (>> val 3)) 7))")
(#(0 1 2 22 23 24)
 "(35 34 2 36 1 0)"
 "(  (& (+ val (>> val 5)) 7))")
(#(0 1 5 6 7 8 F)
 "(8 7 0 15 1 5 6)"
 "((let ((tab #a((4) (unsigned-byte 8) 0 4 7 0)))
  (let ((b (& val #x3)))
   (let ((a (>> (<< val 28) 30)))
    (^ a (aref tab b))))))")
(#(0 1 7 8 F)
 "(15 8 7 1 0)"
 "((let ((tab #a((4) (unsigned-byte 8) 0 4 0 0)))
  (let ((b (& val #x3)))
   (let ((a (>> (<< val 28) 30)))
    (^ a (aref tab b))))))")
(#(0 3D6EC19 326CF299 3A1DA026 8CD5B89F 92586CF4 A048B3D2 B7DA6CE4 EB29C836 F987A176)
 "(SB-WALKER::CALL LAMBDA SET NIL QUOTE RETURN SB-WALKER::EFFECT SB-WALKER::TEST FUNCTION EVAL)"
 "((let ((tab #a((8) (unsigned-byte 8) 8 5 4 0 2 0 0 13)))
  (let ((b (& val #x7)))
   (let ((a (>> (<< val 5) 29)))
    (^ a (aref tab b))))))")
(#(0 71A5A23 140C6C3A 7A372C76 89072FE6 C7E7B222)
 "(NIL :RESULT-TYPES :CONDITIONAL :ARG-TYPES :ARG-CHECK :GUARD)"
 "(  (& (- val (>> val 2)) 7))")
(#(0 90EDB7B 1FDE90F6 25164A63 50F5AB12 B800E558 C3EABF48)
 "(:VERSION :TYPE :NAME :DIRECTORY :DEVICE :HOST NIL)"
 "(  (& (>> val 12) 7))")
(#(0 B414EE0 3B3832EC A256D8C6 E3479BD2)
 "(:KEY-OR-VALUE :KEY-AND-VALUE :VALUE :KEY NIL)"
 "(  (& (+ (>> val 1) (>> val 26)) 7))")
(#(0 10ACE44E 2CFE05E6 3539E037 372E43BC 652FED0C 7C31AE8F 7C678985 965CD62A A0FAB3A5 B64902BB B6EC8FEB C8A25DB2 CD22F006
   FF5C21D6)
 "(NIL COMPLEX INTEGER MOD SINGLE-FLOAT DOUBLE-FLOAT SIGNED-BYTE UNSIGNED-BYTE FIXNUM BIT EXTENDED-CHAR CHARACTER STANDARD-CHAR BASE-CHAR T)"
 "((let ((tab #a((8) (unsigned-byte 8) 13 2 0 5 12 0 5 14)))
  (let ((b (& (>> val 19) #x7)))
   (let ((a (>> (<< val 5) 29)))
    (^ a (aref tab b))))))")
(#(0 10ACE44E 74748736 971A1DF1)
 "(NIL FLOAT RATIONAL INTEGER)"
 "(  (& (>> val 5) 3) )")
(#(0 12D85B02 47ED28C7 568510D9 EC8EB822)
 "(NIL :FORTHCOMING-DEFCLASS-TYPE :INSTANCE :DEFINED :PRIMITIVE)"
 "(  (& (^ (>> val 1) (>> val 8)) 7))")
(#(0 19627350 3932B57B C3C1E2DD)
 "(NIL NOTINLINE MAYBE-INLINE INLINE)"
 "(  (& (>> val 8) 3) )")
(#(0 3ABB4966 7F853C99 C0014833)
 "(NIL :INHERITED :EXTERNAL :INTERNAL)"
 "(  (& val 3) )")
(#(0 3C28E423 6610551C A1DFDD0E A55DBD6F)
 "(:DELETED :INITIAL :COMPLEX-TOPLEVEL :TOPLEVEL NIL)"
 "(  (& (^ val (>> val 16)) 7))")
(#(0 3C28E423 7F853C99 8059D202 8612A6FE CF79C550)
 "(:MORE :CLEANUP :TOPLEVEL :EXTERNAL :OPTIONAL NIL)"
 "(  (& (^ (>> val 2) (>> val 29)) 7))")
(#(0 3E421619 42F9EC4F 52ECC4FA 53C6AF8C 546D436A D9F0FE17 E77DD8CF)
 "(NIL :SUPERSEDE :APPEND :OVERWRITE :RENAME-AND-DELETE :RENAME :NEW-VERSION :ERROR)"
 "(  (& (- (>> val 2) (>> val 18)) 7))")
(#(0 42F9EC4F 52ECC4FA 53C6AF8C 546D436A D9F0FE17 E77DD8CF)
 "(:APPEND :SUPERSEDE :RENAME-AND-DELETE :RENAME NIL :ERROR :NEW-VERSION)"
 "(  (& (^ (>> val 4) (>> val 13)) 7))")
(#(0 47ED28C7 7980B71D A4323F41 AE780BE9 C8A25DB2)
 "(NIL EXTENDED-SEQUENCE FUNCALLABLE-INSTANCE INSTANCE * T)"
 "(  (& (+ (>> val 1) (>> val 27)) 7))")
(#(0 50EDFBF1 6C16ABD3 AC25889A E8DC3557)
 "(NIL EQUALP EQUAL EQL EQ)"
 "(  (& (^ (>> val 2) (>> val 13)) 7))")
(#(0 519DD3CE 55B0F9E6 70E7C178 92E00046)
 "(:FIXED :KNOWN-RETURN :LOCAL-CALL :FULL-CALL NIL)"
 "(  (& (+ (>> val 1) (>> val 11)) 7))")
(#(0 55E45869 62971997 8F406FFB)
 "(:AUTO :IMMOBILE :DYNAMIC NIL)"
 "(  (& (>> val 3) 3) )")
(#(0 60574E06 7BC3707A 7F9752D2)
 "(:UNSPECIFIC :WILD :NEWEST NIL)"
 "(  (& (>> val 22) 3) )")
(#(0 60574E06 7F9752D2 ED8B5226)
 "(:UNC :WILD :UNSPECIFIC NIL)"
 "(  (& (+ val (>> val 24)) 3) )")
(#(0 64688A38 B690AE2E D1146057 E0A39FB8)
 "(:BYTE :WORD :DWORD :QWORD NIL)"
 "(  (& (^ val (>> val 22)) 7))")
(#(0 70CB34EE A74C4D40 E29480A8 FF414202)
 "(SIMPLE-VECTOR VECTOR CONS LIST NIL)"
 "(  (& (- (>> val 1) (>> val 6)) 7))")
(#(0 7980B71D 7C678985 CD22F006)
 "(NIL BASE-CHAR CHARACTER *)"
 "(  (& (+ val (>> val 6)) 3) )")
(#(0 7A03BEDF 8E8B60F0 9D81B113 D8C1EE02 FBADBE01)
 "(:NAMED :PREDICATE :COPIER :CONSTRUCTOR :CONC-NAME NIL)"
 "(  (& (^ (>> val 1) (>> val 7)) 7))")
(#(0 83A45D5A 90B78E0C C8A25DB2)
 "(:COMPUTE-ONLY :FORCE-TO-STACK NIL T)"
 "(  (& (>> val 3) 3) )")
(#(0 8D87477C C8A25DB2 F987A176)
 "(SB-C::INITIAL-UNUSED T SET NIL)"
 "(  (& (>> val 1) 3) )")
(#(0 905F66AC 92586CF4 9D5025AF)
 "(:SPECIAL-FORM :MACRO :FUNCTION NIL)"
 "(  (& (+ val (>> val 2)) 3) )")
(#(0 C07E71ED E022967D E41ED3F1)
 "(NIL :STRINGS :BOTH :SYMBOLS)"
 "(  (& (>> val 3) 3) )")
(#(0 E022967D FB685091 FF5AE652)
 "(NIL :HEAD :TAIL :BOTH)"
 "(  (& (>> val 14) 3) )")
(#(1 2 8 10 40)
 "(64 16 8 2 1)"
 "(  (& (+ (>> val 0) (>> val 1) (>> val 5)) 7))")
(#(2 3 5 8 C E)
 "(12 3 2 14 5 8)"
 "((let ((tab #a((4) (unsigned-byte 8) 7 0 0 2)))
  (let ((b (& val #x3)))
   (let ((a (>> (<< val 28) 30)))
    (^ a (aref tab b))))))")
(#(2 3 5 C E)
 "(12 3 2 14 5)"
 "((let ((tab #a((4) (unsigned-byte 8) 7 0 0 2)))
  (let ((b (& val #x3)))
   (let ((a (>> (<< val 28) 30)))
    (^ a (aref tab b))))))")
(#(2 3 6 8 C E)
 "(12 3 2 14 6 8)"
 "((let ((tab #a((4) (unsigned-byte 8) 7 0 0 2)))
  (let ((b (& val #x3)))
   (let ((a (>> (<< val 28) 30)))
    (^ a (aref tab b))))))")
(#(2 3 8 9 C E)
 "(12 3 2 14 8 9)"
 "((let ((tab #a((4) (unsigned-byte 8) 7 0 0 1)))
  (let ((b (& val #x3)))
   (let ((a (>> (<< val 28) 30)))
    (^ a (aref tab b))))))")
(#(2 3 8 C E)
 "(12 3 2 14 8)"
 "((let ((tab #a((4) (unsigned-byte 8) 3 0 4 1)))
  (let ((b (& (>> val 1) #x3)))
   (let ((a (>> (<< val 31) 30)))
    (^ a (aref tab b))))))")
(#(2 3D6EC19 326CF299 3A1DA026 8CD5B89F 92586CF4 A048B3D2 B7DA6CE4 EB29C836 F987A176)
 "(SB-WALKER::CALL LAMBDA SET NIL QUOTE RETURN SB-WALKER::EFFECT SB-WALKER::TEST FUNCTION EVAL)"
 "((let ((tab #a((8) (unsigned-byte 8) 8 2 0 0 4 0 5 13)))
  (let ((b (& (>> val 2) #x7)))
   (let ((a (>> (<< val 5) 29)))
    (^ a (aref tab b))))))")
(#(2 90EDB7B 1FDE90F6 25164A63 50F5AB12 B800E558 C3EABF48)
 "(:VERSION :TYPE :NAME :DIRECTORY :DEVICE :HOST NIL)"
 "(  (& (>> val 12) 7))")
(#(2 B414EE0 3B3832EC A256D8C6 E3479BD2)
 "(:KEY-OR-VALUE :KEY-AND-VALUE :VALUE :KEY NIL)"
 "(  (& (- (>> val 5) (>> val 20)) 7))")
(#(2 10ACE44E 2CFE05E6 3539E037 372E43BC 652FED0C 7C31AE8F 7C678985 965CD62A A0FAB3A5 B64902BB B6EC8FEB C8A25DB2 CD22F006
   FF5C21D6)
 "(NIL COMPLEX INTEGER MOD SINGLE-FLOAT DOUBLE-FLOAT SIGNED-BYTE UNSIGNED-BYTE FIXNUM BIT EXTENDED-CHAR CHARACTER STANDARD-CHAR BASE-CHAR T)"
 "((let ((tab #a((8) (unsigned-byte 8) 13 2 0 5 12 0 5 14)))
  (let ((b (& (>> val 19) #x7)))
   (let ((a (>> (<< val 5) 29)))
    (^ a (aref tab b))))))")
(#(2 10ACE44E 74748736 971A1DF1)
 "(NIL FLOAT RATIONAL INTEGER)"
 "(  (& (>> val 5) 3) )")
(#(2 12D85B02 47ED28C7 568510D9 EC8EB822)
 "(NIL :FORTHCOMING-DEFCLASS-TYPE :INSTANCE :DEFINED :PRIMITIVE)"
 "(  (& (^ (>> val 11) (>> val 24)) 7))")
(#(2 19627350 3932B57B C3C1E2DD)
 "(NIL NOTINLINE MAYBE-INLINE INLINE)"
 "(  (& val 3) )")
(#(2 3C28E423 6610551C A1DFDD0E A55DBD6F)
 "(:DELETED :INITIAL :COMPLEX-TOPLEVEL :TOPLEVEL NIL)"
 "(  (& (- (>> val 2) (>> val 25)) 7))")
(#(2 3C28E423 7F853C99 8059D202 8612A6FE CF79C550)
 "(:MORE :CLEANUP :TOPLEVEL :EXTERNAL :OPTIONAL NIL)"
 "(  (& (- val (>> val 14)) 7))")
(#(2 3E421619 42F9EC4F 52ECC4FA 53C6AF8C 546D436A D9F0FE17 E77DD8CF)
 "(NIL :SUPERSEDE :APPEND :OVERWRITE :RENAME-AND-DELETE :RENAME :NEW-VERSION :ERROR)"
 "(  (& (- (>> val 2) (>> val 18)) 7))")
(#(2 42F9EC4F 52ECC4FA 53C6AF8C 546D436A D9F0FE17 E77DD8CF)
 "(:APPEND :SUPERSEDE :RENAME-AND-DELETE :RENAME NIL :ERROR :NEW-VERSION)"
 "(  (& (^ (>> val 4) (>> val 13)) 7))")
(#(2 47ED28C7 7980B71D A4323F41 AE780BE9 C8A25DB2)
 "(NIL EXTENDED-SEQUENCE FUNCALLABLE-INSTANCE INSTANCE * T)"
 "(  (& (+ (>> val 1) (>> val 22)) 7))")
(#(2 50EDFBF1 6C16ABD3 AC25889A E8DC3557)
 "(NIL EQUALP EQUAL EQL EQ)"
 "(  (& (^ (>> val 2) (>> val 13)) 7))")
(#(2 519DD3CE 55B0F9E6 70E7C178 92E00046)
 "(:FIXED :KNOWN-RETURN :LOCAL-CALL :FULL-CALL NIL)"
 "(  (& (+ (>> val 1) (>> val 12)) 7))")
(#(2 55E45869 62971997 8F406FFB)
 "(:AUTO :IMMOBILE :DYNAMIC NIL)"
 "(  (& (>> val 3) 3) )")
(#(2 60574E06 7BC3707A 7F9752D2)
 "(:UNSPECIFIC :WILD :NEWEST NIL)"
 "(  (& (>> val 22) 3) )")
(#(2 60574E06 7F9752D2 ED8B5226)
 "(:UNC :WILD :UNSPECIFIC NIL)"
 "(  (^ (& (>> val 11) 2) (& (>> val 2) 1)) )")
(#(2 70CB34EE A74C4D40 E29480A8 FF414202)
 "(SIMPLE-VECTOR VECTOR CONS LIST NIL)"
 "(  (& (- (>> val 6) (>> val 7)) 7))")
(#(2 7980B71D 7C678985 CD22F006)
 "(NIL BASE-CHAR CHARACTER *)"
 "(  (& (- val (>> val 13)) 3) )")
(#(2 7A03BEDF 8E8B60F0 9D81B113 D8C1EE02 FBADBE01)
 "(:NAMED :PREDICATE :COPIER :CONSTRUCTOR :CONC-NAME NIL)"
 "(  (& (^ (>> val 7) (>> val 11)) 7))")
(#(2 83A45D5A 90B78E0C C8A25DB2)
 "(:COMPUTE-ONLY :FORCE-TO-STACK NIL T)"
 "(  (& (>> val 3) 3) )")
(#(2 8D87477C C8A25DB2 F987A176)
 "(SB-C::INITIAL-UNUSED T SET NIL)"
 "(  (& (+ val (>> val 6)) 3) )")
(#(2 905F66AC 92586CF4 9D5025AF)
 "(:SPECIAL-FORM :MACRO :FUNCTION NIL)"
 "(  (& (- val (>> val 2)) 3) )")
(#(2 C07E71ED E022967D E41ED3F1)
 "(NIL :STRINGS :BOTH :SYMBOLS)"
 "(  (& (>> val 3) 3) )")
(#(2 E022967D FB685091 FF5AE652)
 "(NIL :HEAD :TAIL :BOTH)"
 "(  (& (>> val 14) 3) )")
(#(3 4 5 B 13)
 "(5 4 3 11 19)"
 "((let ((tab #a((4) (unsigned-byte 8) 3 4 0 0)))
  (let ((b (& val #x3)))
   (let ((a (>> (<< val 27) 30)))
    (^ a (aref tab b))))))")
(#(3 4 5 C 14)
 "(5 4 3 12 20)"
 "((let ((tab #a((4) (unsigned-byte 8) 0 3 0 4)))
  (let ((b (& val #x3)))
   (let ((a (>> (<< val 27) 30)))
    (^ a (aref tab b))))))")
(#(3 4 8 12 13 18)
 "(19 18 3 24 8 4)"
 "((let ((tab #a((4) (unsigned-byte 8) 0 2 7 1)))
  (let ((b (>> (<< val 27) 30)))
   (let ((a (& val #x3)))
    (^ a (aref tab b))))))")
(#(3 5 9 12 13 19)
 "(19 18 3 25 9 5)"
 "((let ((tab #a((4) (unsigned-byte 8) 0 3 7 1)))
  (let ((b (>> (<< val 27) 30)))
   (let ((a (& val #x3)))
    (^ a (aref tab b))))))")
(#(3 6 A 12 13)
 "(19 18 3 10 6)"
 "((let ((tab #a((4) (unsigned-byte 8) 0 6 2 0)))
  (let ((b (>> (<< val 27) 30)))
   (let ((a (& val #x3)))
    (^ a (aref tab b))))))")
(#(3 7 B 12 13)
 "(19 18 3 11 7)"
 "((let ((tab #a((4) (unsigned-byte 8) 0 0 2 7)))
  (+= val #x762d9085)
  (^= val (>> val 4))
  (let ((b (& (>> val 1) #x3)))
   (let ((a (>> (u32+ val (<< val 26)) 30)))
    (^ a (aref tab b))))))")
(#(3 12 13 14 15 17)
 "(19 23 20 21 18 3)"
 "((let ((tab #a((4) (unsigned-byte 8) 0 7 3 6)))
  (+= val #x62765a7a)
  (^= val (>> val 4))
  (let ((b (& val #x3)))
   (let ((a (>> (u32+ val (<< val 27)) 30)))
    (^ a (aref tab b))))))")
(#(3 3D6EC19 326CF299 3A1DA026 8CD5B89F 92586CF4 A048B3D2 B7DA6CE4 EB29C836 F987A176)
 "(SB-WALKER::CALL LAMBDA SET NIL QUOTE RETURN SB-WALKER::EFFECT SB-WALKER::TEST FUNCTION EVAL)"
 "((let ((tab #a((8) (unsigned-byte 8) 0 5 8 4 2 0 0 13)))
  (let ((b (& val #x7)))
   (let ((a (>> (<< val 5) 29)))
    (^ a (aref tab b))))))")
(#(3 90EDB7B 1FDE90F6 25164A63 50F5AB12 B800E558 C3EABF48)
 "(:VERSION :TYPE :NAME :DIRECTORY :DEVICE :HOST NIL)"
 "(  (& (>> val 12) 7))")
(#(3 B414EE0 3B3832EC A256D8C6 E3479BD2)
 "(:KEY-OR-VALUE :KEY-AND-VALUE :VALUE :KEY NIL)"
 "(  (& (+ val (>> val 1)) 7))")
(#(3 10ACE44E 2CFE05E6 3539E037 372E43BC 652FED0C 7C31AE8F 7C678985 965CD62A A0FAB3A5 B64902BB B6EC8FEB C8A25DB2 CD22F006
   FF5C21D6)
 "(NIL COMPLEX INTEGER MOD SINGLE-FLOAT DOUBLE-FLOAT SIGNED-BYTE UNSIGNED-BYTE FIXNUM BIT EXTENDED-CHAR CHARACTER STANDARD-CHAR BASE-CHAR T)"
 "((let ((tab #a((8) (unsigned-byte 8) 13 2 0 5 12 0 5 14)))
  (let ((b (& (>> val 19) #x7)))
   (let ((a (>> (<< val 5) 29)))
    (^ a (aref tab b))))))")
(#(3 10ACE44E 74748736 971A1DF1)
 "(NIL FLOAT RATIONAL INTEGER)"
 "(  (& (>> val 5) 3) )")
(#(3 12D85B02 47ED28C7 568510D9 EC8EB822)
 "(NIL :FORTHCOMING-DEFCLASS-TYPE :INSTANCE :DEFINED :PRIMITIVE)"
 "(  (& (^ (>> val 11) (>> val 24)) 7))")
(#(3 19627350 3932B57B C3C1E2DD)
 "(NIL NOTINLINE MAYBE-INLINE INLINE)"
 "(  (& (>> val 8) 3) )")
(#(3 3C28E423 6610551C A1DFDD0E A55DBD6F)
 "(:DELETED :INITIAL :COMPLEX-TOPLEVEL :TOPLEVEL NIL)"
 "(  (& (- (>> val 2) (>> val 25)) 7))")
(#(3 3C28E423 7F853C99 8059D202 8612A6FE CF79C550)
 "(:MORE :CLEANUP :TOPLEVEL :EXTERNAL :OPTIONAL NIL)"
 "(  (& (^ (>> val 2) (>> val 29)) 7))")
(#(3 3E421619 42F9EC4F 52ECC4FA 53C6AF8C 546D436A D9F0FE17 E77DD8CF)
 "(NIL :SUPERSEDE :APPEND :OVERWRITE :RENAME-AND-DELETE :RENAME :NEW-VERSION :ERROR)"
 "(  (& (- (>> val 2) (>> val 18)) 7))")
(#(3 42F9EC4F 52ECC4FA 53C6AF8C 546D436A D9F0FE17 E77DD8CF)
 "(:APPEND :SUPERSEDE :RENAME-AND-DELETE :RENAME NIL :ERROR :NEW-VERSION)"
 "(  (& (^ (>> val 4) (>> val 13)) 7))")
(#(3 47ED28C7 7980B71D A4323F41 AE780BE9 C8A25DB2)
 "(NIL EXTENDED-SEQUENCE FUNCALLABLE-INSTANCE INSTANCE * T)"
 "(  (& (+ (>> val 1) (>> val 22)) 7))")
(#(3 50EDFBF1 6C16ABD3 AC25889A E8DC3557)
 "(NIL EQUALP EQUAL EQL EQ)"
 "(  (& (^ (>> val 2) (>> val 13)) 7))")
(#(3 519DD3CE 55B0F9E6 70E7C178 92E00046)
 "(:FIXED :KNOWN-RETURN :LOCAL-CALL :FULL-CALL NIL)"
 "(  (& (+ (>> val 1) (>> val 12)) 7))")
(#(3 55E45869 62971997 8F406FFB)
 "(:AUTO :IMMOBILE :DYNAMIC NIL)"
 "(  (& (>> val 3) 3) )")
(#(3 60574E06 7BC3707A 7F9752D2)
 "(:UNSPECIFIC :WILD :NEWEST NIL)"
 "(  (& (>> val 22) 3) )")
(#(3 60574E06 7F9752D2 ED8B5226)
 "(:UNC :WILD :UNSPECIFIC NIL)"
 "(  (& (- val (>> val 4)) 3) )")
(#(3 70CB34EE A74C4D40 E29480A8 FF414202)
 "(SIMPLE-VECTOR VECTOR CONS LIST NIL)"
 "(  (& (^ val (>> val 1)) 7))")
(#(3 7980B71D 7C678985 CD22F006)
 "(NIL BASE-CHAR CHARACTER *)"
 "(  (& (- val (>> val 2)) 3) )")
(#(3 7A03BEDF 8E8B60F0 9D81B113 D8C1EE02 FBADBE01)
 "(:NAMED :PREDICATE :COPIER :CONSTRUCTOR :CONC-NAME NIL)"
 "(  (& (^ (>> val 7) (>> val 11)) 7))")
(#(3 83A45D5A 90B78E0C C8A25DB2)
 "(:COMPUTE-ONLY :FORCE-TO-STACK NIL T)"
 "(  (& (>> val 3) 3) )")
(#(3 8D87477C C8A25DB2 F987A176)
 "(SB-C::INITIAL-UNUSED T SET NIL)"
 "(  (& (+ val (>> val 1)) 3) )")
(#(3 905F66AC 92586CF4 9D5025AF)
 "(:SPECIAL-FORM :MACRO :FUNCTION NIL)"
 "(  (& (+ val (>> val 3)) 3) )")
(#(3 C07E71ED E022967D E41ED3F1)
 "(NIL :STRINGS :BOTH :SYMBOLS)"
 "(  (& (>> val 3) 3) )")
(#(3 E022967D FB685091 FF5AE652)
 "(NIL :HEAD :TAIL :BOTH)"
 "(  (& (>> val 14) 3) )")
(#(4 7 8 B 13)
 "(11 19 7 8 4)"
 "((let ((tab #a((4) (unsigned-byte 8) 0 2 7 0)))
  (let ((b (>> (<< val 27) 30)))
   (let ((a (& val #x3)))
    (^ a (aref tab b))))))")
(#(A 3C 3F 5B 7B)
 "(#\\? #\\{ #\\[ #\\< #\\Newline)"
 "((let ((tab #a((4) (unsigned-byte 8) 5 0 0 0)))
  (let ((b (& val #x3)))
   (let ((a (>> (<< val 25) 30)))
    (^ a (aref tab b))))))")
(#(C D E 1C 1D 1E)
 "(28 12 30 29 14 13)"
 "((let ((tab #a((4) (unsigned-byte 8) 4 0 2 4)))
  (+= val #xa738b2f0)
  (^= val (>> val 4))
  (let ((b (& val #x3)))
   (let ((a (>> (u32+ val (<< val 20)) 30)))
    (^ a (aref tab b))))))")
(#(F 10 11 1F 20 21)
 "(31 15 33 32 17 16)"
 "((let ((tab #a((4) (unsigned-byte 8) 0 2 0 4)))
  (let ((b (& val #x3)))
   (let ((a (>> (<< val 26) 30)))
    (^ a (aref tab b))))))")
(#(1C 1D 1E 2A 2B 2C)
 "(30 29 28 44 43 42)"
 "(  (& (- val (>> val 4)) 7))")
(#(1F 20 21 2E 2F 30)
 "(33 32 31 48 47 46)"
 "((let ((tab #a((4) (unsigned-byte 8) 7 2 1 0)))
  (let ((b (& val #x3)))
   (let ((a (>> (<< val 26) 30)))
    (^ a (aref tab b))))))")
(#(23 27 2B 2C 2D 3A 40 56 76)
 "(#\\@ #\\: #\\, #\\' #\\# #\\V #\\v #\\- #\\+)"
 "((let ((tab #a((8) (unsigned-byte 8) 0 2 0 0 4 0 10 0)))
  (+= val #x1679e37f)
  (^= val (>> val 4))
  (let ((b (& val #x7)))
   (let ((a (>> (u32+ val (<< val 25)) 29)))
    (^ a (aref tab b))))))")
(#(44 45 46 4C 52 53)
 "(#\\R #\\L #\\D #\\F #\\S #\\E)"
 "((let ((tab #a((4) (unsigned-byte 8) 4 3 0 3)))
  (let ((b (& val #x3)))
   (let ((a (>> (<< val 27) 30)))
    (^ a (aref tab b))))))")
(#(64 65 66 67 F0 F2 F3)
 "(243 242 240 103 102 101 100)"
 "(  (& (^ val (>> val 3)) 7))")
(#(89 8D 91 95 99 9D A1 A5 A9 AD B1 B5 B9 BD C1 C5 C9 CD D1 D5 D9 DD E1 E5)
 "(137 221 217 205 201 197 193 189 185 181 177 173 169 165 161 157 153 149 145 141 213 209 229 225)"
 "((let ((tab #a((16) (unsigned-byte 8) 31 24 0 13 0 13 0 13 1 12 16 22 16 18 21 22)))
  (let ((b (& (>> val 2) #xf)))
   (let ((a (>> (<< val 25) 28)))
    (^ a (aref tab b))))))")
(#(89 B1 B5 B9 C9 CD D5 D9)
 "(217 205 201 185 181 177 213 137)"
 "((let ((tab #a((4) (unsigned-byte 8) 7 0 3 7)))
  (+= val #x14650a3e)
  (^= val (>> val 4))
  (let ((b (& (>> val 1) #x3)))
   (let ((a (>> (u32+ val (<< val 26)) 30)))
    (^ a (aref tab b))))))")
(#(89 B9 CD D1 D5 D9 DD)
 "(221 217 213 209 205 185 137)"
 "((let ((tab #a((4) (unsigned-byte 8) 0 2 7 5)))
  (+= val #x612d0929)
  (^= val (>> val 4))
  (let ((b (& (>> val 2) #x3)))
   (let ((a (>> (u32+ val (<< val 24)) 30)))
    (^ a (aref tab b))))))")
(#(8D 91 95 9D A5 AD B9 BD C1 C5 CD E1 E5)
 "(205 197 193 189 185 173 165 157 149 145 229 225 141)"
 "((let ((tab #a((8) (unsigned-byte 8) 13 0 0 8 4 1 4 0)))
  (let ((b (& (>> val 2) #x7)))
   (let ((a (>> (<< val 25) 29)))
    (^ a (aref tab b))))))")
(#(1000 2000 4000 6000 8000 A000 C000)
 "(4096 40960 49152 32768 24576 16384 8192)"
 "(  (& (>> val 13) 7))")
(#(D807 DA10 DA20 DA21 DCE8 DE82 DE83)
 "(55303 56963 56962 56552 55841 55840 55824)"
 "((let ((tab #a((4) (unsigned-byte 8) 6 0 2 7)))
  (+= val #xcf72a6f6)
  (+= val (<< val 8))
  (^= val (>> val 4))
  (let ((b (& (>> val 8) #x3)))
   (let ((a (>> (u32+ val (<< val 13)) 30)))
    (^ a (aref tab b))))))")
(#(9EB05 25164A63 3AE4BD71 3F3C2E20 443A80D1 5A7DFA1B 65A6E24A 6759FEBE 67989E4B 7C685E1B 7D3B699F 7E4DD5CC B57BDDD2 BC01B3D3
   EAB41BD3 F97ABC4E)
 "(:ALLOW-OTHER-KEYS :SINGLETON-P :ENUMERABLE-P :MIGHT-CONTAIN-OTHER-TYPES-P :UNPARSE :NEGATE :COMPLEX-= :SIMPLE-= :COMPLEX-INTERSECTION2 :SIMPLE-INTERSECTION2 :COMPLEX-UNION2 :SIMPLE-UNION2 :COMPLEX-SUBTYPEP-ARG2 :COMPLEX-SUBTYPEP-ARG1 :SIMPLE-SUBTYPEP :NAME)"
 "((let ((tab #a((8) (unsigned-byte 8) 12 13 0 0 0 8 4 6)))
  (let ((b (& (>> val 15) #x7)))
   (let ((a (>> (<< val 5) 29)))
    (^ a (aref tab b))))))")
(#(D1437A 14323D3 53E1077 6A5DE4D 116F91DF 1FA0936E 345094E2 3E3AD04F 68FE090F 6ADC1826 7BA82FCD 7E4DD5CC 8FDB5971 96C89048
   A3545607 C26DF4DD D1532B90 D22C5456 D52A23C5)
 "(:ALLOW-OTHER-KEYS :COVERAGE-MAP :N-JUMP-TABLE-ENTRIES :SPILLED-TNS :SPILLED-VOPS :ALIAS-TNS :ENTRIES :CONSTANTS :STACK-MESS-UPS :STACK-ALLOCATES-P :VALUES-RECEIVERS :SPECIFIED-SAVE-TNS :NFP :COMPONENT-TNS :CONSTANT-TNS :WIRED-TNS :RESTRICTED-TNS :NORMAL-TNS :GLOBAL-TN-COUNTER)"
 "((let ((tab #a((16) (unsigned-byte 8) 0 0 13 16 0 7 15 15 13 0 11 0 21 0 16 0)))
  (let ((b (& val #xf)))
   (let ((a (>> val 28)))
    (^ a (aref tab b))))))")
(#(D1437A 14323D3 53E1077 6A5DE4D 116F91DF 1FA0936E 3E3AD04F 68FE090F 6ADC1826 7BA82FCD 7E4DD5CC 8FDB5971 96C89048 A3545607
   C26DF4DD D1532B90 D22C5456 D52A23C5)
 "(:ALLOW-OTHER-KEYS :COVERAGE-MAP :N-JUMP-TABLE-ENTRIES :SPILLED-TNS :SPILLED-VOPS :ALIAS-TNS :ENTRIES :CONSTANTS :STACK-MESS-UPS :STACK-ALLOCATES-P :VALUES-RECEIVERS :SPECIFIED-SAVE-TNS :COMPONENT-TNS :CONSTANT-TNS :WIRED-TNS :RESTRICTED-TNS :NORMAL-TNS :GLOBAL-TN-COUNTER)"
 "((let ((tab #a((16) (unsigned-byte 8) 0 0 0 16 0 7 15 15 13 0 14 0 12 0 16 0)))
  (let ((b (& val #xf)))
   (let ((a (>> val 28)))
    (^ a (aref tab b))))))")
(#(DE95B1 2681DDA1 2A70C0ED 32B8DB71 4D28DE4D 4D74A788 6F779AF3 7773A213 7CBB0DFC C76F980E CD735EFC E8068BC4)
 "(AREF SB-C::^= SB-C::^ SB-C::>>= SB-C::>> SB-C::<< SB-C::U32- - SB-C::+= SB-C::U32+ + SB-C::&)"
 "((let ((tab #a((8) (unsigned-byte 8) 12 13 14 0 3 0 3 0)))
  (let ((b (& (>> val 4) #x7)))
   (let ((a (>> (<< val 5) 29)))
    (^ a (aref tab b))))))")
(#(DE95B1 2681DDA1 2A70C0ED 4D74A788 7773A213 7CBB0DFC C76F980E CD735EFC)
 "(SB-C::>> SB-C::<< SB-C::U32- SB-C::U32+ SB-C::^ SB-C::& SB-C::+= SB-C::^=)"
 "(  (& (+ (>> val 0) (>> val 1) (>> val 29)) 7))")
(#(DE95B1 2681DDA1 2A70C0ED 4D74A788 C76F980E E8068BC4)
 "#(SB-C::<< SB-C::U32+ SB-C::U32- SB-C::+= SB-C::>> SB-C::>>=)"
 "(  (& (- (>> val 6) (>> val 13)) 7))")
(#(1B41D7F E5AE22E 32C229AB 58436D89 5AAEBDB1 5EB9987A A16520EC A6F460C5 BA77CFAC DD942C4E E648CF0A EAD102A2)
 "(:ARG-PASS :SPECIFIED-SAVE :UNUSED :ALIAS :COMPONENT :CONSTANT :LOAD :SAVE-ONCE :SAVE :DEBUG-ENVIRONMENT :ENVIRONMENT :NORMAL)"
 "((let ((tab #a((8) (unsigned-byte 8) 8 0 0 0 13 10 5 2)))
  (let ((b (& (>> val 13) #x7)))
   (let ((a (>> (<< val 5) 29)))
    (^ a (aref tab b))))))")
(#(1B41D7F E5AE22E 32C229AB 58436D89 5AAEBDB1 5EB9987A A16520EC A6F460C5 DD942C4E E648CF0A EAD102A2)
 "(:ARG-PASS :UNUSED :ALIAS :COMPONENT :CONSTANT :LOAD :SAVE-ONCE :SAVE :DEBUG-ENVIRONMENT :ENVIRONMENT :NORMAL)"
 "((let ((tab #a((8) (unsigned-byte 8) 8 14 0 2 11 0 3 0)))
  (let ((b (& (>> val 2) #x7)))
   (let ((a (>> (<< val 5) 29)))
    (^ a (aref tab b))))))")
(#(1B41D7F 58436D89 75F09E0B 9DFE1B14 A048B3D2)
 "(:SAVE :RESULT :EVAL :ARGUMENT :LOAD)"
 "(  (& (+ (>> val 2) (>> val 6)) 7))")
(#(1F11E2F 321E4B7B 7A4EAC07 960CBBDF D1979E3F)
 "(SB-VM::DATA-VECTOR-REF-WITH-OFFSET/SIMPLE-VECTOR-C SLOT %RAW-INSTANCE-REF/SIGNED-WORD %RAW-INSTANCE-REF/WORD SB-VM::INSTANCE-INDEX-REF-C)"
 "(  (& (- (>> val 2) (>> val 9)) 7))")
(#(1F774E7 50B8430 1CDB5808 5FB17392 7E4DD5CC DFC58C8E FBD0AE9C FFE04C9B)
 "(:ALLOW-OTHER-KEYS :PRINT-WEEKDAY :PRINT-TIMEZONE :PRINT-MERIDIAN :PRINT-SECONDS :DATE-FIRST :STYLE :TIMEZONE)"
 "(  (& (^ (>> val 14) (>> val 25)) 7))")
(#(1FD7365 10A05548 65D8B1BB 7E4DD5CC A30466D2 B1619E90)
 "(:ALLOW-OTHER-KEYS :ALIGNMENT :N-WORDS :RAW-TYPE :COMPARATOR :ACCESSOR-FUN)"
 "(  (& (- (>> val 1) (>> val 19)) 7))")
(#(2A9B425 B9C768B 136B97E3 1DF6628B 350770A3 590BA280 5F5FC85C 65A7B3D6 6FED881E 7685F9E6 76DE51BF 92FBC223 9765C8E7 9A16AFFB
   9ED11C51 A6E24C79 B35D548C C290A84A C76C711E DB2BD6D1 E0307D49 E26011AD E94E5DF8 EAB7029E F84A6B24 FA751134 FBD5DA6A
   FCA25B62)
 "#(((:TYPE NUMERIC-TYPE)) ((:TYPE ARRAY-TYPE)) ((:TYPE UNION-TYPE)) ((:TYPE INTERSECTION-TYPE)) ((:TYPE MEMBER-TYPE)) ((:TYPE NAMED-TYPE)) ((:TYPE CHARACTER-SET-TYPE)) ((:TYPE SIMD-PACK-TYPE)) ((:TYPE SIMD-PACK-256-TYPE)) ((:TYPE CONS-TYPE)) ((:TYPE BUILT-IN-CLASSOID)) ((:TYPE FUN-DESIGNATOR-TYPE)) ((:TYPE FUN-TYPE)) ((:TYPE UNDEFINED-CLASSOID) (:TYPE CONDITION-CLASSOID) (:TYPE STRUCTURE-CLASSOID) (:TYPE STANDARD-CLASSOID) (:TYPE STATIC-CLASSOID) (:TYPE CLASSOID)) ((:TYPE CONSTANT-TYPE) (:TYPE VALUES-TYPE) (:TYPE ARGS-TYPE) (:TYPE UNKNOWN-TYPE) (:TYPE NEGATION-TYPE) (:TYPE ALIEN-TYPE-TYPE) (:TYPE HAIRY-TYPE) (:TYPE COMPOUND-TYPE) (:TYPE CTYPE)))"
 "((let ((tab #a((16) (unsigned-byte 8) 31 0 16 13 0 0 18 0 11 0 0 13 17 10 25 31)))
  (let ((b (& (>> val 1) #xf)))
   (let ((a (>> (<< val 7) 28)))
    (^ a (aref tab b))))))")
(#(2A9B425 B9C768B 136B97E3 1DF6628B 590BA280 5F5FC85C 65A7B3D6 6FED881E 76DE51BF 9765C8E7 9A16AFFB A6E24C79 B35D548C C290A84A
   C76C711E E0307D49 E26011AD E94E5DF8 EAB7029E F84A6B24 FA751134 FBD5DA6A FCA25B62)
 "#(((:TYPE UNKNOWN-TYPE) (:TYPE HAIRY-TYPE)) ((:TYPE NEGATION-TYPE)) ((:TYPE UNION-TYPE)) ((:TYPE INTERSECTION-TYPE)) ((:TYPE MEMBER-TYPE)) ((:TYPE VALUES-TYPE) (:TYPE FUN-TYPE) (:TYPE FUN-DESIGNATOR-TYPE) (:TYPE ARGS-TYPE)) ((:TYPE NUMERIC-TYPE)) ((:TYPE UNDEFINED-CLASSOID) (:TYPE BUILT-IN-CLASSOID) (:TYPE CONDITION-CLASSOID) (:TYPE STRUCTURE-CLASSOID) (:TYPE STANDARD-CLASSOID) (:TYPE STATIC-CLASSOID) (:TYPE CLASSOID)) ((:TYPE ARRAY-TYPE)) ((:TYPE CONS-TYPE)) ((:TYPE CHARACTER-SET-TYPE)) ((:TYPE SIMD-PACK-TYPE)) ((:TYPE SIMD-PACK-256-TYPE)))"
 "((let ((tab #a((16) (unsigned-byte 8) 13 12 16 31 0 0 0 0 0 0 21 30 7 16 27 13)))
  (let ((b (& (>> val 1) #xf)))
   (let ((a (>> (<< val 7) 28)))
    (^ a (aref tab b))))))")
(#(2A9B425 B9C768B 136B97E3 1DF6628B 590BA280 6FED881E 9765C8E7 9A16AFFB 9ED11C51 A6E24C79 B35D548C C290A84A E0307D49 E26011AD
   E94E5DF8 EAB7029E F84A6B24)
 "#(((:TYPE UNKNOWN-TYPE) (:TYPE HAIRY-TYPE) (:TYPE SIMD-PACK-256-TYPE) (:TYPE SIMD-PACK-TYPE) (:TYPE CHARACTER-SET-TYPE) (:TYPE MEMBER-TYPE) (:TYPE NUMERIC-TYPE)) ((:TYPE VALUES-TYPE) (:TYPE FUN-TYPE) (:TYPE FUN-DESIGNATOR-TYPE) (:TYPE ARGS-TYPE)) ((:TYPE CONS-TYPE)) ((:TYPE ARRAY-TYPE)) ((:TYPE UNION-TYPE) (:TYPE INTERSECTION-TYPE) (:TYPE COMPOUND-TYPE)) ((:TYPE NEGATION-TYPE)))"
 "((let ((tab #a((16) (unsigned-byte 8) 0 13 0 13 0 13 0 1 12 0 11 0 13 30 13 0)))
  (let ((b (& val #xf)))
   (let ((a (>> val 28)))
    (^ a (aref tab b))))))")
(#(2A9B425 B9C768B 136B97E3 590BA280 6FED881E 7685F9E6 9765C8E7 9A16AFFB 9ED11C51 A6E24C79 B35D548C C290A84A DB2BD6D1 E0307D49
   E26011AD E94E5DF8 EAB7029E F84A6B24)
 "#(((:TYPE VALUES-TYPE)) ((:TYPE FUN-DESIGNATOR-TYPE) (:TYPE FUN-TYPE)) ((:TYPE NUMERIC-TYPE)) ((:TYPE UNION-TYPE) (:TYPE INTERSECTION-TYPE) (:TYPE COMPOUND-TYPE)) ((:TYPE MEMBER-TYPE)) ((:TYPE ARRAY-TYPE)) ((:TYPE UNKNOWN-TYPE) (:TYPE HAIRY-TYPE)) ((:TYPE NEGATION-TYPE)) ((:TYPE CONSTANT-TYPE)) ((:TYPE CONS-TYPE)) ((:TYPE CHARACTER-SET-TYPE)) ((:TYPE SIMD-PACK-TYPE)) ((:TYPE SIMD-PACK-256-TYPE)) ((:TYPE ALIEN-TYPE-TYPE)))"
 "((let ((tab #a((16) (unsigned-byte 8) 0 0 0 13 0 0 0 13 31 0 14 1 13 30 13 0)))
  (let ((b (& val #xf)))
   (let ((a (>> val 28)))
    (^ a (aref tab b))))))")
(#(2A9B425 B9C768B 1DF6628B 350770A3 590BA280 5F5FC85C 65A7B3D6 6FED881E 7685F9E6 76DE51BF 92FBC223 9765C8E7 9A16AFFB 9ED11C51
   A6E24C79 B35D548C C76C711E DB2BD6D1 E0307D49 E26011AD E94E5DF8 EAB7029E F84A6B24 FA751134 FBD5DA6A FCA25B62)
 "#(((:TYPE NUMERIC-TYPE)) ((:TYPE ARRAY-TYPE)) ((:TYPE UNION-TYPE)) ((:TYPE INTERSECTION-TYPE)) ((:TYPE MEMBER-TYPE)) ((:TYPE NAMED-TYPE)) ((:TYPE CHARACTER-SET-TYPE)) ((:TYPE CONS-TYPE)) ((:TYPE BUILT-IN-CLASSOID)) ((:TYPE FUN-DESIGNATOR-TYPE)) ((:TYPE FUN-TYPE)) ((:TYPE UNDEFINED-CLASSOID) (:TYPE CONDITION-CLASSOID) (:TYPE STRUCTURE-CLASSOID) (:TYPE STANDARD-CLASSOID) (:TYPE STATIC-CLASSOID) (:TYPE CLASSOID)) ((:TYPE CONSTANT-TYPE) (:TYPE VALUES-TYPE) (:TYPE ARGS-TYPE) (:TYPE UNKNOWN-TYPE) (:TYPE NEGATION-TYPE) (:TYPE ALIEN-TYPE-TYPE) (:TYPE HAIRY-TYPE) (:TYPE COMPOUND-TYPE) (:TYPE CTYPE)))"
 "((let ((tab #a((16) (unsigned-byte 8) 1 15 21 18 13 29 7 0 7 0 0 13 31 20 8 0)))
  (let ((b (& (>> val 1) #xf)))
   (let ((a (>> (<< val 7) 28)))
    (^ a (aref tab b))))))")
(#(2A9B425 B9C768B 1DF6628B 590BA280 5F5FC85C 65A7B3D6 6FED881E 76DE51BF 9765C8E7 9A16AFFB A6E24C79 B35D548C C76C711E E0307D49
   E26011AD E94E5DF8 EAB7029E F84A6B24 FA751134 FBD5DA6A FCA25B62)
 "#(((:TYPE UNKNOWN-TYPE) (:TYPE HAIRY-TYPE)) ((:TYPE NEGATION-TYPE)) ((:TYPE UNION-TYPE)) ((:TYPE INTERSECTION-TYPE)) ((:TYPE MEMBER-TYPE)) ((:TYPE VALUES-TYPE) (:TYPE FUN-TYPE) (:TYPE FUN-DESIGNATOR-TYPE) (:TYPE ARGS-TYPE)) ((:TYPE NUMERIC-TYPE)) ((:TYPE UNDEFINED-CLASSOID) (:TYPE BUILT-IN-CLASSOID) (:TYPE CONDITION-CLASSOID) (:TYPE STRUCTURE-CLASSOID) (:TYPE STANDARD-CLASSOID) (:TYPE STATIC-CLASSOID) (:TYPE CLASSOID)) ((:TYPE ARRAY-TYPE)) ((:TYPE CONS-TYPE)) ((:TYPE CHARACTER-SET-TYPE)))"
 "((let ((tab #a((16) (unsigned-byte 8) 0 21 15 7 1 13 13 0 0 0 16 31 3 17 30 0)))
  (let ((b (& (>> val 1) #xf)))
   (let ((a (>> (<< val 7) 28)))
    (^ a (aref tab b))))))")
(#(2A9B425 B9C768B 1DF6628B 590BA280 6FED881E 9765C8E7 9A16AFFB 9ED11C51 A6E24C79 B35D548C E0307D49 E26011AD E94E5DF8 EAB7029E
   F84A6B24)
 "#(((:TYPE UNKNOWN-TYPE) (:TYPE HAIRY-TYPE) (:TYPE CHARACTER-SET-TYPE) (:TYPE MEMBER-TYPE) (:TYPE NUMERIC-TYPE)) ((:TYPE VALUES-TYPE) (:TYPE FUN-TYPE) (:TYPE FUN-DESIGNATOR-TYPE) (:TYPE ARGS-TYPE)) ((:TYPE CONS-TYPE)) ((:TYPE ARRAY-TYPE)) ((:TYPE UNION-TYPE) (:TYPE INTERSECTION-TYPE) (:TYPE COMPOUND-TYPE)) ((:TYPE NEGATION-TYPE)))"
 "((let ((tab #a((8) (unsigned-byte 8) 5 0 13 8 5 0 7 14)))
  (let ((b (& (>> val 2) #x7)))
   (let ((a (>> (<< val 5) 29)))
    (^ a (aref tab b))))))")
(#(2A9B425 B9C768B 590BA280 5F5FC85C 65A7B3D6 76DE51BF 9765C8E7 9A16AFFB A6E24C79 B35D548C C76C711E E94E5DF8 F84A6B24 FA751134
   FBD5DA6A FCA25B62)
 "#(((:TYPE MEMBER-TYPE)) ((:TYPE UNDEFINED-CLASSOID) (:TYPE BUILT-IN-CLASSOID) (:TYPE CONDITION-CLASSOID) (:TYPE STRUCTURE-CLASSOID) (:TYPE STANDARD-CLASSOID) (:TYPE STATIC-CLASSOID) (:TYPE CLASSOID)) ((:TYPE NUMERIC-TYPE) (:TYPE CHARACTER-SET-TYPE) (:TYPE ARRAY-TYPE) (:TYPE CONS-TYPE)) ((:TYPE INTERSECTION-TYPE)) ((:TYPE UNION-TYPE)) ((:TYPE UNKNOWN-TYPE) (:TYPE HAIRY-TYPE)))"
 "((let ((tab #a((8) (unsigned-byte 8) 13 4 15 12 0 0 15 0)))
  (let ((b (& (>> val 27) #x7)))
   (let ((a (>> (<< val 5) 29)))
    (^ a (aref tab b))))))")
(#(2A9B425 B9C768B 590BA280 6FED881E 7685F9E6 9765C8E7 9A16AFFB 9ED11C51 A6E24C79 B35D548C DB2BD6D1 E0307D49 E26011AD E94E5DF8
   EAB7029E F84A6B24)
 "#(((:TYPE VALUES-TYPE)) ((:TYPE FUN-DESIGNATOR-TYPE) (:TYPE FUN-TYPE)) ((:TYPE NUMERIC-TYPE)) ((:TYPE UNION-TYPE) (:TYPE INTERSECTION-TYPE) (:TYPE COMPOUND-TYPE)) ((:TYPE MEMBER-TYPE)) ((:TYPE ARRAY-TYPE)) ((:TYPE UNKNOWN-TYPE) (:TYPE HAIRY-TYPE)) ((:TYPE NEGATION-TYPE)) ((:TYPE CONSTANT-TYPE)) ((:TYPE CONS-TYPE)) ((:TYPE CHARACTER-SET-TYPE)) ((:TYPE ALIEN-TYPE-TYPE)))"
 "((let ((tab #a((8) (unsigned-byte 8) 13 4 14 0 12 10 3 4)))
  (let ((b (& (>> val 27) #x7)))
   (let ((a (>> (<< val 5) 29)))
    (^ a (aref tab b))))))")
(#(2A9B425 1DF6628B 590BA280 6FED881E 9765C8E7 9A16AFFB 9ED11C51 DB2BD6D1 E0307D49 E26011AD EAB7029E)
 "#(((:TYPE UNION-TYPE) (:TYPE INTERSECTION-TYPE) (:TYPE COMPOUND-TYPE)) ((:TYPE NEGATION-TYPE)) ((:TYPE CONS-TYPE)) ((:TYPE ARRAY-TYPE)) ((:TYPE CONSTANT-TYPE)) ((:TYPE VALUES-TYPE) (:TYPE FUN-TYPE) (:TYPE FUN-DESIGNATOR-TYPE) (:TYPE ARGS-TYPE)))"
 "((let ((tab #a((8) (unsigned-byte 8) 1 14 0 5 0 0 5 0)))
  (let ((b (& val #x7)))
   (let ((a (>> val 29)))
    (^ a (aref tab b))))))")
(#(2E8EF95 778D875 2BEFD530 31C62284 46608E23 54D7A54A 62133B58 813DFF29 BB86DC9C EB29C836)
 "(THE* SB-C::WITH-SOURCE-FORM PROGV MULTIPLE-VALUE-PROG1 BLOCK UNWIND-PROTECT THE PROGN IF QUOTE)"
 "((let ((tab #a((8) (unsigned-byte 8) 0 0 12 15 5 2 4 0)))
  (let ((b (& val #x7)))
   (let ((a (>> (<< val 5) 29)))
    (^ a (aref tab b))))))")
(#(3048E87 28BEF00E 321E4B7B 62402029 7A4EAC07 ED4F58DE)
 "(%RAW-INSTANCE-REF/COMPLEX-DOUBLE %RAW-INSTANCE-REF/COMPLEX-SINGLE %RAW-INSTANCE-REF/SIGNED-WORD %RAW-INSTANCE-REF/DOUBLE %RAW-INSTANCE-REF/SINGLE %RAW-INSTANCE-REF/WORD)"
 "(  (& (- (>> val 12) (>> val 13)) 7))")
(#(30A8A35 3D6EC19 4214F49C 543DAB03 595DD316 6731B27F 714FAFD7 7E4DD5CC 81748681 845FE436 8DBB3B18 9EE6C4C4 D8F2B7EA)
 "(:ALLOW-OTHER-KEYS :ALTERNATIVE-CONSTRAINTS :ALTERNATIVE :CONSEQUENT-CONSTRAINTS :CONSEQUENT :TEST :TAIL-P :SOURCE-PATH :LEXENV :PREV :NEXT :REOPTIMIZE :NUMBER)"
 "((let ((tab #a((8) (unsigned-byte 8) 8 0 0 12 0 1 0 8)))
  (let ((b (& (>> val 7) #x7)))
   (let ((a (>> (<< val 5) 29)))
    (^ a (aref tab b))))))")
(#(3146EB3 1226EEA9 2F740446 44455F7E 48131EF9 4B94156D 6A1DA79D 7058CBFA 7E4DD5CC 7F2D8268 85DD5A2F AF616594 B734105A C18A23D8
   CA789368 CB0F3862 E29D7651 F4D1B149)
 "(:ALLOW-OTHER-KEYS :SUPPRESS-ERRORS :PPRINT-DISPATCH :LINES :MISER-WIDTH :RIGHT-MARGIN :READABLY :GENSYM :ARRAY :CASE :LENGTH :LEVEL :PRETTY :CIRCLE :BASE :RADIX :ESCAPE :STREAM)"
 "((let ((tab #a((16) (unsigned-byte 8) 0 1 0 24 1 0 9 0 0 0 13 0 15 7 12 31)))
  (let ((b (& val #xf)))
   (let ((a (>> (<< val 7) 28)))
    (^ a (aref tab b))))))")
(#(3146EB3 1226EEA9 2F740446 44455F7E 48131EF9 4B94156D 6A1DA79D 7E4DD5CC 7F2D8268 85DD5A2F AF616594 B734105A C18A23D8 CA789368
   CB0F3862 E29D7651 F4D1B149)
 "(:ALLOW-OTHER-KEYS :SUPPRESS-ERRORS :PPRINT-DISPATCH :LINES :MISER-WIDTH :RIGHT-MARGIN :READABLY :GENSYM :ARRAY :CASE :LENGTH :LEVEL :PRETTY :CIRCLE :BASE :RADIX :ESCAPE)"
 "((let ((tab #a((16) (unsigned-byte 8) 0 0 0 13 1 0 9 0 0 0 7 0 13 7 15 30)))
  (let ((b (& val #xf)))
   (let ((a (>> (<< val 7) 28)))
    (^ a (aref tab b))))))")
(#(3146EB3 1473BF8C 2D238458 7E4DD5CC DB45DA5C)
 "(:ALLOW-OTHER-KEYS :SCALE :INDEX :BASE :DISP)"
 "(  (& (^ (>> val 1) (>> val 25)) 7))")
(#(327B6CF C6956F1 12493593 29B9C94B 3742620B 4039E15B 6ABE0B3A 6D11980C 7058CBFA 7E4DD5CC C3D4E5F4 C6968950 F1C23895 F62855F1
   FA30A102)
 "(:ALLOW-OTHER-KEYS :SAVED-SLOT-NAMES :VALID-STRUCTURES :CIRCULARITY-TABLE :DEBUG-INFO :PATCH-TABLE :ENTRY-TABLE :PACKAGES :TABLE-FREE :STRING=-TABLE :INSTANCE-ID-TABLE :EQ-TABLE :SIMILAR-TABLE :VARINT-BUF :STREAM)"
 "((let ((tab #a((8) (unsigned-byte 8) 10 0 12 4 0 0 15 0)))
  (let ((b (& (>> val 3) #x7)))
   (let ((a (>> (<< val 5) 29)))
    (^ a (aref tab b))))))")
(#(35387DE 71A5A23 B66DCF7 DBA5087 140C6C3A 19825BC5 1BBE4C76 206F3878 30AA239B 49A5AA56 525E241A 5EEAA1C3 6978EE9A 6C9BA26B
   6D7CB844 7A372C76 9AC82294 B0EB6377 BD70C3D5 C5C8EBF4 C7E7B222 C9A0837E D8B891DE DCFC54DF)
 "(:OPTIONAL-RESULTS :SAVE-P :POLICY :GUARD :TRANSLATE :RESULT-TYPES :ARG-TYPES :NOTE :NODE-VAR :MOVE-ARGS :RESULT-REFS :ARG-REFS :VOP-VAR :VARIANT-COST :VARIANT-VARS :VARIANT :IGNORE :INFO :BEFORE-LOAD :GENERATOR :TEMPORARY :CONDITIONAL :RESULTS :ARGS)"
 "((let ((tab #a((16) (unsigned-byte 8) 13 0 1 31 0 31 15 7 13 31 17 0 10 31 31 0)))
  (let ((b (& (>> val 9) #xf)))
   (let ((a (>> (<< val 7) 28)))
    (^ a (aref tab b))))))")
(#(35387DE 14D62A9E 24D43549 5C8719A1 606E0E3A 76D86EE5 7E4DD5CC 8612A6FE 998E7C29 A5860C2B AF060102 B7DA6CE4 C0FB5F77 F0A1752E
   FBDE7A7C)
 "(:ALLOW-OTHER-KEYS :PARENT :FLUSHABLE :USER-DATA :POLICY :DISABLED-PACKAGE-LOCKS :HANDLED-CONDITIONS :CLEANUP :LAMBDA :TYPE-RESTRICTIONS :TAGS :BLOCKS :VARS :FUNS :DEFAULT)"
 "((let ((tab #a((8) (unsigned-byte 8) 5 2 12 14 12 12 4 0)))
  (let ((b (& (>> val 1) #x7)))
   (let ((a (>> (<< val 5) 29)))
    (^ a (aref tab b))))))")
(#(35387DE 18795B4E 7E4DD5CC 7F4CC5C8 A5137BCD)
 "(:ALLOW-OTHER-KEYS :SOURCE-NAMESTRING :SOURCE-PLIST :POLICY :OVERRIDE)"
 "(  (& (+ val (>> val 4)) 7))")
(#(35387DE 7E4DD5CC 92586CF4 A758CF19 C3EABF48)
 "(:ALLOW-OTHER-KEYS :POLICY :IMPORTANT :FUNCTION :TYPE)"
 "(  (& (- (>> val 1) (>> val 5)) 7))")
(#(39042B8 201B535C 48F762E1 7C9BA40B 7E4DD5CC 9EE3654F A40E62B2)
 "(:ALLOW-OTHER-KEYS :SUFFIX :PREFIX :BLOCK-END :SECTION-END :DEPTH :POSN)"
 "(  (& (- (>> val 1) (>> val 15)) 7))")
(#(39308E0 790E4AF D2F362D 1D8EA6A4 25164A63 2C55EAF7 45334DC4 5D03F722 6EA0F9D1 7C685E1B 7E4DD5CC B38BE789 BA6C5CD5 C4AF7D37
   D36BD4C8 D70B59A6 F5B3D6E9)
 "(:ALLOW-OTHER-KEYS :SUBTYPEP :RESULT-TN :ARG-TN :DEPORT-PIN-P :DEPORT-ALLOC-GEN :DEPORT-GEN :NATURALIZE-GEN :DEPOSIT-GEN :EXTRACT-GEN :ALIEN-REP :LISP-REP :TYPE= :UNPARSE :INCLUDE :DEFSTRUCT-NAME :NAME)"
 "((let ((tab #a((16) (unsigned-byte 8) 0 0 0 1 0 1 0 0 3 0 0 0 15 16 0 9)))
  (let ((b (& val #xf)))
   (let ((a (>> val 28)))
    (^ a (aref tab b))))))")
(#(39308E0 D2F362D 1D8EA6A4 2C55EAF7 45334DC4 5D03F722 6EA0F9D1 7C685E1B B38BE789 BA6C5CD5 D36BD4C8 D70B59A6 F5B3D6E9)
 "((:UNPARSE . SB-ALIEN::ALIEN-TYPE-CLASS-UNPARSE) (:TYPE= . SB-ALIEN::ALIEN-TYPE-CLASS-TYPE=) (:SUBTYPEP . SB-ALIEN::ALIEN-TYPE-CLASS-SUBTYPEP) (:LISP-REP . SB-ALIEN::ALIEN-TYPE-CLASS-LISP-REP) (:ALIEN-REP . SB-ALIEN::ALIEN-TYPE-CLASS-ALIEN-REP) (:EXTRACT-GEN . SB-ALIEN::ALIEN-TYPE-CLASS-EXTRACT-GEN) (:DEPOSIT-GEN . SB-ALIEN::ALIEN-TYPE-CLASS-DEPOSIT-GEN) (:NATURALIZE-GEN . SB-ALIEN::ALIEN-TYPE-CLASS-NATURALIZE-GEN) (:DEPORT-GEN . SB-ALIEN::ALIEN-TYPE-CLASS-DEPORT-GEN) (:DEPORT-ALLOC-GEN . SB-ALIEN::ALIEN-TYPE-CLASS-DEPORT-ALLOC-GEN) (:DEPORT-PIN-P . SB-ALIEN::ALIEN-TYPE-CLASS-DEPORT-PIN-P) (:ARG-TN . SB-ALIEN::ALIEN-TYPE-CLASS-ARG-TN) (:RESULT-TN . SB-ALIEN::ALIEN-TYPE-CLASS-RESULT-TN))"
 "((let ((tab #a((8) (unsigned-byte 8) 0 0 0 8 8 12 2 0)))
  (let ((b (& val #x7)))
   (let ((a (>> val 29)))
    (^ a (aref tab b))))))")
(#(3D6EC19 326CF299 3A1DA026 82FDFC4E 8CD5B89F 92586CF4 A048B3D2 B7DA6CE4 EB29C836 F987A176)
 "(SB-WALKER::CALL LAMBDA SET NIL QUOTE RETURN SB-WALKER::EFFECT SB-WALKER::TEST FUNCTION EVAL)"
 "((let ((tab #a((8) (unsigned-byte 8) 0 2 0 11 8 0 5 0)))
  (let ((b (& (>> val 2) #x7)))
   (let ((a (>> (<< val 5) 29)))
    (^ a (aref tab b))))))")
(#(3D6EC19 32C229AB 95083148 9F884B31 A17B2D40 B0A49DC5 B34F601E C8A25DB2 FE4CBBB9)
 "(:NOT :AND :OR :SAME-AS :TEST :NEGATIVE :POSITIVE :CONSTANT T)"
 "((let ((tab #a((8) (unsigned-byte 8) 7 0 0 0 0 0 13 0)))
  (let ((b (& val #x7)))
   (let ((a (>> val 29)))
    (^ a (aref tab b))))))")
(#(3D6EC19 37E8DF0E 40CEAC91 49B323B8 7E4DD5CC A1F724C6 A256D8C6 B2B2C816 C122AEC5)
 "(:ALLOW-OTHER-KEYS :KEY :END2 :START2 :END1 :START1 :TEST-NOT :TEST :FROM-END)"
 "((let ((tab #a((8) (unsigned-byte 8) 5 0 0 14 0 5 4 4)))
  (let ((b (& (>> val 7) #x7)))
   (let ((a (>> (<< val 5) 29)))
    (^ a (aref tab b))))))")
(#(3D6EC19 43F1ADE4 63880A60 74643D7B 7E4DD5CC 9B206D3E B8D43E7C D8607BE6)
 "(:ALLOW-OTHER-KEYS :SYNCHRONIZED :WEAKNESS :HASH-FUNCTION :REHASH-THRESHOLD :REHASH-SIZE :SIZE :TEST)"
 "(  (& (^ (>> val 9) (>> val 28)) 7))")
(#(3D6EC19 4E4CD394 7E4DD5CC A1F724C6 A256D8C6 C122AEC5 C1D4C246 FCC84496)
 "(:ALLOW-OTHER-KEYS :KEY :COUNT :END :START :TEST-NOT :TEST :FROM-END)"
 "(  (& (^ (>> val 3) (>> val 21)) 7))")
(#(3D6EC19 7E4DD5CC 8ED3F6F5 9D81B113 EB66E66D)
 "(:ALLOW-OTHER-KEYS :TEST :SORT :KEY-TYPE :CONSTRUCTOR)"
 "(  (& (+ val (>> val 5)) 7))")
(#(3D6EC19 7E4DD5CC A1F724C6 A256D8C6 C122AEC5 C1D4C246 FCC84496)
 "(:ALLOW-OTHER-KEYS :KEY :FROM-END :END :START :TEST-NOT :TEST)"
 "(  (& (+ (>> val 10) (>> val 24)) 7))")
(#(3D6EC19 92586CF4 A1F724C6 A256D8C6 D8C1EE02)
 "(FUNCTION SB-IMPL::PREDICATE SB-IMPL::KEY SB-IMPL::TEST SB-IMPL::TEST-NOT)"
 "(  (& (- (>> val 4) (>> val 11)) 7))")
(#(432D590 E0106E3 1DA93F40 582CD525 702216F9 88B200C9 DEBFB91F)
 "(:DCZID_EL0 :TPIDRRO_EL0 :TPIDR_EL0 :CCNT :FPSR :FPCR :NZCV)"
 "(  (& (+ val (>> val 18)) 7))")
(#(50CD4DF 32C229AB 7FD087C8 9B0ED14E D5723A9D E1B4FE02)
 "(:COVERAGE-MARKS :KNOWN-FUN :FDEFINITION :LOAD-TIME-VALUE :ENTRY :CONSTANT)"
 "(  (& (+ (>> val 1) (>> val 23)) 7))")
(#(50CD4DF 32C229AB 7FD087C8 9B0ED14E D5723A9D E1B4FE02 EE9BDDAE)
 "(:TLS-INDEX :COVERAGE-MARKS :KNOWN-FUN :FDEFINITION :LOAD-TIME-VALUE :ENTRY :CONSTANT)"
 "(  (& (+ (>> val 3) (>> val 19)) 7))")
(#(5151B44 5C4485D 94A93FE 10D1C025 2159100F 414B99B6 4ACE6E2B 5C93F3DF 61E8F31D 7E4DD5CC 812F2FD4 8AB1F903 962F5FA8 B68BF8F6
   C25D7D5D C4CF82B5 C6EFD6AB)
 "(:ALLOW-OTHER-KEYS :STRING-TO-OCTETS-FUN :OCTETS-TO-STRING-FUN :WRITE-C-STRING-FUN :READ-C-STRING-FUN :BYTES-FOR-CHAR-FUN :RESYNC-FUN :WRITE-CHAR-FULL-BUFFERED-FUN :WRITE-CHAR-LINE-BUFFERED-FUN :WRITE-CHAR-NONE-BUFFERED-FUN :WRITE-N-BYTES-FUN :READ-CHAR-FUN :READ-N-CHARS-FUN :REPLACEMENT :DEFAULT-REPLACEMENT-CHARACTER :NEWLINE-VARIANT :NAMES)"
 "((let ((tab #a((16) (unsigned-byte 8) 0 0 0 15 13 15 0 0 3 0 0 13 5 0 16 13)))
  (let ((b (& val #xf)))
   (let ((a (>> val 28)))
    (^ a (aref tab b))))))")
(#(52A8EB8 624BF45 730F78B C88666B 1B3DFE3D 25164A63 3AAC5790 3FFDC7CE 4279C74A 446F7404 4AE6501D 527D1537 551E0734 58402903
   5B62A78D 5C9A772E 6251F97E 6B412252 762F2F3A 7E4DD5CC 80727F9A 81DED042 8AB1F903 8C47C341 90E4F255 93D17E93 97B72264
   9B5DD377 9D0BE578 9DA92895 A45DDC19 AA990F75 CC82EB09 D2743454 D692DDF5 D7A26DBC E3FCE013 E4774714 F29C1EED F578E04D
   F61FC563 F81CA1A5 F8751011 FDE111BA)
 "(:ALLOW-OTHER-KEYS :FORM-START-CHAR-POS :FORM-START-BYTE-POS :LAST-NEWLINE :NEWLINES :OBSERVER :OUTPUT-BYTES :REPLACEMENT :CHAR-SIZE :EXTERNAL-FORMAT :PATHNAME :TIMEOUT :HANDLER :OUTPUT-QUEUE :OBUF :EOF-FORCED-P :IBUF :INSTEAD :SERVE-EVENTS :LISTEN :OUTPUT-COLUMN :DUAL-CHANNEL-P :BUFFERING :FD-TYPE :FD :ELEMENT-MODE :ELEMENT-TYPE :ELEMENT-SIZE :DELETE-ORIGINAL :ORIGINAL :FILE :NAME :INPUT-CHAR-POS :MISC :SOUT :BOUT :COUT :N-BIN :BIN :IN :IN-INDEX :CSIZE-BUFFER :CIN-BUFFER :IN-BUFFER)"
 "((let ((tab #a((32) (unsigned-byte 8) 0 9 9 28 0 19 22 10 0 0 0 0 0 7 9 19 51 28 22 9 51 60 0 0 46 37 36 32 0 9 34 62)))
  (let ((b (& (>> val 2) #x1f)))
   (let ((a (>> (<< val 9) 27)))
    (^ a (aref tab b))))))")
(#(52A8EB8 624BF45 730F78B C88666B 1B3DFE3D 25164A63 3AAC5790 3FFDC7CE 4279C74A 446F7404 4AE6501D 527D1537 58402903 5B62A78D
   5C9A772E 6251F97E 6B412252 762F2F3A 7E4DD5CC 80727F9A 81DED042 8AB1F903 8C47C341 90E4F255 93D17E93 97B72264 9D0BE578
   9DA92895 A45DDC19 CC82EB09 D2743454 D692DDF5 D7A26DBC E3FCE013 E4774714 F578E04D F81CA1A5 F8751011 FDE111BA)
 "(:ALLOW-OTHER-KEYS :OUTPUT-BYTES :REPLACEMENT :CHAR-SIZE :EXTERNAL-FORMAT :PATHNAME :TIMEOUT :HANDLER :OUTPUT-QUEUE :OBUF :EOF-FORCED-P :IBUF :INSTEAD :SERVE-EVENTS :LISTEN :OUTPUT-COLUMN :DUAL-CHANNEL-P :BUFFERING :FD-TYPE :FD :ELEMENT-MODE :ELEMENT-TYPE :ELEMENT-SIZE :DELETE-ORIGINAL :ORIGINAL :FILE :NAME :INPUT-CHAR-POS :MISC :SOUT :BOUT :COUT :N-BIN :BIN :IN :IN-INDEX :CSIZE-BUFFER :CIN-BUFFER :IN-BUFFER)"
 "((let ((tab #a((32) (unsigned-byte 8) 0 51 9 0 9 9 0 0 0 12 46 28 12 9 19 0 0 60 41 26 16 0 0 10 30 49 0 0 59 12 44 0)))
  (let ((b (& val #x1f)))
   (let ((a (>> val 27)))
    (^ a (aref tab b))))))")
(#(52A8EB8 624BF45 730F78B C88666B 25164A63 3AAC5790 3FFDC7CE 4279C74A 446F7404 4AE6501D 527D1537 551E0734 58402903 5B62A78D
   5C9A772E 6251F97E 6B412252 762F2F3A 7E4DD5CC 80727F9A 81DED042 8AB1F903 8C47C341 90E4F255 93D17E93 97B72264 9AB819E3
   9B5DD377 9D0BE578 9DA92895 A45DDC19 AA990F75 CC82EB09 D2743454 D692DDF5 D7A26DBC E3FCE013 E4774714 F29C1EED F578E04D
   F61FC563 F81CA1A5 F8751011 FDE111BA)
 "(:ALLOW-OTHER-KEYS :FORM-START-CHAR-POS :FORM-START-BYTE-POS :LAST-NEWLINE :NEWLINES :OBSERVER :OUTPUT-BYTES :REPLACEMENT :CHAR-SIZE :EXTERNAL-FORMAT :PATHNAME :TIMEOUT :HANDLER :OUTPUT-QUEUE :OBUF :EOF-FORCED-P :IBUF :INSTEAD :SERVE-EVENTS :LISTEN :OUTPUT-COLUMN :SYNCHRONIZE-OUTPUT :BUFFERING :FD-TYPE :FD :ELEMENT-MODE :ELEMENT-TYPE :ELEMENT-SIZE :DELETE-ORIGINAL :ORIGINAL :FILE :NAME :INPUT-CHAR-POS :MISC :SOUT :BOUT :COUT :N-BIN :BIN :IN :IN-INDEX :CSIZE-BUFFER :CIN-BUFFER :IN-BUFFER)"
 "((let ((tab #a((32) (unsigned-byte 8) 0 0 10 10 0 25 61 0 0 34 0 19 0 7 9 0 51 0 2 9 59 62 0 0 0 36 36 6 0 9 34 60)))
  (let ((b (& (>> val 2) #x1f)))
   (let ((a (>> (<< val 9) 27)))
    (^ a (aref tab b))))))")
(#(52A8EB8 624BF45 730F78B C88666B 25164A63 3AAC5790 3FFDC7CE 4279C74A 446F7404 4AE6501D 527D1537 58402903 5B62A78D 5C9A772E
   6251F97E 6B412252 762F2F3A 7E4DD5CC 80727F9A 81DED042 8AB1F903 8C47C341 90E4F255 93D17E93 97B72264 9AB819E3 9D0BE578
   9DA92895 A45DDC19 CC82EB09 D2743454 D692DDF5 D7A26DBC E3FCE013 E4774714 F578E04D F81CA1A5 F8751011 FDE111BA)
 "(:ALLOW-OTHER-KEYS :OUTPUT-BYTES :REPLACEMENT :CHAR-SIZE :EXTERNAL-FORMAT :PATHNAME :TIMEOUT :HANDLER :OUTPUT-QUEUE :OBUF :EOF-FORCED-P :IBUF :INSTEAD :SERVE-EVENTS :LISTEN :OUTPUT-COLUMN :SYNCHRONIZE-OUTPUT :BUFFERING :FD-TYPE :FD :ELEMENT-MODE :ELEMENT-TYPE :ELEMENT-SIZE :DELETE-ORIGINAL :ORIGINAL :FILE :NAME :INPUT-CHAR-POS :MISC :SOUT :BOUT :COUT :N-BIN :BIN :IN :IN-INDEX :CSIZE-BUFFER :CIN-BUFFER :IN-BUFFER)"
 "((let ((tab #a((32) (unsigned-byte 8) 0 28 0 0 0 0 0 0 0 28 9 28 12 9 19 0 36 61 19 9 16 28 0 46 9 49 9 0 60 41 45 0)))
  (let ((b (& val #x1f)))
   (let ((a (>> val 27)))
    (^ a (aref tab b))))))")
(#(54FC85B 17D252E7 377D1CA8 519DD3CE 6E2BAD2D 7614C426 B854947D BDE3EA38 D52CECC7)
 "(:UNPARSED :NON-LOCAL-ENTRY :SINGLE-VALUE-RETURN :CALL-SITE :BLOCK-START :NON-LOCAL-EXIT :INTERNAL-ERROR :KNOWN-RETURN :UNKNOWN-RETURN)"
 "((let ((tab #a((8) (unsigned-byte 8) 0 0 14 0 0 4 5 0)))
  (let ((b (>> val 29)))
   (let ((a (& val #x7)))
    (^ a (aref tab b))))))")
(#(54FC85B 17D252E7 377D1CA8 519DD3CE 6E2BAD2D 7614C426 BDE3EA38 D52CECC7)
 "(:NON-LOCAL-ENTRY :SINGLE-VALUE-RETURN :CALL-SITE :BLOCK-START :NON-LOCAL-EXIT :INTERNAL-ERROR :KNOWN-RETURN :UNKNOWN-RETURN)"
 "(  (& (^ (>> val 2) (>> val 12)) 7))")
(#(56A80A0 38475264 606E0E3A 7C9BA40B 7E4DD5CC 97ECB0B8 C9A0837E EAE843E3 FB685091 FF5AE652)
 "(:ALLOW-OTHER-KEYS :INFO :BLOCKS :DEPTH :INFERIORS :SUPERIOR :EXITS :TAIL :HEAD :KIND)"
 "((let ((tab #a((8) (unsigned-byte 8) 0 12 0 0 9 0 7 4)))
  (let ((b (>> val 29)))
   (let ((a (& val #x7)))
    (^ a (aref tab b))))))")
(#(56A80A0 4214F49C 543DAB03 6731B27F 7E4DD5CC 81748681 845FE436 8612A6FE 8DBB3B18 D8F2B7EA)
 "(:ALLOW-OTHER-KEYS :CLEANUP :EXITS :TAIL-P :SOURCE-PATH :LEXENV :PREV :NEXT :REOPTIMIZE :NUMBER)"
 "((let ((tab #a((8) (unsigned-byte 8) 0 0 0 4 2 3 0 14)))
  (let ((b (& (>> val 1) #x7)))
   (let ((a (>> (<< val 5) 29)))
    (^ a (aref tab b))))))")
(#(56FA179 18C4A9F3 1F2EC83F 7E4DD5CC 9C5536A1 AD05849D B1190485 C7165A2E C841F022 D3C39B63 DA1BC488 FCACAE1D)
 "(:ALLOW-OTHER-KEYS :ABORTED :BYTES-CONSED :PAGE-FAULTS :LAMBDAS-CONVERTED :EVAL-CALLS :PROCESSOR-CYCLES :GC-REAL-TIME-MS :GC-RUN-TIME-MS :SYSTEM-RUN-TIME-US :USER-RUN-TIME-US :REAL-TIME-MS)"
 "((let ((tab #a((8) (unsigned-byte 8) 0 12 11 0 0 0 0 13)))
  (let ((b (& val #x7)))
   (let ((a (>> (<< val 5) 29)))
    (^ a (aref tab b))))))")
(#(57CE081 6072329 25164A63 2975D415 3F3E40B1 5FCFD0CF 73D255A2 7C685E1B 7D95163D 7E4DD5CC 7FB184E7 A63B0E66 E5AD1C0D F274CEA5
   F4059741 FDFC2C5D)
 "(:ALLOW-OTHER-KEYS :CANON-TRANSLS :TRANSLATIONS :NAME :NAME-HASH :CUSTOMARY-CASE :SIMPLIFY-NAMESTRING :UNPARSE-DIRECTORY-SEPARATOR :UNPARSE-ENOUGH :UNPARSE-FILE :UNPARSE-DIRECTORY :UNPARSE-HOST :UNPARSE-NATIVE :UNPARSE :PARSE-NATIVE :PARSE)"
 "((let ((tab #a((8) (unsigned-byte 8) 8 12 14 5 0 8 15 1)))
  (let ((b (& (>> val 3) #x7)))
   (let ((a (>> (<< val 5) 29)))
    (^ a (aref tab b))))))")
(#(598DE63 71A5A23 9D37842 140C6C3A 25164A63 26880BE1 26CAE708 27258A67 30AA239B 364AB2DB 4477100B 6798FB8F 7A372C76 7E4DD5CC
   88FB8978 89F00D50 8F227489 954DDD0B 9C1E40C0 9C6C4CD2 B69202E5 BD70C3D5 C3EABF48 C5C8EBF4 C91B07FD D8B891DE DCFC54DF
   DD7EA063 E962486B EB165265 EF0AB1CD FEA4EC0E)
 "(:ALLOW-OTHER-KEYS :AFTER-SC-SELECTION :MOVE-VOP-P :OPTIONAL-RESULTS :OPTIMIZER :TARGETS :REF-ORDERING :TEMPS :NUM-RESULTS :NUM-ARGS :VARIANT :GENERATOR-FUNCTION :MORE-ARG-LOAD-SCS :RESULT-LOAD-SCS :ARG-LOAD-SCS :MORE-RESULT-COSTS :MORE-ARG-COSTS :RESULT-COSTS :ARG-COSTS :MOVE-ARGS :SAVE-P :INFO-ARG-COUNT :NOTE :COST :LTN-POLICY :GUARD :MORE-RESULTS-TYPE :MORE-ARGS-TYPE :RESULT-TYPES :ARG-TYPES :TYPE :NAME)"
 "((let ((tab #a((16) (unsigned-byte 8) 1 26 0 15 31 31 17 31 21 16 0 3 19 22 1 27)))
  (let ((b (& (>> val 10) #xf)))
   (let ((a (>> (<< val 7) 28)))
    (^ a (aref tab b))))))")
(#(5CA83E1 AC49519 132431BB 1475CAAE 1C30AB06 1D4D0DFE 2AE9D012 36600B32 449607FC 4859C740 487BB5A9 49A5AA56 4E9A2F9A 543DAB03
   555E2679 56EE5555 5AAEBDB1 5D0B9381 646D538E 6595C69C 70AC33CD 7D224C44 7E4DD5CC 8CD5B89F 8DBB3B18 8FDB5971 97ECB0B8
   9A8CE552 B4C67B51 C3EABF48 C80506D7 C9A0837E D96D3DEB E2114B36 F0A1752E F6179573 FBB90A17 FE6A9C07)
 "(:ALLOW-OTHER-KEYS :ALLOW-INSTRUMENTING :CALL-LEXENV :ENVIRONMENT :TAIL-SET :CALLS-OR-CLOSES :DYNAMIC-EXTENTS :ENTRIES :LETS :HOME :RETURN :BIND :OPTIONAL-DISPATCH :VARS :IGNORE :TOP-LEVEL-DEFUN-P :INLINE-EXPANDED :XREF :PLIST :ENCLOSE :DOCUMENTATION :ARG-DOCUMENTATION :LEXENV :INLINE-EXPANSION :INLINEP :ENTRY-FUN :HAS-EXTERNAL-REFERENCES-P :KIND :%DEBUG-NAME :INFO :DYNAMIC-EXTENT :EVER-USED :REFS :WHERE-FROM :DEFINED-TYPE :TYPE :%SOURCE-NAME :NUMBER)"
 "((let ((tab #a((32) (unsigned-byte 8) 0 28 0 9 0 0 7 61 22 19 0 28 46 19 0 0 0 0 0 19 0 46 9 0 9 0 41 33 28 0 11 52)))
  (let ((b (& val #x1f)))
   (let ((a (>> val 27)))
    (^ a (aref tab b))))))")
(#(5CA83E1 AC49519 1C30AB06 2AE9D012 36600B32 449607FC 45EA8C50 49A5AA56 543DAB03 56EE5555 587A3C01 5D0B9381 6595C69C 672AF595
   6731B27F 70AC33CD 7D224C44 7E4DD5CC 8DBB3B18 97ECB0B8 9A8CE552 B4C67B51 BA994C49 C3EABF48 C80506D7 C9A0837E CF524FF7
   E2114B36 ED178322 F3FC2F5A F578D6D4 F6179573 FBB90A17 FE6A9C07)
 "(:ALLOW-OTHER-KEYS :MAIN-ENTRY :MORE-ENTRY :ENTRY-POINTS :MAX-ARGS :MIN-ARGS :SOURCE-PATH :KEYP :ALLOWP :ARGLIST :IGNORE :TOP-LEVEL-DEFUN-P :INLINE-EXPANDED :XREF :PLIST :ENCLOSE :DOCUMENTATION :ARG-DOCUMENTATION :LEXENV :INLINE-EXPANSION :INLINEP :ENTRY-FUN :HAS-EXTERNAL-REFERENCES-P :KIND :%DEBUG-NAME :INFO :DYNAMIC-EXTENT :EVER-USED :REFS :WHERE-FROM :DEFINED-TYPE :TYPE :%SOURCE-NAME :NUMBER)"
 "((let ((tab #a((32) (unsigned-byte 8) 9 7 26 0 9 0 19 0 28 7 0 0 18 9 28 0 51 2 0 0 0 0 0 0 0 7 0 1 10 0 37 28)))
  (let ((b (& (>> val 1) #x1f)))
   (let ((a (>> (<< val 9) 27)))
    (^ a (aref tab b))))))")
(#(5CA83E1 AC49519 1C30AB06 2AE9D012 36600B32 449607FC 49A5AA56 543DAB03 56EE5555 5D0B9381 6595C69C 70AC33CD 7D224C44 7E4DD5CC
   8DBB3B18 97ECB0B8 9A8CE552 B4C67B51 C3EABF48 C80506D7 C9A0837E E2114B36 F6179573 FBB90A17 FE6A9C07)
 "(:ALLOW-OTHER-KEYS :IGNORE :TOP-LEVEL-DEFUN-P :INLINE-EXPANDED :XREF :PLIST :ENCLOSE :DOCUMENTATION :ARG-DOCUMENTATION :LEXENV :INLINE-EXPANSION :INLINEP :ENTRY-FUN :HAS-EXTERNAL-REFERENCES-P :KIND :%DEBUG-NAME :INFO :DYNAMIC-EXTENT :EVER-USED :REFS :WHERE-FROM :DEFINED-TYPE :TYPE :%SOURCE-NAME :NUMBER)"
 "((let ((tab #a((16) (unsigned-byte 8) 21 21 8 13 24 0 31 31 21 15 21 0 0 0 0 19)))
  (let ((b (& (>> val 15) #xf)))
   (let ((a (>> (<< val 7) 28)))
    (^ a (aref tab b))))))")
(#(5CA83E1 22B3C8EC 6E6889F8 7E4DD5CC 92586CF4 A892BBBE AA8CF169)
 "(:ALLOW-OTHER-KEYS :FUNCTION :FORM :PLIST :START-POSITIONS :CREATED :NAMESTRING)"
 "(  (& (- (>> val 1) (>> val 16)) 7))")
(#(5CA83E1 6E6889F8 7E4DD5CC A892BBBE AA8CF169)
 "(:ALLOW-OTHER-KEYS :PLIST :START-POSITIONS :CREATED :NAMESTRING)"
 "(  (& (+ (>> val 1) (>> val 16)) 7))")
(#(5CDCA05 9467E15 25164A63 58436D89 5FFDEE71 6BB3018B 7E4DD5CC 8D2AB8C8 97ECB0B8 A063C516 BC9B6CEF D6D8F2D9)
 "(:ALLOW-OTHER-KEYS :UNUSED-IF :OFFSET :SCS :LOAD :LOAD-TN :DIES :BORN :TEMP :TARGET :KIND :NAME)"
 "((let ((tab #a((8) (unsigned-byte 8) 12 0 0 7 12 0 8 7)))
  (let ((b (& val #x7)))
   (let ((a (>> (<< val 5) 29)))
    (^ a (aref tab b))))))")
(#(5CDCA05 2B09B688 8D2AB8C8 A063C516 BC9B6CEF C2E7E4AB F4EEBB87)
 "(:UNUSED-IF :SCS :TO :FROM :OFFSET :SC :TARGET)"
 "(  (& (^ (>> val 11) (>> val 24)) 7))")
(#(5CDCA05 33F93593 8059D202 A063C516 C2E7E4AB D6D8F2D9 F4EEBB87)
 "(:TO :FROM :TARGET :MORE :LOAD-IF :LOAD-TN :SCS)"
 "(  (& (^ (>> val 6) (>> val 9)) 7))")
(#(6072329 2975D415 5FCFD0CF 73D255A2 7C685E1B 7D95163D 7E4DD5CC A63B0E66 E5AD1C0D F274CEA5 F4059741 FDFC2C5D)
 "(:ALLOW-OTHER-KEYS :CUSTOMARY-CASE :SIMPLIFY-NAMESTRING :UNPARSE-DIRECTORY-SEPARATOR :UNPARSE-ENOUGH :UNPARSE-FILE :UNPARSE-DIRECTORY :UNPARSE-HOST :UNPARSE-NATIVE :UNPARSE :PARSE-NATIVE :PARSE)"
 "((let ((tab #a((8) (unsigned-byte 8) 14 0 2 12 2 13 0 7)))
  (let ((b (& (>> val 3) #x7)))
   (let ((a (>> (<< val 5) 29)))
    (^ a (aref tab b))))))")
(#(61131DA 7448084F CE38123D CE82A46E)
 "(SB-PCL::%CLASS SB-PCL::%PARAMETER SB-PCL::%VARIABLE-REBINDING SPECIAL)"
 "(  (& (>> val 4) 3) )")
(#(62312A5 21AC9545 30ADE5DA 3D479CA1 404EA5BB 41B1E915 43100125 4CF678BE 4F857BD6 72211BC7 743AF610 79206A18 7E4DD5CC 882FE354
   8E5312FE AAC62EE3 ACA4B3F9 B020C0A6 BA994C49 DC9533E1 FAC3EE17 FBCE81FB)
 "(:ALLOW-OTHER-KEYS :DELETED-SOURCE-PATHS :OBJMAP-ID-TO-LABEL :OBJMAP-ID-TO-TN :OBJMAP-ID-TO-IR2BLOCK :OBJMAP-ID-TO-CONT :OBJMAP-ID-TO-LEAF :OBJMAP-ID-TO-COMP :OBJMAP-ID-TO-NODE :OBJMAP-OBJ-TO-ID :PACKAGE-ENVIRONMENT-CHANGED :PENDING-TOPLEVEL-LAMBDAS :TOPLEVEL-LAMBDAS :ENTRY-POINTS :BLOCK-COMPILE :COMPILE-TOPLEVEL-OBJECT :SSET-COUNTER :MSAN-UNPOISON :COVERAGE-METADATA :SAVED-OPTIMIZE-DECLS :CONSTANT-CACHE :FUN-NAMES-IN-THIS-FILE)"
 "((let ((tab #a((16) (unsigned-byte 8) 26 0 11 13 0 21 21 0 15 9 13 0 0 13 20 15)))
  (let ((b (& (>> val 11) #xf)))
   (let ((a (>> (<< val 7) 28)))
    (^ a (aref tab b))))))")
(#(624BF45 1B3DFE3D 25164A63 3FFDC7CE 58402903 5B62A78D 5C9A772E 7DB72BC4 7E4DD5CC 891C1715 90E4F255 BA514D02 D692DDF5 D8114161
   E4E46523 F81CA1A5 FDE111BA)
 "(:ALLOW-OTHER-KEYS :AUTO-CLOSE :NAME :DUAL-CHANNEL-P :INPUT-BUFFER-P :PATHNAME :DELETE-ORIGINAL :ORIGINAL :FILE :TIMEOUT :SERVE-EVENTS :EXTERNAL-FORMAT :BUFFERING :ELEMENT-TYPE :OUTPUT :INPUT :CLASS)"
 "((let ((tab #a((16) (unsigned-byte 8) 0 12 0 0 1 0 0 0 0 0 31 0 3 6 15 0)))
  (let ((b (& val #xf)))
   (let ((a (>> val 28)))
    (^ a (aref tab b))))))")
(#(699B8EF 21E5BB8C 56591B24 58402903 7E4DD5CC 941FDD6C A74C5AA3 AAC62EE3 BA994C49 CC8B1AC7)
 "(:ALLOW-OTHER-KEYS :EMIT-CFASL :ENTRY-POINTS :BLOCK-COMPILE :TRACE-FILE :PROGRESS :EXTERNAL-FORMAT :PRINT :VERBOSE :OUTPUT-FILE)"
 "((let ((tab #a((8) (unsigned-byte 8) 0 0 14 13 7 0 0 5)))
  (let ((b (& (>> val 1) #x7)))
   (let ((a (>> (<< val 5) 29)))
    (^ a (aref tab b))))))")
(#(71A5A23 7BE111A B66DCF7 DBA5087 140C6C3A 19825BC5 25164A63 26CAE708 2D56D592 30AA239B 525E241A 6978EE9A 69E0CFE8 6C9BA26B
   7A372C76 7D0FE4C9 7E4DD5CC 8205E477 9AC82294 BD70C3D5 C5C8EBF4 D8B891DE DCFC54DF EB165265 EC9CCEB9 EF0AB1CD F3301F6E
   FAC6D96D FF5369AA)
 "(:ALLOW-OTHER-KEYS :BEFORE-LOAD :MOVE-ARGS :SAVE-P :LTN-POLICY :TRANSLATE :NOTE :INFO-ARGS :NODE-VAR :VOP-VAR :VARIANT-VARS :VARIANT :BODY :COST :GUARD :RESULT-TYPES :ARG-TYPES :CONDITIONAL-P :IGNORES :OPTIONAL-RESULTS :OPERANDS :MORE-RESULTS :MORE-ARGS :TEMPS :RESULTS :ARGS :INHERITS :NAME :SOURCE-LOCATION)"
 "((let ((tab #a((16) (unsigned-byte 8) 13 21 18 31 16 13 21 20 7 13 0 0 20 1 26 0)))
  (let ((b (& (>> val 17) #xf)))
   (let ((a (>> (<< val 6) 28)))
    (^ a (aref tab b))))))")
(#(71A5A23 28B369A7 6855A947 7E4DD5CC 970BCC85 B1619E90 B41DF16F F4411A60)
 "(:ALLOW-OTHER-KEYS :CONVENTION :STUB :VARARGS :ARG-TYPES :RESULT-TYPE :ALIGNMENT :BITS)"
 "(  (& (^ (>> val 16) (>> val 26)) 7))")
(#(7261271 42CF8FC0 4B727B29 76B75AD7 7E4DD5CC 85CA1897 C3EABF48)
 "(:ALLOW-OTHER-KEYS :INFINITY-DATA :OPERATIONS :FLAG-VARIABLE :TEMP-VARIABLE :TYPE :ANSWER-VARIABLE)"
 "(  (& (+ (>> val 1) (>> val 7) (>> val 30)) 7))")
(#(7296570 10C1B9E9 64B1F4F0 6E987445 7E4DD5CC)
 "(:ALLOW-OTHER-KEYS :LAST-FORM-RETRIEVED :LAST-LOCATION-RETRIEVED :TOPLEVEL-FORM-INDEX :DEBUG-SOURCE)"
 "(  (& (+ (>> val 8) (>> val 24)) 7))")
(#(73AD370 361A9014 5AEFDBD2 76FA0F56 77EF5B0F)
 "(:BACK :UP :RELATIVE :WILD-INFERIORS :ABSOLUTE)"
 "(  (& (- val (>> val 7)) 7))")
(#(76475C8 B6D895E D13F988 18900DC4 543DAB03 6731B27F 7E4DD5CC C3EABF48 E1807821)
 "(:ALLOW-OTHER-KEYS :TYPE :RESULT-SPECS :ARG-SPECS :CALLER :DEPS :FIRED :LEXENV :SOURCE-PATH)"
 "((let ((tab #a((8) (unsigned-byte 8) 12 5 5 0 2 3 7 6)))
  (let ((b (& (>> val 25) #x7)))
   (let ((a (>> (<< val 31) 29)))
    (^ a (aref tab b))))))")
(#(76475C8 D13F988 543DAB03 6731B27F 7E4DD5CC)
 "(:ALLOW-OTHER-KEYS :CALLER :FIRED :LEXENV :SOURCE-PATH)"
 "(  (& (+ (>> val 3) (>> val 15)) 7))")
(#(76475C8 2D73CB20 543DAB03 6731B27F 7E4DD5CC)
 "(:ALLOW-OTHER-KEYS :HOOK :FIRED :LEXENV :SOURCE-PATH)"
 "(  (& (+ (>> val 5) (>> val 23)) 7))")
(#(76475C8 543DAB03 6731B27F 7E4DD5CC 97ECB0B8)
 "(:ALLOW-OTHER-KEYS :KIND :FIRED :LEXENV :SOURCE-PATH)"
 "(  (& (+ (>> val 1) (>> val 29)) 7))")
(#(76475C8 543DAB03 6731B27F 7E4DD5CC BDE7A1BC C3EABF48)
 "(:ALLOW-OTHER-KEYS :CONTEXT :TYPE :FIRED :LEXENV :SOURCE-PATH)"
 "(  (& (+ val (>> val 13)) 7))")
(#(76475C8 543DAB03 6731B27F 7E4DD5CC E1807821)
 "(:ALLOW-OTHER-KEYS :DEPS :FIRED :LEXENV :SOURCE-PATH)"
 "(  (& (+ (>> val 2) (>> val 30)) 7))")
(#(76475C8 543DAB03 6731B27F 7E4DD5CC F9479566)
 "(:ALLOW-OTHER-KEYS :LAMBDA-VAR :FIRED :LEXENV :SOURCE-PATH)"
 "(  (& (- val (>> val 23)) 7))")
(#(769ED64 38AE4883 7E4DD5CC 8757D4AA A8249CA2 D13FCF75 E3B174F1 F3C3AB71)
 "(:ALLOW-OTHER-KEYS :VM :IS4 :VVVV :W :OPCODE-PREFIX :L :REMAINING-BYTES)"
 "(  (& (^ (>> val 10) (>> val 30)) 7))")
(#(778D875 31C62284 43432EAF 4E504BCF 5163EC3A 7D224C44 D7979E55)
 "(:RESTORE-NSP :DYNAMIC-EXTENT :TAGBODY :BLOCK :UNWIND-PROTECT :CATCH :SPECIAL-BIND)"
 "(  (& (- (>> val 4) (>> val 25)) 7))")
(#(778D875 31C62284 4E504BCF 5163EC3A 7D224C44 D7979E55)
 "(:DYNAMIC-EXTENT :TAGBODY :BLOCK :UNWIND-PROTECT :CATCH :SPECIAL-BIND)"
 "(  (& (+ (>> val 2) (>> val 14)) 7))")
(#(778D875 31C62284 4E504BCF 7D224C44 D7979E55)
 "(:DYNAMIC-EXTENT :UNWIND-PROTECT :CATCH :TAGBODY :BLOCK)"
 "(  (& (+ (>> val 2) (>> val 14)) 7))")
(#(790E4AF 73E1E633 7A03BEDF 8E8B60F0 9D81B113 C3EABF48 C65B82DD C97CFF28 D8C1EE02 F11FE118 FBADBE01)
 "(:PURE :INITIAL-OFFSET :NAMED :TYPE :PRINT-OBJECT :PRINT-FUNCTION :INCLUDE :PREDICATE :COPIER :CONSTRUCTOR :CONC-NAME)"
 "((let ((tab #a((8) (unsigned-byte 8) 2 0 11 0 0 0 8 2)))
  (let ((b (& (>> val 2) #x7)))
   (let ((a (>> (<< val 5) 29)))
    (^ a (aref tab b))))))")
(#(790E4AF 73E1E633 8E8B60F0 9D81B113 C3EABF48 C65B82DD C97CFF28 D8C1EE02 F11FE118 FBADBE01)
 "(:PURE :INITIAL-OFFSET :TYPE :PRINT-OBJECT :PRINT-FUNCTION :INCLUDE :PREDICATE :COPIER :CONSTRUCTOR :CONC-NAME)"
 "((let ((tab #a((8) (unsigned-byte 8) 0 8 13 5 0 2 3 0)))
  (let ((b (& (>> val 3) #x7)))
   (let ((a (>> (<< val 31) 29)))
    (^ a (aref tab b))))))")
(#(790E4AF 73E1E633 8E8B60F0 C3EABF48 C65B82DD C97CFF28 D8C1EE02 F11FE118 FBADBE01)
 "#(:INCLUDE :INITIAL-OFFSET :PURE :TYPE :CONC-NAME :COPIER :PREDICATE :PRINT-FUNCTION :PRINT-OBJECT)"
 "((let ((tab #a((8) (unsigned-byte 8) 0 8 0 5 0 2 3 0)))
  (let ((b (& (>> val 3) #x7)))
   (let ((a (>> (<< val 31) 29)))
    (^ a (aref tab b))))))")
(#(7BE111A 7D24BA2D 7E4DD5CC 9DFE1B14 FE1CE099)
 "(:ALLOW-OTHER-KEYS :FAST :BODY :INTO :RESULT)"
 "(  (& (+ (>> val 6) (>> val 29)) 7))")
(#(7C63BDA FBB93BA 1694A6AB 38C33399 7D21904E A8F05515 B3FF677B BD918462 D6832FDB)
 "(SB-VM::COMPLEX-SINGLE-REG SB-VM::COMPLEX-DOUBLE-REG SB-VM::DOUBLE-REG SB-VM::SINGLE-REG SB-VM::DESCRIPTOR-REG SB-VM::SAP-REG SB-VM::SIGNED-REG SB-VM::UNSIGNED-REG SB-VM::ANY-REG)"
 "((let ((tab #a((8) (unsigned-byte 8) 12 0 3 0 3 5 2 0)))
  (let ((b (& (>> val 5) #x7)))
   (let ((a (>> (<< val 31) 29)))
    (^ a (aref tab b))))))")
(#(7F188EA 14D62A9E 1D2A7BC0 384E6267 5C2FB790 7B72109D 7E4DD5CC 9DFBD609 BDE7A1BC C915AED8 E3105BAD E68A8E38 F8CFBF41)
 "(:ALLOW-OTHER-KEYS :HANDLED-CONDITIONS :ORIGINAL-SOURCE-PATH :INITIALIZED :FORMAT-ARGS :PATH :FILE-POSITION :FILE-NAME :CONTEXT :ORIGINAL-FORM-STRING :ORIGINAL-FORM :%SOURCE :%ENCLOSING-SOURCE)"
 "((let ((tab #a((8) (unsigned-byte 8) 0 13 4 0 0 15 11 0)))
  (let ((b (& val #x7)))
   (let ((a (>> val 29)))
    (^ a (aref tab b))))))")
(#(7FAC318 200845D2 25A587A6 326AE117 36CF9AC4 3A0738E7 3B78808A 3FDD58BD 5324EAA1 56EBCD25 5B64330B 5D043D7B 6043C540 616E0E34
   6AA7D08C 6C16ABD3 6C7E1410 7A38389C 7BEB14F8 80CE8459 894E975D 9F1BBBF7 A8249CA2 ADA15E82 B5558FF2 BE9931C5 C113CECD
   C7E908A7 D6D8A870 DCF9423A FCF00468)
 "((:O . 0) (:NO . 1) (:B . 2) (:NAE . 2) (:C . 2) (:AE . 3) (:NB . 3) (:NC . 3) (:EQ . 4) (:E . 4) (:Z . 4) (:NE . 5) (:NZ . 5) (:BE . 6) (:NA . 6) (:A . 7) (:NBE . 7) (:S . 8) (:NS . 9) (:P . 10) (:PE . 10) (:PO . 11) (:NP . 11) (:L . 12) (:NGE . 12) (:GE . 13) (:NL . 13) (:LE . 14) (:NG . 14) (:G . 15) (:NLE . 15))"
 "((let ((tab #a((16) (unsigned-byte 8) 15 0 1 0 18 31 7 18 0 31 31 28 16 28 25 0)))
  (let ((b (& (>> val 7) #xf)))
   (let ((a (>> (<< val 7) 28)))
    (^ a (aref tab b))))))")
(#(819C48B 441D6918 5EF1B3BB 7E4DD5CC B4F08349 E4E46523)
 "(:ALLOW-OTHER-KEYS :HIGH :LOW :COMPLEXP :FORMAT :CLASS)"
 "(  (& (^ (>> val 1) (>> val 17)) 7))")
(#(87C7B06 130E0A01 47AA1C83 7C2C9DA2)
 "((:NEAREST . 0) (:ZERO . 3) (:POSITIVE-INFINITY . 1) (:NEGATIVE-INFINITY . 2))"
 "(  (& (>> val 7) 3) )")
(#(882F110 32FCC81D 3325A30C B7E73A9B ECB1338F FB6863DF)
 "(SB-VM::DISPLACED-FROM SB-VM::DISPLACED-P SB-VM::DISPLACEMENT SB-VM::ELEMENTS FILL-POINTER SB-VM::DATA)"
 "(  (& (- (>> val 6) (>> val 26)) 7))")
(#(89D3B94 4039E15B 48502FB7 50269B22 6E987445 7AFAD4FD C5D9479F C8A25DB2 E45D7F1B)
 "(DEFSTRUCT-SLOT-DESCRIPTION DEFSTRUCT-DESCRIPTION SB-C::DEBUG-SOURCE SB-C::COMPILED-DEBUG-INFO SB-C::DEBUG-INFO SB-C:DEFINITION-SOURCE-LOCATION CONDITION STRUCTURE-OBJECT T)"
 "((let ((tab #a((8) (unsigned-byte 8) 0 8 5 3 4 0 7 0)))
  (let ((b (& (>> val 12) #x7)))
   (let ((a (>> (<< val 5) 29)))
    (^ a (aref tab b))))))")
(#(90EDB7B 1FDE90F6 25164A63 44455F7E 50F5AB12 7E4DD5CC B800E558 C3EABF48 CC9ABF76)
 "(:ALLOW-OTHER-KEYS :CASE :DEFAULTS :VERSION :TYPE :NAME :DIRECTORY :DEVICE :HOST)"
 "((let ((tab #a((8) (unsigned-byte 8) 0 11 2 1 0 2 7 0)))
  (let ((b (>> val 29)))
   (let ((a (& val #x7)))
    (^ a (aref tab b))))))")
(#(90EDB7B 1FDE90F6 25164A63 50F5AB12 82FDFC4E B800E558 C3EABF48)
 "(:VERSION :TYPE :NAME :DIRECTORY :DEVICE :HOST NIL)"
 "(  (& (- (>> val 2) (>> val 10)) 7))")
(#(911164C C88666B 2577E983 2F96D56B 3FEA2955 41F42BDE 49E6CD92 79709755 7E4DD5CC 81748681 8DBB3B18 913D62D2 A16520EC AAB814A7
   B86B8F68 BA14BD32 C1D4C246 C9A0837E D8F2B7EA DAF1A78D)
 "(:ALLOW-OTHER-KEYS :ENVIRONMENT-CACHE :XREFS :INFO :FLAG :COMPONENT :DOMINATOR :LOOP-NEXT :LOOP :OUT :IN :KILL :FLAGS :PREV :NEXT :LAST :START :SUCC :PRED :NUMBER)"
 "((let ((tab #a((16) (unsigned-byte 8) 0 0 0 16 0 1 31 26 7 0 3 1 0 28 1 0)))
  (let ((b (& val #xf)))
   (let ((a (>> val 28)))
    (^ a (aref tab b))))))")
(#(9D37842 DDAD4B3 1B8EF4AF 5B37F581 5B94F729 6FCDFF82 7E4DD5CC 809C5A3D 80C55064 82DB1CB3 87A7A8BD A490A9F2 A85C97D2 B874FF56
   C2D707AB C5998C8B CF4536C9 D57549C5 D7B83BC9 FCDE4902 FD45EC0C)
 "(:ALLOW-OTHER-KEYS :EXTERNALLY-CHECKABLE-TYPE :FOLDER :ANNOTATION :CALL-TYPE-DERIVER :RESULT-ARG :PREDICATE-TYPE :TEMPLATES :EQUALITY-CONSTRAINT :CONSTRAINT-PROPAGATE-IF :CONSTRAINT-PROPAGATE-RESULT :CONSTRAINT-PROPAGATE-BACK :CONSTRAINT-PROPAGATE :STACK-ALLOCATE-RESULT :IR2-HOOK :IR2-CONVERT :LTN-ANNOTATE :OPTIMIZER :DERIVE-TYPE :TRANSFORMS :ATTRIBUTES)"
 "((let ((tab #a((16) (unsigned-byte 8) 15 0 13 0 0 12 1 0 29 0 0 14 0 16 0 20)))
  (let ((b (& (>> val 4) #xf)))
   (let ((a (>> (<< val 7) 28)))
    (^ a (aref tab b))))))")
(#(9D37842 DDAD4B3 1B8EF4AF 7E4DD5CC 80C55064 C029BD69 D7B83BC9 FCDE4902)
 "(:ALLOW-OTHER-KEYS :FOLDER :ANNOTATION :CALL-TYPE-DERIVER :OVERWRITE-FNDB-SILENTLY :RESULT-ARG :OPTIMIZER :DERIVE-TYPE)"
 "(  (& (+ (>> val 3) (>> val 26)) 7))")
(#(A35FC90 54A4D084 65F63C89 6892DBB7 B6F1B432 D692DDF5 F9AC02F3)
 "(LOGICAL-PATHNAME PATHNAME SB-IMPL::FILL-POINTER-OUTPUT-STREAM SB-IMPL::STRING-OUTPUT-STREAM SB-IMPL::STRING-INPUT-STREAM FD-STREAM ANSI-STREAM)"
 "(  (& (^ (>> val 2) (>> val 7)) 7))")
(#(A35FC90 54A4D084 65F63C89 B6F1B432 F9AC02F3)
 "(SB-IMPL::FILL-POINTER-OUTPUT-STREAM SB-IMPL::STRING-OUTPUT-STREAM SB-IMPL::STRING-INPUT-STREAM FD-STREAM ANSI-STREAM)"
 "(  (& val 7))")
(#(A6BE71B 1816EA31 3146F72B 4F02F520 55E45869 741F3223 B5451A4C D463BE7A)
 "#(:RNE :RTZ :RDN :RUP :RMM :UNUSED1 :UNUSED2 :DYNAMIC)"
 "(  (& (+ (>> val 4) (>> val 23)) 7))")
(#(A96D793 5DB2EF1B 64688A38 71A4657D 7C678985 8D027A6B 965CD62A 9CB7F4E3 A0FAB3A5 B690AE2E CD22F006 D1146057 E0A39FB8)
 "(:JUMP-TABLE :FIXUP :COMPLEX-DOUBLE-FLOAT :COMPLEX-SINGLE-FLOAT :DOUBLE-FLOAT :SINGLE-FLOAT :CHARACTER :BASE-CHAR :OWORD :QWORD :DWORD :WORD :BYTE)"
 "((let ((tab #a((8) (unsigned-byte 8) 14 0 4 0 5 2 12 10)))
  (let ((b (& (>> val 2) #x7)))
   (let ((a (>> (<< val 5) 29)))
    (^ a (aref tab b))))))")
(#(A96D793 64688A38 8D027A6B 9CB7F4E3 B690AE2E D1146057 E0A39FB8)
 "(:JUMP-TABLE :FIXUP :OWORD :QWORD :DWORD :WORD :BYTE)"
 "(  (& (- (>> val 2) (>> val 30)) 7))")
(#(AA421F8 389F67F6 786F215B B3F4A1A1 D692DDF5 F5EA1D35)
 "(COMPILED-FUNCTION HASH-TABLE PACKAGE PATHNAME RANDOM-STATE READTABLE)"
 "(  (& (^ (>> val 1) (>> val 4)) 7))")
(#(AA421F8 389F67F6 B3F4A1A1 D692DDF5 F5EA1D35)
 "(HASH-TABLE PACKAGE PATHNAME RANDOM-STATE READTABLE)"
 "(  (& (^ val (>> val 17)) 7))")
(#(B0CCF3A BACE279 161EF39E 22F0D544 29031807 4CD4B181 57A4C8AB 59A85626 5BCC1739 5C8F1654 61C0A71B 635CAD88 6640EC20 6C16ABD3
   70394B64 75080932 773A9B54 7A148738 7BEB14F8 7EC5A1CE 926D9EB5 92A0A36A A8BB79A8 A8BE1B93 B5558FF2 B5CE1611 BE665566
   BF709B2B DCF9423A F4569369 FB387BEC FCF00468)
 "#(:EQ :LT :LE :UNORD :NEQ :NLT :NLE :ORD :EQ_UQ :NGE :NGT :FALSE :NEQ_OQ :GE :GT :TRUE :EQ_OS :LT_OQ :LE_OQ :UNORD_S :NEQ_US :NLT_UQ :NLE_UQ :ORD_S :EQ_US :NGE_UQ :NGT_UQ :FALSE_OS :NEQ_OS :GE_OQ :GT_OQ :TRUE_US)"
 "((let ((tab #a((16) (unsigned-byte 8) 1 21 21 12 15 31 19 9 0 27 31 31 4 0 4 0)))
  (let ((b (& val #xf)))
   (let ((a (>> (<< val 7) 28)))
    (^ a (aref tab b))))))")
(#(B3AD09A 10ACE44E 763F1FFB B6EC8FEB D5A4925F DCE23130)
 "(INTEGER BIGNUM SB-VM::UNSIGNED-BYTE-63 SB-VM::SIGNED-BYTE-64 FIXNUM SB-VM::POSITIVE-FIXNUM)"
 "(  (& (- (>> val 1) (>> val 14)) 7))")
(#(B3AD09A 10ACE44E 763F1FFB B6EC8FEB D5A4925F DCE23130 FB12CF33)
 "(SB-VM::POSITIVE-FIXNUM FIXNUM INTEGER BIGNUM SB-VM::UNSIGNED-BYTE-63 SB-VM::UNSIGNED-BYTE-64 SB-VM::SIGNED-BYTE-64)"
 "(  (& (- (>> val 1) (>> val 14)) 7))")
(#(B3AD09A 5DB2EF1B 71A4657D 728F28C5 965CD62A A0FAB3A5 D5A4925F FB12CF33)
 "(SYSTEM-AREA-POINTER SB-VM::UNSIGNED-BYTE-63 SB-VM::UNSIGNED-BYTE-64 SB-VM::SIGNED-BYTE-64 COMPLEX-SINGLE-FLOAT COMPLEX-DOUBLE-FLOAT SINGLE-FLOAT DOUBLE-FLOAT)"
 "(  (& (^ (>> val 1) (>> val 21)) 7))")
(#(B414EE0 1473BF8C 7E4DD5CC 96679819 C3EABF48 FE253C4F FE4E8E9A)
 "(:ALLOW-OTHER-KEYS :ENCLOSING-OBJECT :VALUE :SLOT-NAME :INDEX :OBJECT :TYPE)"
 "(  (& (- val (>> val 23)) 7))")
(#(B414EE0 164A583D 4214F49C 543DAB03 6731B27F 708311D1 75BE94BF 7E4DD5CC 81748681 845FE436 8DBB3B18 94DAB903 BDE7A1BC CED537B8
   D8F2B7EA F23C413D)
 "(:ALLOW-OTHER-KEYS :SILENT-CONFLICT :CONTEXT :VALUE :%TYPE-CHECK :TYPE-TO-CHECK :ASSERTED-TYPE :LVAR :DERIVED-TYPE :TAIL-P :SOURCE-PATH :LEXENV :PREV :NEXT :REOPTIMIZE :NUMBER)"
 "((let ((tab #a((8) (unsigned-byte 8) 13 0 8 2 12 11 0 12)))
  (let ((b (& (>> val 8) #x7)))
   (let ((a (>> (<< val 5) 29)))
    (^ a (aref tab b))))))")
(#(B414EE0 164A583D 4214F49C 543DAB03 6731B27F 7E4DD5CC 80D6A04E 81748681 845FE436 8DBB3B18 94DAB903 D8F2B7EA)
 "(:ALLOW-OTHER-KEYS :VALUE :VAR :LVAR :DERIVED-TYPE :TAIL-P :SOURCE-PATH :LEXENV :PREV :NEXT :REOPTIMIZE :NUMBER)"
 "((let ((tab #a((8) (unsigned-byte 8) 0 0 14 13 0 0 12 5)))
  (let ((b (& (>> val 7) #x7)))
   (let ((a (>> (<< val 5) 29)))
    (^ a (aref tab b))))))")
(#(B414EE0 164A583D 4214F49C 543DAB03 6731B27F 7E4DD5CC 81748681 845FE436 8DBB3B18 94DAB903 9B0ED14E D8F2B7EA FA6E74B3)
 "(:ALLOW-OTHER-KEYS :NLX-INFO :VALUE :ENTRY :LVAR :DERIVED-TYPE :TAIL-P :SOURCE-PATH :LEXENV :PREV :NEXT :REOPTIMIZE :NUMBER)"
 "((let ((tab #a((8) (unsigned-byte 8) 0 12 5 11 13 2 3 10)))
  (let ((b (& (>> val 7) #x7)))
   (let ((a (>> (<< val 31) 29)))
    (^ a (aref tab b))))))")
(#(B414EE0 3B3832EC 82FDFC4E A256D8C6 E3479BD2)
 "(:KEY-OR-VALUE :KEY-AND-VALUE :VALUE :KEY NIL)"
 "(  (& (+ (>> val 9) (>> val 16)) 7))")
(#(B414EE0 3CA58D19 47A8F1BE 7E4DD5CC 8A6154E7 C3EABF48 C67DC11A CA5014D5 FE5F3DA8)
 "(:ALLOW-OTHER-KEYS :FIELDS :FIELD :USE-LABEL :SIGN-EXTEND :PRINTER :PREFILTER :TYPE :VALUE)"
 "((let ((tab #a((8) (unsigned-byte 8) 0 0 14 0 0 4 7 0)))
  (let ((b (& val #x7)))
   (let ((a (>> val 29)))
    (^ a (aref tab b))))))")
(#(B74EA80 2315A63C 285D29BD 46CDAA6D 4913800D 5597FB3D 5708B5D3 708C7CD6 74191541 74477BB4 7E4DD5CC A3B42EB2 A5860C2B E41ED3F1
   E61904A7 ED178322 F68E2BEE)
 "(:ALLOW-OTHER-KEYS :SHARE-BLOCK-P :BLOCK-NAME :KEYWORD-BITS :N-OPTIONAL :MIN-ARGS :N-BOUND-VARS :SPECIALS :SEXPR :VALUES :SPECIAL-B :SYMBOLS :TYPE-RESTRICTIONS :EXTRA-TYPECHECKS :BINDING-TYPECHECKS :%POLICY :DECLARATIONS)"
 "((let ((tab #a((16) (unsigned-byte 8) 14 0 0 24 14 13 10 0 0 1 10 0 0 7 3 12)))
  (let ((b (& (>> val 5) #xf)))
   (let ((a (>> (<< val 31) 28)))
    (^ a (aref tab b))))))")
(#(B855F24 23AFA2C0 2B09B688 32B07AAC 51F619C0 5A6B45E6 5AAEBDB1 68D26CEA 75FBBDA9 7E4DD5CC 8D2AB8C8 8DBB3B18 971BB2D0 97ECB0B8
   AD4F8992 C3EABF48 D8F2B7EA D9A3A394 E01F531E E9A96A46 EB165265)
 "(:ALLOW-OTHER-KEYS :VERTEX :ENVIRONMENT :COST :OFFSET :SC :SAVE-TN :CURRENT-CONFLICT :GLOBAL-CONFLICTS :LOCAL-CONFLICTS :LOCAL-NUMBER :LOCAL :NEXT* :WRITES :READS :NEXT :LEAF :TYPE :PRIMITIVE-TYPE :KIND :NUMBER)"
 "((let ((tab #a((16) (unsigned-byte 8) 31 0 0 1 12 13 1 7 0 13 13 22 17 0 30 0)))
  (let ((b (& (>> val 2) #xf)))
   (let ((a (>> (<< val 7) 28)))
    (^ a (aref tab b))))))")
(#(BD8A937 50CA06EC 5DB2EF1B 71A4657D 7499061E 965CD62A A0FAB3A5 B9BCE917 CC2370C1 CF05BC65)
 "(SIMD-PACK-256-DOUBLE SIMD-PACK-256-SINGLE SIMD-PACK-256-INT SIMD-PACK-DOUBLE SIMD-PACK-SINGLE SIMD-PACK-INT COMPLEX-DOUBLE-FLOAT COMPLEX-SINGLE-FLOAT DOUBLE-FLOAT SINGLE-FLOAT)"
 "((let ((tab #a((8) (unsigned-byte 8) 0 14 13 0 5 0 3 4)))
  (let ((b (& val #x7)))
   (let ((a (>> val 29)))
    (^ a (aref tab b))))))")
(#(C88666B 5ABBB036 BBA372CA DAF1A78D)
 "(:IN :COPY :OUT :IN-OUT)"
 "(  (>> val 30) )")
(#(C8B9AD5 792DC15C 7E4DD5CC 856E29CB B1085B75)
 "(:ALLOW-OTHER-KEYS :UNWINNAGE-FUN :LOSSAGE-FUN :RESULT-TEST :ARGUMENT-TEST)"
 "(  (& (>> val 21) 7))")
(#(C971158 1BBBA6D2 4153B09A 488BFA28 7E4DD5CC A641503F C447D681)
 "(:ALLOW-OTHER-KEYS :IMMEDIATE-TESTED :VALUE-TN-REF :COMPUTE-TEMP :LOAD-WIDETAG :DROP-THROUGH :EXCEPT)"
 "(  (& (>> val 18) 7))")
(#(CD31CAB 7E4DD5CC 81CDF6F7 8DC2A923 A87D60AD)
 "(:ALLOW-OTHER-KEYS :SYSTEMP :OVERFLOW :STACK-ALLOCATE-P :FLAG-TN)"
 "(  (& (+ (>> val 2) (>> val 12)) 7))")
(#(CE71FAA 25164A63 68D6D579 7E4DD5CC D6E7D73B F5EA1D35)
 "(:ALLOW-OTHER-KEYS :CONTEXTS :FUN-MAP :PACKAGE :SOURCE :NAME)"
 "(  (& (^ (>> val 1) (>> val 23)) 7))")
(#(D35ED64 12214F00 7E4DD5CC 8458248D B16E862F ECB1338F FD11C553 FDE111BA)
 "(:ALLOW-OTHER-KEYS :DISPLACED-INDEX-OFFSET :DISPLACED-TO :FILL-POINTER :ADJUSTABLE :INITIAL-CONTENTS :INITIAL-ELEMENT :ELEMENT-TYPE)"
 "(  (& (- (>> val 4) (>> val 22)) 7))")
(#(D3D3B9B 1705B61C 6C7E1410 7A38389C)
 "(SB-C::VAL SB-C::NEWVAL SB-C::A SB-C::B)"
 "(  (& (>> val 9) 3) )")
(#(D581AC8 2F89992E 7E4DD5CC 851D3580 AD34CD60 E9B91675 EC5883B1)
 "(:ALLOW-OTHER-KEYS :SECTION-START-LINE :SUFFIX-LENGTH :PREFIX-LENGTH :PER-LINE-PREFIX-END :SECTION-COLUMN :START-COLUMN)"
 "(  (& (- val (>> val 29)) 7))")
(#(DC1A38C 5368D489 58402903 7E4DD5CC E32878E5 E4E46523 ECEAC1AA FDE111BA)
 "(:ALLOW-OTHER-KEYS :OVERLAPPED :CLASS :EXTERNAL-FORMAT :IF-DOES-NOT-EXIST :IF-EXISTS :ELEMENT-TYPE :DIRECTION)"
 "(  (& (+ (>> val 2) (>> val 29)) 7))")
(#(DC1A38C 58402903 7E4DD5CC E32878E5 E4E46523 ECEAC1AA FDE111BA)
 "(:ALLOW-OTHER-KEYS :CLASS :EXTERNAL-FORMAT :IF-DOES-NOT-EXIST :IF-EXISTS :ELEMENT-TYPE :DIRECTION)"
 "(  (& (- (>> val 3) (>> val 4)) 7))")
(#(DD98FC2 321B4470 65DBD9C4 D312FF46)
 "(:LIVE :READ-ONLY :WRITE :READ)"
 "(  (& (>> val 1) 3) )")
(#(E353302 1B054DAD 32C229AB 68D86CC1 C789C859 FF98FC30)
 "(SB-VM::NOISE SB-VM::IMMEDIATE-CONSTANT CONSTANT SB-VM::STACK SB-VM::FLOAT-REGISTERS SB-VM::REGISTERS)"
 "(  (& (- val (>> val 28)) 7))")
(#(E353302 3CB93D68 55B0F9E6 A6F460C5 F3C0A986)
 "(:STACK :UNUSED :UNKNOWN :FIXED :DELAYED)"
 "(  (& (- (>> val 3) (>> val 29)) 7))")
(#(E712E9F 21EEAED8 7E4DD5CC A6DB913C BCB602BB CBC8EE4C D1B31032 DA0BA737 E2AA03BE)
 "(:ALLOW-OTHER-KEYS :MAKUNBOUND :BOUNDP :WRITER :READER :LOCATION :ALLOCATION :TYPECHECK :SLOTD)"
 "((let ((tab #a((8) (unsigned-byte 8) 0 0 14 5 0 0 0 4)))
  (let ((b (& val #x7)))
   (let ((a (>> val 29)))
    (^ a (aref tab b))))))")
(#(EA22CE8 7E4DD5CC A256D8C6 C122AEC5 C1D4C246 FCC84496)
 "(:ALLOW-OTHER-KEYS :INITIAL-VALUE :END :START :FROM-END :KEY)"
 "(  (& (- (>> val 2) (>> val 9)) 7))")
(#(F1759B7 9C1CB8B3 E380B278 F0C8F231)
 "(:CAPITALIZE-FIRST :CAPITALIZE :DOWNCASE :UPCASE)"
 "(  (& (>> val 18) 3) )")
(#(F6A9212 3F88487E 58402903 6609CAA4 778123B0 7E4DD5CC A3FA5392 AE9A8F3A D692DDF5)
 "(:ALLOW-OTHER-KEYS :STYLE-WARNING-TRACKER :SUBFORMS :POSITIONS :FORMS :WRITE-DATE :PATHNAME :EXTERNAL-FORMAT :TRUENAME)"
 "((let ((tab #a((8) (unsigned-byte 8) 8 0 0 0 4 0 2 7)))
  (let ((b (& (>> val 3) #x7)))
   (let ((a (>> (<< val 5) 29)))
    (^ a (aref tab b))))))")
(#(F8ABEE3 4B574AE2 4F94B5E7 4FD472D8 714D6B00 88BA357D 8A6265B8 B313FB62 C0D75980 C888E122 D2205031 D37E3DCA DB3125F9 DE352140
   E555AFBC)
 "#(((:TYPE SB-C:JUMP-TABLE) (:TYPE SB-C::CDYNAMIC-EXTENT) (:TYPE SB-C::COMBINATION) (:TYPE SB-C::ENCLOSE) (:TYPE EXIT) (:TYPE DELAY) (:TYPE SB-C::ARRAY-INDEX-CAST) (:TYPE CAST) (:TYPE SB-C::MV-COMBINATION) (:TYPE SB-C::ENTRY) (:TYPE SB-C::CIF) (:TYPE SB-C::CRETURN)) ((:TYPE SB-C::REF)) ((:TYPE SB-C::CSET)) ((:TYPE BIND)))"
 "((let ((tab #a((8) (unsigned-byte 8) 2 14 0 8 8 5 4 15)))
  (let ((b (& (>> val 15) #x7)))
   (let ((a (>> (<< val 5) 29)))
    (^ a (aref tab b))))))")
(#(F8ABEE3 4B574AE2 4F94B5E7 4FD472D8 714D6B00 88BA357D 8A6265B8 B313FB62 C0D75980 C888E122 D2205031 D37E3DCA DB3125F9 DE352140
   E555AFBC FCD93907)
 "#(((:TYPE SB-C::REF)) ((:TYPE SB-C::CIF)) ((:TYPE SB-C:JUMP-TABLE)) ((:TYPE SB-C::COMBINATION) (:TYPE SB-C::MV-COMBINATION) (:TYPE SB-C::BASIC-COMBINATION)) ((:TYPE BIND)) ((:TYPE EXIT)) ((:TYPE SB-C::ENTRY)) ((:TYPE SB-C::CRETURN)) ((:TYPE SB-C::CSET)) ((:TYPE DELAY) (:TYPE SB-C::ARRAY-INDEX-CAST) (:TYPE CAST)) ((:TYPE SB-C::ENCLOSE)) ((:TYPE SB-C::CDYNAMIC-EXTENT)))"
 "((let ((tab #a((8) (unsigned-byte 8) 0 13 0 0 12 14 8 3)))
  (let ((b (& (>> val 15) #x7)))
   (let ((a (>> (<< val 5) 29)))
    (^ a (aref tab b))))))")
(#(FA27DCE 40ACECF7 8FA1FE79 92586CF4 969A8B82 9D5025AF B9E517EC C3EABF48)
 "(:ISSUE :SYSTEM-CLASS :TYPE :GLOSSARY :SECTION :MACRO :SPECIAL-OPERATOR :FUNCTION)"
 "(  (& (^ (>> val 5) (>> val 29)) 7))")
(#(FA27DCE 4814BD7C 92586CF4 B3CD2755 CD2DF002)
 "(:SECTION :FUNCTION :GENERIC-FUNCTION :INITIALIZATION :READERS)"
 "(  (& (>> val 15) 7))")
(#(FA27DCE 6B6ACBC6 7DBFABF9 A8694C40)
 "(:SECTION-RELATIVE :LINE-RELATIVE :SECTION :LINE)"
 "(  (& (>> val 2) 3) )")
(#(FBB93BA 1694A6AB 7D21904E A8F05515 BD918462)
 "(SB-VM::SAP-REG SB-VM::SIGNED-REG SB-VM::UNSIGNED-REG SB-VM::ANY-REG SB-VM::DESCRIPTOR-REG)"
 "(  (& (- val (>> val 2)) 7))")
(#(FFEC5B5 7BBEAE7B B31D0A7A E66299E9)
 "(:UNSAFE-DEFAULT :SAFE-DEFAULT :UNBOUND :TRAP)"
 "(  (>> val 30) )")
(#(1064681C 201B535C 3B6BD87E 5D8EB91C 6403DABF 7E4DD5CC)
 "(:ALLOW-OTHER-KEYS :COLINC :COLNUM :RELATIVEP :SECTIONP :POSN)"
 "(  (& (^ (>> val 1) (>> val 27)) 7))")
(#(10A4844C 7E4DD5CC 9CF25BBD C1D4C246 FCC84496)
 "(:ALLOW-OTHER-KEYS :AS-DIRECTORY :JUNK-ALLOWED :END :START)"
 "(  (& (- (>> val 2) (>> val 6)) 7))")
(#(10A4844C 7E4DD5CC AF616594 C1D4C246 FCC84496)
 "(:ALLOW-OTHER-KEYS :JUNK-ALLOWED :RADIX :END :START)"
 "(  (& (- (>> val 3) (>> val 25)) 7))")
(#(10ACE44E 205367CA 2341D8DB 46CC6774 47991116 5597FB3D 5CDDC111 711BEFAB 728F28C5 74748736 965CD62A A0FAB3A5 A2E1D524
   A7E15D52 B734105A C3127E24)
 "#(SB-ALIEN::ROOT INTEGER BOOLEAN ENUM FLOAT SINGLE-FLOAT DOUBLE-FLOAT SYSTEM-AREA-POINTER ALIEN-VALUE SB-ALIEN::POINTER SB-ALIEN::MEM-BLOCK ARRAY SB-ALIEN::RECORD SB-ALIEN::FUN VALUES C-STRING)"
 "((let ((tab #a((8) (unsigned-byte 8) 12 12 0 0 14 13 12 2)))
  (let ((b (& (>> val 19) #x7)))
   (let ((a (>> (<< val 5) 29)))
    (^ a (aref tab b))))))")
(#(10ACE44E 2CFE05E6 3539E037 372E43BC 652FED0C 7C31AE8F 7C678985 82FDFC4E 965CD62A A0FAB3A5 B64902BB B6EC8FEB C8A25DB2
   CD22F006 FF5C21D6)
 "(NIL COMPLEX INTEGER MOD SINGLE-FLOAT DOUBLE-FLOAT SIGNED-BYTE UNSIGNED-BYTE FIXNUM BIT EXTENDED-CHAR CHARACTER STANDARD-CHAR BASE-CHAR T)"
 "((let ((tab #a((8) (unsigned-byte 8) 0 12 8 13 12 7 0 3)))
  (let ((b (& (>> val 11) #x7)))
   (let ((a (>> (<< val 5) 29)))
    (^ a (aref tab b))))))")
(#(10ACE44E 3539E037 763F1FFB 965CD62A A0FAB3A5 AC7D417F B6EC8FEB E0A39FB8 FEAFF6CF)
 "#(FIXNUM SINGLE-FLOAT DOUBLE-FLOAT INTEGER SB-VM:SIGNED-WORD WORD BIGNUM COMPLEX RATIO)"
 "((let ((tab #a((8) (unsigned-byte 8) 5 0 0 5 0 13 3 0)))
  (let ((b (& val #x7)))
   (let ((a (>> val 29)))
    (^ a (aref tab b))))))")
(#(10ACE44E 74748736 82FDFC4E 971A1DF1)
 "(NIL FLOAT RATIONAL INTEGER)"
 "(  (& (>> val 12) 3) )")
(#(10ACE44E 74748736 965CD62A 971A1DF1 A0FAB3A5 A2195041)
 "(REAL FLOAT DOUBLE-FLOAT SINGLE-FLOAT RATIONAL INTEGER)"
 "(  (& (>> val 2) 7))")
(#(117B1754 5CE6DF8E 7E4DD5CC 9A7217E8 A3E1D5DD A5BB6459 A6B44606)
 "(:ALLOW-OTHER-KEYS :SLOT-NAMES :METACLASS-CONSTRUCTOR :DD-TYPE :METACLASS-NAME :SUPERCLASS-NAME :CLASS-NAME)"
 "(  (& (+ val (>> val 19)) 7))")
(#(118F10F5 5DB2EF1B 64688A38 7090AB0B 71A4657D 87F4227F 8D027A6B 965CD62A 9CB7F4E3 A0FAB3A5 B690AE2E D1146057 E0A39FB8)
 "(:JUMP-TABLE :COMPLEX-DOUBLE-FLOAT :COMPLEX-SINGLE-FLOAT :DOUBLE-FLOAT :SINGLE-FLOAT :AVX2 :HWORD :SSE :OWORD :QWORD :DWORD :WORD :BYTE)"
 "((let ((tab #a((8) (unsigned-byte 8) 0 13 0 0 2 12 12 11)))
  (let ((b (& (>> val 10) #x7)))
   (let ((a (>> (<< val 5) 29)))
    (^ a (aref tab b))))))")
(#(11A06980 221E3489 25164A63 2AA4982B 336271CA 367D0C61 39216332 398E36A6 6B412252 7E4DD5CC 8DBB3B18 9CFE29F4 A3FEDC32
   B1619E90 C25CE271 CA9FC928 CF6B27C3 D8B891DE)
 "(:ALLOW-OTHER-KEYS :RESERVE-LOCATIONS :ALIGNMENT :NUMBER-STACK-P :MOVE-ARG-VOPS :MOVE-COSTS :MOVE-VOPS :LOAD-COSTS :MOVE-FUNS :SAVE-P :CONSTANT-SCS :ALTERNATE-SCS :OPERAND-SIZE :LOCATIONS :ELEMENT-SIZE :SB :NUMBER :NAME)"
 "((let ((tab #a((16) (unsigned-byte 8) 0 1 0 12 0 0 7 0 0 13 18 7 0 0 29 0)))
  (let ((b (& val #xf)))
   (let ((a (>> val 28)))
    (^ a (aref tab b))))))")
(#(12214F00 7E4DD5CC 8458248D B16E862F ECB1338F FD11C553 FDE111BA)
 "(:ALLOW-OTHER-KEYS :DISPLACED-INDEX-OFFSET :DISPLACED-TO :FILL-POINTER :INITIAL-CONTENTS :INITIAL-ELEMENT :ELEMENT-TYPE)"
 "(  (& (^ (>> val 3) (>> val 27)) 7))")
(#(1222895C 344F26E9 7E4DD5CC DA510BD4 DDD840D5)
 "(:ALLOW-OTHER-KEYS :ERRORP :CLASSIFY-SYMLINKS :DIRECTORIES :FILES)"
 "(  (& (- (>> val 1) (>> val 10)) 7))")
(#(12C4811C 50B431CB 834BCA78 8F6A8805 934E6A73 A1148EC6 DC4D4F5D E8DC3557 F987A176)
 "(SET SB-C::EQUALITY EQL <= >= = > < TYPEP)"
 "((let ((tab #a((8) (unsigned-byte 8) 12 0 0 0 0 5 0 1)))
  (let ((b (& val #x7)))
   (let ((a (>> val 29)))
    (^ a (aref tab b))))))")
(#(12D85B02 47ED28C7 568510D9 82FDFC4E EC8EB822)
 "(NIL :FORTHCOMING-DEFCLASS-TYPE :INSTANCE :DEFINED :PRIMITIVE)"
 "(  (& (+ (>> val 1) (>> val 31)) 7))")
(#(132431BB 1DE6A158 294F39FA 41D84724 449607FC 775AF7A7 7C914DB1 7D224C44 7E4DD5CC 8D9220F2 8DBB3B18 969168E9 B4C67B51
   BA14BD32 C1B40A07 C3EABF48 C80506D7 C9A0837E D3801745 DC2E453B FBB90A17 FCD92448 FE6A9C07)
 "(:ALLOW-OTHER-KEYS :SOURCE-FORM :EQUALITY-CONSTRAINTS-HASH :EQUALITY-CONSTRAINTS :INHERITABLE-CONSTRAINTS :EQL-VAR-CONSTRAINTS :EQ-CONSTRAINTS :CTYPE-CONSTRAINTS :CONSTRAINTS :SPECVAR :ARG-INFO :HOME :FLAGS :SETS :INFO :DYNAMIC-EXTENT :EVER-USED :REFS :WHERE-FROM :DEFINED-TYPE :TYPE :%SOURCE-NAME :NUMBER)"
 "((let ((tab #a((16) (unsigned-byte 8) 0 0 31 0 0 0 11 0 1 14 0 1 31 1 16 24)))
  (let ((b (& (>> val 1) #xf)))
   (let ((a (>> (<< val 7) 28)))
    (^ a (aref tab b))))))")
(#(132431BB 7E4DD5CC A063C516 A0AF8FF9 E068D776)
 "(:ALLOW-OTHER-KEYS :BLOCK-TN :TARGET :SAVE-SP :HOME)"
 "(  (& (- (>> val 4) (>> val 29)) 7))")
(#(1365E54E 25164A63 6636ACD8 7E4DD5CC 95B7F751 EE4BBFD9)
 "(:ALLOW-OTHER-KEYS :PROTOTYPE :LAMBDA-LIST :SIGNEDP :WIDTH :NAME)"
 "(  (& (^ (>> val 2) (>> val 18)) 7))")
(#(1391902F 3D49A6BE 5A162DF6 7E4DD5CC 9610B3E8 9DA85EBA C09BD6A3 DC0014B6 DE2B95D6 DF9931EA EEA3DE9A F598E227 FDAA0EC5)
 "(:ALLOW-OTHER-KEYS :TRACING-STATE :INDIRECTION-TABLE :ALLOC-POINTS :CONSTANT-VECTOR :CONSTANT-TABLE :INTER-FUNCTION-PADDING :ELSEWHERE-LABEL :TEXT-ORIGIN-LABEL :DATA-ORIGIN-LABEL :ELSEWHERE-SECTION :CODE-SECTION :DATA-SECTION)"
 "((let ((tab #a((8) (unsigned-byte 8) 14 0 12 0 5 9 0 4)))
  (let ((b (& val #x7)))
   (let ((a (>> (<< val 5) 29)))
    (^ a (aref tab b))))))")
(#(13EC6C62 2D462586 424C8991 7E4DD5CC 8155FDDA 8A779204)
 "(:ALLOW-OTHER-KEYS :INTERACTIVE-THREADS-QUEUE :INTERACTIVE-THREADS :THREADS :LOCK :NEW-ENROLLEES)"
 "(  (& (+ (>> val 1) (>> val 8)) 7))")
(#(1469032E 19627350 21BB63FF 26619DE3 3932B57B 5E27768B 5F494B7F 656564B4 668E03DD 67803F22 702B2006 7C968C45 C3C1E2DD
   C3EABF48 CBE11D68 CE38123D E67BE4DB EA8C218C)
 "(DECLARATION DEPRECATED MAYBE-INLINE NOTINLINE INLINE ENABLE-PACKAGE-LOCKS DISABLE-PACKAGE-LOCKS UNMUFFLE-CONDITIONS MUFFLE-CONDITIONS OPTIMIZE END-BLOCK START-BLOCK FREEZE-TYPE FTYPE TYPE ALWAYS-BOUND GLOBAL SPECIAL)"
 "((let ((tab #a((16) (unsigned-byte 8) 0 13 1 7 13 0 1 1 7 0 7 18 0 12 25 0)))
  (let ((b (& (>> val 2) #xf)))
   (let ((a (>> (<< val 7) 28)))
    (^ a (aref tab b))))))")
(#(1469032E 19627350 3932B57B 656564B4 67803F22 C3C1E2DD C3EABF48 CE38123D E67BE4DB)
 "(MAYBE-INLINE NOTINLINE INLINE TYPE FTYPE END-BLOCK START-BLOCK GLOBAL SPECIAL)"
 "((let ((tab #a((8) (unsigned-byte 8) 0 5 8 0 2 3 0 0)))
  (let ((b (& (>> val 17) #x7)))
   (let ((a (>> (<< val 31) 29)))
    (^ a (aref tab b))))))")
(#(1473BF8C 20BFF854 25164A63 413E277F 7E4DD5CC 97ECB0B8 9B206D3E)
 "(:ALLOW-OTHER-KEYS :SIZE-ALIGNMENT :SIZE-INCREMENT :INDEX :SIZE :KIND :NAME)"
 "(  (& (- (>> val 1) (>> val 4)) 7))")
(#(14D82EA9 32B8DB71 75241F71 A3C11751 D2A05CC3)
 "(REST FIRST CDR CAR AREF)"
 "(  (& (^ (>> val 6) (>> val 10)) 7))")
(#(15432F17 4C25CEB9 D9F0FE17 F49146D7)
 "(:FORCE :ERROR :WARN :PUNT)"
 "(  (& (>> val 20) 3) )")
(#(15BC6795 3A0738E7 7A38389C EED2914F)
 "#(:B :H :S :D)"
 "(  (& (>> val 3) 3) )")
(#(15CA9185 26C1420D 50B17B49 7E4DD5CC B5569C34 BF470720 C0AA89EA CEDEE978 CF6B27C3 DB3BA8E3 DEF3601F F3CE597E)
 "(:ALLOW-OTHER-KEYS :BSP-SAVE-TN :CLOSURE-SAVE-TN :ENVIRONMENT-START :ELSEWHERE-START :DEBUG-LIVE-TNS :LIVE-TNS :NUMBER-STACK-P :RETURN-PC-PASS :RETURN-PC :OLD-FP :CLOSURE)"
 "((let ((tab #a((8) (unsigned-byte 8) 0 0 4 2 12 13 0 4)))
  (let ((b (& val #x7)))
   (let ((a (>> (<< val 5) 29)))
    (^ a (aref tab b))))))")
(#(15CA9185 26C1420D 50B17B49 7E4DD5CC B5569C34 BF470720 C0AA89EA CEDEE978 DB3BA8E3 DEF3601F F3CE597E)
 "(:ALLOW-OTHER-KEYS :BSP-SAVE-TN :CLOSURE-SAVE-TN :ENVIRONMENT-START :ELSEWHERE-START :DEBUG-LIVE-TNS :LIVE-TNS :RETURN-PC-PASS :RETURN-PC :OLD-FP :CLOSURE)"
 "((let ((tab #a((8) (unsigned-byte 8) 0 0 12 5 4 8 3 6)))
  (let ((b (& val #x7)))
   (let ((a (>> val 29)))
    (^ a (aref tab b))))))")
(#(15CB10B1 2CE73EE7 34E7D21C 6F47881C 75D98C9F AF5C399B C3673D12 D1F7C4FD E3E7FCEB)
 "(:SXTX :SXTW :SXTH :SXTB :UXTX :LSL :UXTW :UXTH :UXTB)"
 "((let ((tab #a((8) (unsigned-byte 8) 0 0 14 0 0 4 0 5)))
  (let ((b (& val #x7)))
   (let ((a (>> val 29)))
    (^ a (aref tab b))))))")
(#(16434381 1EB5B08B 3A4AABC8 63292B7D 66CD34E5 7464E610 7E4DD5CC 91F6BD42 965734A8 A0000111 A9CE8124 B1619E90 B3CD2755
   BB57FB02 C0649A2F C6CB3D00 C84A0FBF E90C52DA F3C0A986 F40C4257 F457A4B5 F91217E6 F930FAC1 F979E0CD FAE2093D)
 "(:ALLOW-OTHER-KEYS :FIXUP-NOTES :EMITTABLE-INSTS-QUEUE :DELAYED :QUEUED-BRANCHES :EMITTABLE-INSTS-SSET :BRANCH-COUNTDOWN :WRITERS :READERS :INST-NUMBER :POSTITS :FINAL-INDEX :FINAL-POSN :ORIGIN :SYNC-POSN :HEADER-SKEW :ALIGNMENT :LAST-ANNOTATION :ALIGNMENT-ANNOTATIONS :ANNOTATIONS :%CURRENT-INDEX :CURRENT-POSN :RUN-SCHEDULER :ENCODER-STATE :BUFFER)"
 "((let ((tab #a((16) (unsigned-byte 8) 7 31 16 13 0 10 31 0 0 30 14 16 0 22 0 0)))
  (let ((b (& (>> val 2) #xf)))
   (let ((a (>> (<< val 7) 28)))
    (^ a (aref tab b))))))")
(#(164892EC 16A3242C 1C8FB561 4A02C7DB 4C1DC72C A98151CA CBFDE8B6 E87FFC20 E99AC2D9 EE8ACE5F)
 "(SB-C:MULTIPLE-CALL SB-C:MULTIPLE-CALL-LOCAL SB-C:MULTIPLE-CALL-NAMED SB-C:STATIC-MULTIPLE-CALL-NAMED SB-C:MULTIPLE-CALL-VARIABLE SB-C:PUSH-VALUES VALUES-LIST SB-C::REVERSE-VALUES-LIST SB-C:%MORE-ARG-VALUES UNALIGNED-DX-CONS)"
 "((let ((tab #a((8) (unsigned-byte 8) 8 0 5 2 9 0 3 3)))
  (let ((b (& (>> val 9) #x7)))
   (let ((a (>> (<< val 31) 29)))
    (^ a (aref tab b))))))")
(#(16506334 3B52AD8C 8D5E9AC0 AC87401A)
 "(:TRUNCATE :CEILING :FLOOR :ROUND)"
 "(  (& (>> val 2) 3) )")
(#(1694A6AB 32C229AB 7D21904E BD918462)
 "((SB-VM::DESCRIPTOR-REG . 0) (SB-VM::ANY-REG . 1) (SB-VM::SIGNED-REG . 2) (CONSTANT . 3))"
 "(  (& (+ val (>> val 10)) 3) )")
(#(16BA48E6 25164A63 7E4DD5CC 8D2AB8C8 9A8CE552 AF9EE065 C3EABF48 ED71D329)
 "(:ALLOW-OTHER-KEYS :XREF :TYPE :FORM/DOC :ARGUMENTS :NAME :OFFSET :CLOSURE-TN)"
 "(  (& (- (>> val 9) (>> val 31)) 7))")
(#(17632555 62133B58 AED1DEE7 B6A96EF6 EB29C836)
 "(QUOTE :COND :IF :WHEN :UNLESS)"
 "(  (& (- val (>> val 27)) 7))")
(#(1781B8EE 19FC6384 1A0F727C 250AE08D 3F7330C3 4C54776F 54AEC8F6 838A43D8 911225B2 965775F0 96D8153C B25F4091 B6A0A504
   C45D8E9C E5A64CEF)
 "#(((:TYPE ALIEN-BOOLEAN-TYPE) (:TYPE ALIEN-ENUM-TYPE) (:TYPE ALIEN-INTEGER-TYPE)) ((:TYPE ALIEN-SINGLE-FLOAT-TYPE) (:TYPE ALIEN-DOUBLE-FLOAT-TYPE) (:TYPE ALIEN-FLOAT-TYPE)) ((:TYPE ALIEN-RECORD-TYPE)) ((:TYPE ALIEN-ARRAY-TYPE)) ((:TYPE SB-ALIEN::ALIEN-C-STRING-TYPE)) ((:TYPE ALIEN-POINTER-TYPE)) ((:TYPE ALIEN-FUN-TYPE)) ((:TYPE SB-ALIEN::ALIEN-ALIEN-VALUE-TYPE) (:TYPE SB-ALIEN::ALIEN-MEM-BLOCK-TYPE) (:TYPE SB-ALIEN::ALIEN-SYSTEM-AREA-POINTER-TYPE)) ((:TYPE ALIEN-VALUES-TYPE)))"
 "((let ((tab #a((8) (unsigned-byte 8) 0 8 14 0 0 12 4 12)))
  (let ((b (& (>> val 3) #x7)))
   (let ((a (>> (<< val 5) 29)))
    (^ a (aref tab b))))))")
(#(1887978E 206F3878 4DC2A903 75F09E0B 9DFE1B14)
 "(:MORE-RESULT :MORE-ARGUMENT :TEMPORARY :RESULT :ARGUMENT)"
 "(  (& (>> val 29) 7))")
(#(19627350 26619DE3 3269DBE1 3932B57B 47F582BB 49A5AA56 4E32CBF3 5E27768B 5F494B7F 656564B4 668E03DD 7C968C45 7D224C44
   9E895E42 A07D6845 AF060102 C3C1E2DD C3EABF48 CE38123D)
 "(SB-C::CONSTANT-VALUE SB-C::NO-CONSTRAINTS SB-C::CURRENT-DEFMETHOD SB-ASSEM::FLUSHABLE ENABLE-PACKAGE-LOCKS DISABLE-PACKAGE-LOCKS DYNAMIC-EXTENT UNMUFFLE-CONDITIONS MUFFLE-CONDITIONS OPTIMIZE SB-C::NO-COMPILER-MACRO MAYBE-INLINE NOTINLINE INLINE FTYPE SPECIAL IGNORABLE IGNORE TYPE)"
 "((let ((tab #a((16) (unsigned-byte 8) 0 3 14 13 27 0 8 0 7 0 0 0 0 3 0 27)))
  (let ((b (& val #xf)))
   (let ((a (>> (<< val 7) 28)))
    (^ a (aref tab b))))))")
(#(19627350 3269DBE1 3932B57B 49A5AA56 5F494B7F 656564B4 668E03DD 7C968C45 7D224C44 C3C1E2DD C3EABF48 CE38123D)
 "(UNMUFFLE-CONDITIONS MUFFLE-CONDITIONS MAYBE-INLINE NOTINLINE INLINE FTYPE OPTIMIZE IGNORABLE IGNORE TYPE DYNAMIC-EXTENT SPECIAL)"
 "((let ((tab #a((8) (unsigned-byte 8) 12 14 11 0 4 5 0 2)))
  (let ((b (& (>> val 7) #x7)))
   (let ((a (>> (<< val 5) 29)))
    (^ a (aref tab b))))))")
(#(19627350 3932B57B 82FDFC4E C3C1E2DD)
 "(NIL NOTINLINE MAYBE-INLINE INLINE)"
 "(  (& val 3) )")
(#(19861A55 3C6008ED 4DDE5A76 7E4DD5CC B6B9431B)
 "(:ALLOW-OTHER-KEYS :SO-DATA :SO-KEY :NODE-HASH :%NODE-NEXT)"
 "(  (& (+ (>> val 2) (>> val 17)) 7))")
(#(19A804F1 25164A63 2A8940D9 35050B53 371E7F74 7E4DD5CC 7FAFB02A 8AE61EAA BD6261C1 D8C1EE02 E58B6D43 FAC6D96D)
 "(:ALLOW-OTHER-KEYS :PREDICATE :TRANSLATION :PCL-CLASS :%LOCK :SUBCLASSES :SOURCE-LOCATION :DIRECT-SUPERCLASSES :STATE :LAYOUT :NAME :%BITS)"
 "((let ((tab #a((8) (unsigned-byte 8) 0 4 0 12 5 5 8 12)))
  (let ((b (& (>> val 8) #x7)))
   (let ((a (>> (<< val 5) 29)))
    (^ a (aref tab b))))))")
(#(19A804F1 392215A2 42354AFF 511F123D 52F791B3 8AFF6C0B B6C53C5B C085651F CB2A2A51 E7BDDEAC EED915AA F1366560 FB4D653B)
 "#(:ASSEMBLY-ROUTINE :CARD-TABLE-INDEX-MASK :SYMBOL-TLS-INDEX :ALIEN-CODE-LINKAGE-INDEX :ALIEN-DATA-LINKAGE-INDEX :FOREIGN :FOREIGN-DATAREF :CODE-OBJECT :LAYOUT :IMMOBILE-SYMBOL :LINKAGE-CELL :SYMBOL-VALUE :LAYOUT-ID)"
 "((let ((tab #a((8) (unsigned-byte 8) 8 4 15 0 8 6 0 0)))
  (let ((b (>> val 29)))
   (let ((a (& val #x7)))
    (^ a (aref tab b))))))")
(#(19A804F1 3D6712AB 42354AFF 511F123D)
 "(:FDEFN-CALL :LAYOUT :IMMOBILE-SYMBOL :SYMBOL-VALUE)"
 "(  (& (>> val 1) 3) )")
(#(19A804F1 3D6712AB 42354AFF 511F123D 52F791B3 8AFF6C0B B6C53C5B C085651F C4F3111F CB2A2A51 E7BDDEAC EED915AA F1366560
   FB4D653B)
 "#(:ASSEMBLY-ROUTINE :CARD-TABLE-INDEX-MASK :SYMBOL-TLS-INDEX :ALIEN-CODE-LINKAGE-INDEX :ALIEN-DATA-LINKAGE-INDEX :FOREIGN :FOREIGN-DATAREF :CODE-OBJECT :LAYOUT :IMMOBILE-SYMBOL :FDEFN-CALL :STATIC-CALL :SYMBOL-VALUE :LAYOUT-ID)"
 "((let ((tab #a((8) (unsigned-byte 8) 14 0 0 0 0 14 10 8)))
  (let ((b (& (>> val 4) #x7)))
   (let ((a (>> (<< val 5) 29)))
    (^ a (aref tab b))))))")
(#(19A804F1 42354AFF 52F791B3 C085651F F1366560)
 "(:LAYOUT-ID :LAYOUT :IMMOBILE-SYMBOL :SYMBOL-TLS-INDEX :CARD-TABLE-INDEX-MASK)"
 "(  (& (+ val (>> val 30)) 7))")
(#(19A804F1 80423227 A4038138 C8A25DB2 E45D7F1B)
 "(SB-BROTHERTREE::UNARY-NODE SB-LOCKLESS::LIST-NODE LAYOUT STRUCTURE-OBJECT T)"
 "(  (& (>> val 13) 7))")
(#(1A212F81 3C93139D 7E4DD5CC ADF1BE03 BDE7A1BC)
 "(:ALLOW-OTHER-KEYS :SIGNAL-VIA :ALLOW-SYMBOL-MACRO :ALLOW-SPECIAL :CONTEXT)"
 "(  (& (+ val (>> val 16)) 7))")
(#(1B054DAD 32C229AB 4371A7F9 68D86CC1 F6B46BF5 FF98FC30)
 "(SB-VM::FLOAT-REGISTERS SB-VM::IMMEDIATE-CONSTANT CONSTANT SB-C:NON-DESCRIPTOR-STACK SB-VM::CONTROL-STACK SB-VM::REGISTERS)"
 "(  (& (- (>> val 3) (>> val 18)) 7))")
(#(1B618B93 600CFD48 6FD9FFE8 782BBB07 CB2101A6)
 "(:SLOT-SET :STRUCT-SET :SVSET :RPLACD :RPLACA)"
 "(  (& (^ (>> val 4) (>> val 21)) 7))")
(#(1BE84AA3 7E4DD5CC B1619E90 F4411A60 FDE111BA)
 "(:ALLOW-OTHER-KEYS :DIMENSIONS :ELEMENT-TYPE :ALIGNMENT :BITS)"
 "(  (& (^ (>> val 1) (>> val 25)) 7))")
(#(1D4FDC60 4797C38A 7E4DD5CC 95DAB988 97E7FAAF AC8AAF96 B1EB0C6C C0AA89EA)
 "(:ALLOW-OTHER-KEYS :WIRED-MAP :LAST-BLOCK-COUNT :LIVE-TNS :ALWAYS-LIVE :CONFLICTS :LAST-OFFSET :CURRENT-SIZE)"
 "(  (& (- val (>> val 30)) 7))")
(#(1DDBED60 483C9C82 609B6613 92586CF4)
 "(SB-C::INHIBIT-FLUSHING SB-C::MODIFYING FUNCTION-DESIGNATOR FUNCTION)"
 "(  (& (>> val 4) 3) )")
(#(1E214301 43E6A03E 48AF4A42 7168FDB3 96565735 BE92D34F EBCF9692)
 "#(((:TYPE SB-C::CLAMBDA) (:TYPE SB-C::OPTIONAL-DISPATCH) (:TYPE SB-C::FUNCTIONAL) (:TYPE CONSTANT)) ((:TYPE SB-C::LAMBDA-VAR)) ((:TYPE SB-C::DEFINED-FUN)) ((:TYPE SB-C::GLOBAL-VAR)))"
 "(  (& (+ (>> val 2) (>> val 15)) 7))")
(#(1E407120 25164A63 41E29034 7E4DD5CC 7F2D8268 9ACD936C F7A05D36)
 "(:ALLOW-OTHER-KEYS :SLOTS :VARIABLE-LENGTH-P :LENGTH :LOWTAG :WIDETAG :NAME)"
 "(  (& (^ (>> val 8) (>> val 23)) 7))")
(#(1EE7DBF0 45DA68C6 720BA130 831C0B63 9100CEE7 DC5C890A)
 "#(COMPILATION-SPEED DEBUG SAFETY SPACE SPEED INHIBIT-WARNINGS)"
 "(  (& (- val (>> val 14)) 7))")
(#(1F534FA9 2B22A822 326AE117 38FB1241 6C16ABD3 7B8BF3F4 907EA789 A5DDB07E B5CE1611 B713985E DBA0CC85 DCF9423A F27195EB
   F33D181E F4569369 F9429101 FCF00468)
 "((:EQ . 0) (:NE . 1) (:HS . 2) (:CS . 2) (:LO . 3) (:CC . 3) (:MI . 4) (:PL . 5) (:VS . 6) (:VC . 7) (:HI . 8) (:LS . 9) (:GE . 10) (:LT . 11) (:GT . 12) (:LE . 13) (:AL . 14))"
 "((let ((tab #a((16) (unsigned-byte 8) 0 0 15 0 0 7 0 13 7 13 4 31 0 0 10 0)))
  (let ((b (& val #xf)))
   (let ((a (>> val 28)))
    (^ a (aref tab b))))))")
(#(1FBA6881 7E4DD5CC 96F1BB56 C3EABF48 F75C3FD9)
 "(:ALLOW-OTHER-KEYS :STRICT :SINGLE-PREDECESSOR :CAST :TYPE)"
 "(  (& (+ (>> val 3) (>> val 31)) 7))")
(#(1FCB53EC 43ECD685 785DD024 864566AF CA61C353 F3815E9C)
 "(MEMBER-IF-NOT MEMBER-IF RASSOC-IF-NOT RASSOC-IF ASSOC-IF-NOT ASSOC-IF)"
 "(  (& (^ val (>> val 7)) 7))")
(#(1FE1ADA8 3AF8DBA9 45EA8C50 57ED033B 672AF595 7E4DD5CC A3C11751 A54A0028 CF79C550 D62E1373)
 "(:ALLOW-OTHER-KEYS :DESIGNATOR :RETURNS :WILD-ARGS :ALLOWP :KEYWORDS :KEYP :REST :OPTIONAL :REQUIRED)"
 "((let ((tab #a((8) (unsigned-byte 8) 7 7 0 0 0 8 2 0)))
  (let ((b (>> val 29)))
   (let ((a (& val #x7)))
    (^ a (aref tab b))))))")
(#(1FE1ADA8 4A98DA2D 704E1060 7E4DD5CC F6E399E1)
 "(:ALLOW-OTHER-KEYS :PATH-KEYWORDS :FOR-KEYWORDS :ITERATION-KEYWORDS :KEYWORDS)"
 "(  (& (+ val (>> val 1)) 7))")
(#(201B535C 7C9BA40B 7E4DD5CC 97ECB0B8 A40E62B2)
 "(:ALLOW-OTHER-KEYS :KIND :SECTION-END :DEPTH :POSN)"
 "(  (& (^ (>> val 1) (>> val 10)) 7))")
(#(20CCCC7E 64688A38 B690AE2E D1146057 E0A39FB8)
 "(:SIZED :BYTE :WORD :DWORD :QWORD)"
 "(  (& (^ (>> val 5) (>> val 19)) 7))")
(#(21EEAED8 CBC8EE4C DA0BA737 E2AA03BE)
 "(SB-PCL::READER SB-PCL::WRITER BOUNDP MAKUNBOUND)"
 "(  (& (>> val 6) 3) )")
(#(22FAAD9E 3575BB87 95B7E7EF A45FEB43)
 "(SB-VM::YMM-REG SB-VM::INT-AVX2-REG SB-VM::DOUBLE-AVX2-REG SB-VM::SINGLE-AVX2-REG)"
 "(  (& (>> val 23) 3) )")
(#(22FDA262 25C512C8 33893B8A 34338FFE 358752D0 441D6918 49C8CDB2 50EDFBF1 58FAED48 65610EB4 7169F6EF 73A0CCDC 7F2D8268
   839AF3E3 8471EF8C 8DB01467 95785927 96254BD9 A9F4AEDC AAAC2A1C B2B882E2 B6320B0B CB8DC35C D6AE8C5F D9F0FE17 E5F32E85
   E8DC3557 E9A6A6C4 FBDC902B FCF5C338)
 "#(SB-IMPL::INSTALL-HASH-TABLE-LOCK UPDATE-OBJECT-LAYOUT TWO-ARG-+ TWO-ARG-- TWO-ARG-* TWO-ARG-/ TWO-ARG-< TWO-ARG-> TWO-ARG-= EQL %NEGATE LENGTH ERROR FORMAT EQUALP SB-C::CHECK-DS-LIST SB-C::CHECK-DS-LIST/&REST WRITE-STRING WRITE-CHAR PRINC HAIRY-DATA-VECTOR-SET HAIRY-DATA-VECTOR-REF VECTOR-HAIRY-DATA-VECTOR-SET VECTOR-HAIRY-DATA-VECTOR-REF HAIRY-DATA-VECTOR-SET/CHECK-BOUNDS HAIRY-DATA-VECTOR-REF/CHECK-BOUNDS VECTOR-HAIRY-DATA-VECTOR-SET/CHECK-BOUNDS VECTOR-HAIRY-DATA-VECTOR-REF/CHECK-BOUNDS %LDB VECTOR-UNSIGNED-BYTE-8-P)"
 "((let ((tab #a((16) (unsigned-byte 8) 0 13 31 13 0 21 18 0 26 22 17 26 3 0 0 18)))
  (let ((b (& (>> val 1) #xf)))
   (let ((a (>> (<< val 7) 28)))
    (^ a (aref tab b))))))")
(#(24049169 792DC15C 7E4DD5CC 856E29CB E8CDDE26)
 "(:ALLOW-OTHER-KEYS :WHERE :UNWINNAGE-FUN :LOSSAGE-FUN :REALLY-ASSERT)"
 "(  (& (^ (>> val 2) (>> val 18)) 7))")
(#(2469FFDD 92586CF4 B7DA6CE4 D4FD9754)
 "(FUNCTION SB-C::GLOBAL-FUNCTION LAMBDA NAMED-LAMBDA)"
 "(  (& (- val (>> val 4)) 3) )")
(#(246D4FD0 321B4470 42CAE6A9 55DFCE4E)
 "(SB-VM::FIXEDOBJ SB-VM::TEXT SB-VM::PERMGEN SB-VM::READ-ONLY)"
 "(  (& (>> val 4) 3) )")
(#(246D4FD0 321B4470 42CAE6A9 55DFCE4E 59FE9825 F569D93E)
 "(SB-VM::FIXEDOBJ SB-VM::TEXT SB-VM::PERMGEN SB-VM::SAFEPOINT SB-VM::STATIC SB-VM::READ-ONLY)"
 "(  (& (^ (>> val 1) (>> val 21)) 7))")
(#(246D4FD0 321B4470 42CAE6A9 55DFCE4E 73ECD70C)
 "(SB-VM::FIXEDOBJ SB-VM::TEXT SB-VM::PERMGEN SB-VM::ALIEN-LINKAGE SB-VM::READ-ONLY)"
 "(  (& (- (>> val 3) (>> val 17)) 7))")
(#(246D4FD0 321B4470 42CAE6A9 55DFCE4E BBE26BAD)
 "(SB-VM::FIXEDOBJ SB-VM::TEXT SB-VM::PERMGEN SB-VM::ALIEN-LINKAGE-TABLE SB-VM::READ-ONLY)"
 "(  (& (- val (>> val 8)) 7))")
(#(24D43549 55AC13F7 7E4DD5CC 9768E79A 97ECB0B8 A256D8C6 D1C6DFEB F32C02D3)
 "(:ALLOW-OTHER-KEYS :KEY :DEFAULT-P :DEFAULT :SUPPLIED-USED-P :SUPPLIED-P :KIND :SPECIALP)"
 "(  (& (+ (>> val 1) (>> val 2)) 7))")
(#(25164A63 2C724883 3FBC8F66 606E0E3A 685C70EC 7E4DD5CC 957AEDB3 97ECB0B8 A54A0028 AF9EE065 F0A1752E FFC05A5E)
 "(:ALLOW-OTHER-KEYS :ELSEWHERE-PC :START-PC :BSP-SAVE :CLOSURE-SAVE :RETURNS :ARGUMENTS :TLF-NUMBER :BLOCKS :VARS :KIND :NAME)"
 "((let ((tab #a((8) (unsigned-byte 8) 13 0 13 0 2 4 5 12)))
  (let ((b (& (>> val 19) #x7)))
   (let ((a (>> (<< val 5) 29)))
    (^ a (aref tab b))))))")
(#(25164A63 47A8F1BE 7E4DD5CC 97ECB0B8 B1619E90 F4411A60)
 "(:ALLOW-OTHER-KEYS :FIELDS :NAME :KIND :ALIGNMENT :BITS)"
 "(  (& (+ (>> val 15) (>> val 16)) 7))")
(#(25164A63 48131EF9 496BF7A5 4E4CD394 7E4DD5CC 80D6A04E EF0B5E5B)
 "(:ALLOW-OTHER-KEYS :ACTION :LEVEL :COUNT :VAR :DESCRIPTION :NAME)"
 "(  (& (- (>> val 2) (>> val 28)) 7))")
(#(25164A63 4E4CD394 7E4DD5CC 97ECB0B8 B737E419)
 "(:ALLOW-OTHER-KEYS :WARNINGS :COUNT :KIND :NAME)"
 "(  (& (^ (>> val 6) (>> val 17)) 7))")
(#(25164A63 591576FD 70AC33CD 75D43470 7E4DD5CC E25EBD1D)
 "(:ALLOW-OTHER-KEYS :VALUES-DOCUMENTATION :DOCUMENTATION :GETTER :EXPRESSION :NAME)"
 "(  (& (+ val (>> val 8)) 7))")
(#(25164A63 5CB524C7 7E4DD5CC CD4167E6 D4B4413F D7CF9B90 E4E46523 FB6863DF)
 "(:ALLOW-OTHER-KEYS :DATA :DTYPE :SPECIFIED-TYPE :TEMPVARS :HISTORY :CLASS :NAME)"
 "(  (& (+ (>> val 8) (>> val 24)) 7))")
(#(25164A63 672AF595 7E4DD5CC E6101645 E7FC6B6E)
 "(:ALLOW-OTHER-KEYS :ALLOWP :TYPES :POSITION :NAME)"
 "(  (& (^ (>> val 1) (>> val 6)) 7))")
(#(25164A63 70AC33CD 7E4DD5CC 919CF251 91F6BD42 992C0618 9B40E23D B3CD2755 C433E93A C98D7EA2 D1B31032)
 "(:ALLOW-OTHER-KEYS :DOCUMENTATION :CELL :ALLOCATION :INITFUNCTION :INITFORM :INITFORM-P :WRITERS :READERS :INITARGS :NAME)"
 "((let ((tab #a((8) (unsigned-byte 8) 8 9 14 0 3 3 5 2)))
  (let ((b (& (>> val 12) #x7)))
   (let ((a (>> (<< val 31) 29)))
    (^ a (aref tab b))))))")
(#(25164A63 7E4DD5CC 8D2AB8C8 97ECB0B8 B1619E90 C2E7E4AB D98B5639 F4411A60 F4EEBB87)
 "(:ALLOW-OTHER-KEYS :OFFSET :KIND :TO :FROM :NAME :SIGNED :ALIGNMENT :BITS)"
 "((let ((tab #a((8) (unsigned-byte 8) 0 12 5 3 7 0 2 0)))
  (let ((b (& (>> val 2) #x7)))
   (let ((a (>> (<< val 31) 29)))
    (^ a (aref tab b))))))")
(#(25A587A6 326AE117 3A0738E7 6043C540 80CE8459 BE9931C5)
 "(:Z :NZ :E :NE :NS :S)"
 "(  (& (+ val (>> val 3)) 7))")
(#(26AF6E38 270E512A 56E77385 5E585674 7E4DD5CC 7F2D8268 91A41004 BFD62B43 C65B82DD DD5968E1 FE4E8E9A)
 "(:ALLOW-OTHER-KEYS :DEBUG-FUN :HOOKS :INITIAL-OFFSET :CODE-CALLABLES :CODE :STORAGE-INFO :VIRTUAL-LOCATION :LENGTH :SAP-MAKER :OBJECT)"
 "((let ((tab #a((8) (unsigned-byte 8) 11 15 7 2 0 3 0 0)))
  (let ((b (& val #x7)))
   (let ((a (>> val 29)))
    (^ a (aref tab b))))))")
(#(26AF6E38 270E512A 5E585674 7E4DD5CC 89062B61 91A41004 C65B82DD)
 "(:ALLOW-OTHER-KEYS :HOOKS :SOURCE-FORM-CACHE :DEBUG-FUN :VIRTUAL-LOCATION :INITIAL-OFFSET :CODE)"
 "(  (& (+ (>> val 1) (>> val 14)) 7))")
(#(27B84B13 2EB42ED9 440E7FC1 46608E23 62133B58 659A1BF7 8CBE95A0 92586CF4 AD7441FF EB29C836 F6075C4B)
 "(LET* LET IF SYMBOL-MACROLET MACROLET LOCALLY EVAL-WHEN PROGN SETQ QUOTE FUNCTION)"
 "((let ((tab #a((8) (unsigned-byte 8) 0 8 0 0 12 0 2 5)))
  (let ((b (& val #x7)))
   (let ((a (>> val 29)))
    (^ a (aref tab b))))))")
(#(27B84B13 2EB42ED9 440E7FC1 46608E23 8CBE95A0)
 "(PROGN LOCALLY SYMBOL-MACROLET MACROLET EVAL-WHEN)"
 "(  (& (^ val (>> val 29)) 7))")
(#(28ECAC6D 88683046 951240CA F22AA4B8 F5732BF5)
 "(:FINAL :NUMERIC :FILTERED :SIGN-EXTENDED :RAW)"
 "(  (& (>> val 10) 7))")
(#(2AE9D012 449607FC 56EE5555 7D224C44 7E4DD5CC 8DBB3B18 97530388 97ECB0B8 B4C67B51 C3EABF48 C80506D7 C9A0837E D3801745
   DEB0B530 FBB90A17 FE6A9C07)
 "(:ALLOW-OTHER-KEYS :FUNCTIONAL :SAME-BLOCK-P :INLINE-EXPANSION :INLINEP :KIND :SETS :INFO :DYNAMIC-EXTENT :EVER-USED :REFS :WHERE-FROM :DEFINED-TYPE :TYPE :%SOURCE-NAME :NUMBER)"
 "((let ((tab #a((8) (unsigned-byte 8) 12 8 14 4 4 0 0 12)))
  (let ((b (& (>> val 21) #x7)))
   (let ((a (>> (<< val 5) 29)))
    (^ a (aref tab b))))))")
(#(2B1B6E54 314F6D44 70B930E9 989C005B B72721C7 F7BC5EEE)
 "(ALIEN-TYPE-TYPE FUN-TYPE NUMERIC-TYPE CLASSOID CONSTANT-TYPE VALUES-TYPE)"
 "(  (& (>> val 7) 7))")
(#(2BEFD530 8767F152 DEEE6443 E2AA03BE F987A176)
 "(MAKUNBOUND DEFCONSTANT COMPARE-AND-SWAP PROGV SET)"
 "(  (& (^ val (>> val 7)) 7))")
(#(2C90A766 4499E855 61F4228E 76DB0CD0)
 "#(:NTA :T0 :T1 :T2)"
 "(  (& (>> val 9) 3) )")
(#(2CFE05E6 4121D2EA 7C31AE8F CD22F006)
 "(:BIVALENT SIGNED-BYTE UNSIGNED-BYTE CHARACTER)"
 "(  (& (>> val 9) 3) )")
(#(2D6A218B 2EE60D4C 396092DD 5596BBCD 5901019E B9299420 B9E517EC)
 "(SB-PCL::CONDITION-CLASS STRUCTURE-CLASS SB-PCL:SYSTEM-CLASS BUILT-IN-CLASS SB-MOP:FUNCALLABLE-STANDARD-CLASS STANDARD-CLASS SB-PCL::SLOT-CLASS)"
 "(  (& (^ (>> val 5) (>> val 28)) 7))")
(#(2F67631E 379C2323 39DB0A54 5580C0AD 7E4DD5CC 867ECFE7)
 "(:ALLOW-OTHER-KEYS :FAST-MODE :ACCRUED-EXCEPTIONS :CURRENT-EXCEPTIONS :ROUNDING-MODE :TRAPS)"
 "(  (& (- val (>> val 14)) 7))")
(#(2FC3A1FE 4870B954 51F4DBE6 5467B62E 58402903 5AD6A434 6251F97E 7720D5AC 861F4BC0 9DA92895 BCDCF7EE C8BAC61D D1583289
   D4C55BFE ECDB9F8D F084EFEF F7277B08 FDE111BA)
 "(:RESET-UNICODE-P :INTERACTIVE-P :CLOSE :CLEAR-OUTPUT :CLEAR-INPUT :FILE-STRING-LENGTH :FILE-LENGTH :LINE-LENGTH :EXTERNAL-FORMAT :ELEMENT-MODE :ELEMENT-TYPE :SET-FILE-POSITION :GET-FILE-POSITION :CHARPOS :FINISH-OUTPUT :FORCE-OUTPUT :UNREAD :LISTEN)"
 "((let ((tab #a((16) (unsigned-byte 8) 7 0 0 1 13 3 21 0 15 12 12 0 0 0 0 30)))
  (let ((b (& val #xf)))
   (let ((a (>> val 28)))
    (^ a (aref tab b))))))")
(#(313790D2 4B430390 519DD3CE 640E844C 8CD5B89F A09FC47B)
 "(SB-C:RETURN-SINGLE RETURN SB-C:KNOWN-RETURN SB-C:TAIL-CALL SB-C:TAIL-CALL-NAMED SB-C:STATIC-TAIL-CALL-NAMED)"
 "(  (& (+ (>> val 8) (>> val 13)) 7))")
(#(314F6D44 4BFE7539 98887AA5 9D5025AF D23E7FFA)
 "(DEFMETHOD DESTRUCTURING-BIND :MACRO :VALUES-TYPE :FUNCTION-TYPE)"
 "(  (& (+ (>> val 4) (>> val 14)) 7))")
(#(31C62284 398417AB 6731B27F 7E4DD5CC 97ECB0B8 D8F2B7EA)
 "(:ALLOW-OTHER-KEYS :SOURCE-PATH :BLOCK :USE :NEXT :KIND)"
 "(  (& (+ (>> val 2) (>> val 19)) 7))")
(#(3244ACF4 36C411CF 64120058 EF222200)
 "(:NFKC :NFC :NFKD :NFD)"
 "(  (& (>> val 2) 3) )")
(#(3269DBE1 47F582BB 49A5AA56 7D224C44 9E895E42 CE38123D)
 "(SPECIAL IGNORABLE IGNORE DYNAMIC-EXTENT SB-C::CONSTANT-VALUE SB-C::NO-CONSTRAINTS)"
 "(  (& (- (>> val 4) (>> val 27)) 7))")
(#(32B07AAC 6606156F A156E1ED D9F0FE17 F0526C82)
 "(:UNKNOWN-KEYS :KNOWN :ERROR :FULL :LOCAL)"
 "(  (& (+ (>> val 6) (>> val 24)) 7))")
(#(32C229AB 3CB93D68 67803F22 97B016E6 9D5025AF CE38123D)
 "(:UNKNOWN :ALIEN :GLOBAL :MACRO :CONSTANT :SPECIAL)"
 "(  (& (- val (>> val 30)) 7))")
(#(32C229AB 5AAEBDB1 A16520EC A6F460C5)
 "(:COMPONENT :ENVIRONMENT :CONSTANT :UNUSED)"
 "(  (& (>> val 2) 3) )")
(#(33F7BE81 4B4A274F 7E4DD5CC B7A0F732 B8D43E7C)
 "(:ALLOW-OTHER-KEYS :MUTEX :TEST-FUNCTION :HASH-FUNCTION :STORAGE)"
 "(  (& (^ (>> val 1) (>> val 17)) 7))")
(#(3539E037 398CB647 6892DBB7 728F28C5 92586CF4 D692DDF5)
 "(LOGICAL-PATHNAME PATHNAME WEAK-POINTER SYSTEM-AREA-POINTER FUNCTION COMPLEX)"
 "(  (& (- val (>> val 14)) 7))")
(#(361A9014 3BBB9B76 B9D1FD7E E682238B F2861886)
 "#(:ABSOLUTE :I-TYPE :S-TYPE :U-TYPE :U+I-TYPE)"
 "(  (& (^ (>> val 3) (>> val 9)) 7))")
(#(361A9014 4D9F74B8 9264C0D7 AAA32BC0)
 "#(:ABS32 :*ABS32 :REL32 :ABSOLUTE)"
 "(  (& (>> val 12) 3) )")
(#(361A9014 52F791B3 6F0EE5C6 73F613A5 7D4A95EE 97D2B0EE D7B9C71F F17EF241 FAE5FDA6)
 "#(:ABSOLUTE :COND-BRANCH :UNCOND-BRANCH :LAYOUT-ID :UBFM-IMMS :PC-RELATIVE :PC-RELATIVE-LDR-STR :LDR-STR :MOVE-WIDE)"
 "((let ((tab #a((8) (unsigned-byte 8) 8 0 0 0 3 5 3 2)))
  (let ((b (& (>> val 22) #x7)))
   (let ((a (>> (<< val 31) 29)))
    (^ a (aref tab b))))))")
(#(369B369F 400FA42C 7E4DD5CC C0AE1364 CC402FF2)
 "(:ALLOW-OTHER-KEYS :SIMILAR-CONSTANTS :EQL-CONSTANTS :FREE-FUNS :FREE-VARS)"
 "(  (& (+ val (>> val 13)) 7))")
(#(37E8DF0E 40CEAC91 49B323B8 7E4DD5CC B2B2C816)
 "(:ALLOW-OTHER-KEYS :END2 :START2 :END1 :START1)"
 "(  (& (^ (>> val 2) (>> val 21)) 7))")
(#(37F08BCC 5B94F729 6A9EA23E 8BCF98C8 9AC82294 AE544568 C1AF69E8 CA5014D5 EB165265)
 "(:PRINTER :VOP-VAR :PINNED :DELAY :DEPENDENCIES :COST :ATTRIBUTES :DECLARE :EMITTER)"
 "((let ((tab #a((8) (unsigned-byte 8) 0 1 0 0 3 7 11 0)))
  (let ((b (& val #x7)))
   (let ((a (>> val 29)))
    (^ a (aref tab b))))))")
(#(3828B661 64688A38 B690AE2E D1146057 E0A39FB8)
 "(:DO-NOT-SET :QWORD :DWORD :WORD :BYTE)"
 "(  (& (- (>> val 1) (>> val 23)) 7))")
(#(38AE4883 3B085CC6 747DC6CD 7E4DD5CC 9DFF8821 A8249CA2 CA5014D5 D46A8C39 F3C3AB71)
 "(:ALLOW-OTHER-KEYS :NDS :L :W :XMMREG-MEM-SIZE :REG-MEM-SIZE :OPCODE-PREFIX :PRINTER :MORE-FIELDS)"
 "((let ((tab #a((8) (unsigned-byte 8) 0 0 13 0 0 3 3 0)))
  (let ((b (& val #x7)))
   (let ((a (>> val 29)))
    (^ a (aref tab b))))))")
(#(39216332 42D15C59 4E4CD394 7E4DD5CC 97ECB0B8 E7FC6B6E)
 "(:ALLOW-OTHER-KEYS :LOCATIONS :TYPES :PRIMITIVE-TYPES :COUNT :KIND)"
 "(  (& (^ (>> val 4) (>> val 27)) 7))")
(#(3AF6BB28 7E4DD5CC A256D8C6 A3C11751 A54A0028)
 "(:ALLOW-OTHER-KEYS :RETURNS :KEY :REST :POSITIONAL)"
 "(  (& (+ (>> val 2) (>> val 26)) 7))")
(#(3B1994A4 5CB06058 7E4DD5CC 7F2D8268 BA14BD32 C9A0837E EB1030AC F3301F6E)
 "(:ALLOW-OTHER-KEYS :INVALID :BITMAP :INFO :INHERITS :FLAGS :LENGTH :DEPTHOID)"
 "(  (& (- (>> val 3) (>> val 25)) 7))")
(#(3C28E423 6610551C 82FDFC4E A1DFDD0E A55DBD6F)
 "(:DELETED :INITIAL :COMPLEX-TOPLEVEL :TOPLEVEL NIL)"
 "(  (& (+ (>> val 1) (>> val 6)) 7))")
(#(3C28E423 7F853C99 8059D202 82FDFC4E 8612A6FE CF79C550)
 "(:MORE :CLEANUP :TOPLEVEL :EXTERNAL :OPTIONAL NIL)"
 "(  (& (- (>> val 10) (>> val 23)) 7))")
(#(3C44DAA8 57ED033B 8A3BE106 A3C11751 A872A12A CF79C550)
 "(:MORE-COUNT :MORE-CONTEXT :REST :KEYWORD :OPTIONAL :REQUIRED)"
 "(  (& (- (>> val 4) (>> val 12)) 7))")
(#(3C5A72CA 42CFF1D7 50A623EF 5545367C 57ED033B 886D78E6 9ABE6FD6 A82C3140 AFB09C7B C15E0DAC DA3A52C4 DB03D182 EA7496BF)
 "#(:REQUIRED &OPTIONAL &REST &MORE &KEY &AUX &ENVIRONMENT &WHOLE &ALLOW-OTHER-KEYS &BODY :POST-ENV :POST-REST :POST-MORE)"
 "((let ((tab #a((8) (unsigned-byte 8) 0 11 8 1 0 5 0 1)))
  (let ((b (& (>> val 8) #x7)))
   (let ((a (>> (<< val 5) 29)))
    (^ a (aref tab b))))))")
(#(3C5A72CA 42CFF1D7 50A623EF 5545367C 9ABE6FD6 A82C3140 AFB09C7B DB03D182 EA7496BF)
 "(&ALLOW-OTHER-KEYS &AUX &BODY &ENVIRONMENT &KEY &MORE &OPTIONAL &REST &WHOLE)"
 "((let ((tab #a((8) (unsigned-byte 8) 12 0 3 0 7 5 0 2)))
  (let ((b (& (>> val 7) #x7)))
   (let ((a (>> (<< val 31) 29)))
    (^ a (aref tab b))))))")
(#(3C5A72CA 42CFF1D7 5545367C 9ABE6FD6 A82C3140 AFB09C7B DB03D182 EA7496BF)
 "(&WHOLE &BODY &ENVIRONMENT &AUX &ALLOW-OTHER-KEYS &KEY &MORE &REST)"
 "(  (& (- (>> val 2) (>> val 11)) 7))")
(#(3CB93D68 67803F22 CE38123D D4FD9754)
 "(:UNKNOWN :GLOBAL :GLOBAL-FUNCTION :SPECIAL)"
 "(  (& (>> val 2) 3) )")
(#(3CEB35C3 50B431CB 6C16ABD3 834BCA78 8D437217 8F6A8805 934E6A73 A1148EC6 E8DC3557)
 "(>= <= > < = EQL EQ CHAR-EQUAL CHAR=)"
 "((let ((tab #a((8) (unsigned-byte 8) 12 0 0 0 0 4 2 2)))
  (let ((b (& val #x7)))
   (let ((a (>> val 29)))
    (^ a (aref tab b))))))")
(#(3CEB35C3 6C16ABD3 8D437217 AC25889A E8DC3557)
 "(EQ EQL EQUAL CHAR= CHAR-EQUAL)"
 "(  (& (+ val (>> val 23)) 7))")
(#(3CEB35C3 6C16ABD3 8D437217 E8DC3557)
 "(EQL EQ CHAR= CHAR-EQUAL)"
 "(  (>> val 30) )")
(#(3CEB35C3 6C16ABD3 AC25889A E8DC3557)
 "(EQ EQL EQUAL CHAR=)"
 "(  (>> val 30) )")
(#(3E421619 42F9EC4F 52ECC4FA 53C6AF8C 546D436A 82FDFC4E D9F0FE17 E77DD8CF)
 "(NIL :SUPERSEDE :APPEND :OVERWRITE :RENAME-AND-DELETE :RENAME :NEW-VERSION :ERROR)"
 "(  (& (- (>> val 18) (>> val 24)) 7))")
(#(3F3C2E20 443A80D1 5A7DFA1B 6759FEBE 67989E4B 7C685E1B BC01B3D3 EAB41BD3 F97ABC4E)
 "(:SIMPLE-= :SIMPLE-SUBTYPEP :SIMPLE-UNION2 :SIMPLE-INTERSECTION2 :COMPLEX-SUBTYPEP-ARG2 :UNPARSE :SINGLETON-P :NEGATE :COMPLEX-SUBTYPEP-ARG1)"
 "((let ((tab #a((8) (unsigned-byte 8) 0 4 15 5 0 0 0 4)))
  (let ((b (& (>> val 6) #x7)))
   (let ((a (>> (<< val 5) 29)))
    (^ a (aref tab b))))))")
(#(4153B09A 488BFA28 7E4DD5CC C447D681 E9362827)
 "(:ALLOW-OTHER-KEYS :NIL-IN-OTHER-POINTERS :IMMEDIATE-TESTED :VALUE-TN-REF :DROP-THROUGH)"
 "(  (& (- (>> val 1) (>> val 5)) 7))")
(#(4214F49C 543DAB03 5597FB3D 6731B27F 7E4DD5CC 81748681 845FE436 8612A6FE 8DBB3B18 B3E34B4F C9A0837E D8F2B7EA)
 "(:ALLOW-OTHER-KEYS :PRESERVE-INFO :INFO :CLEANUP :VALUES :TAIL-P :SOURCE-PATH :LEXENV :PREV :NEXT :REOPTIMIZE :NUMBER)"
 "((let ((tab #a((8) (unsigned-byte 8) 14 12 5 0 2 0 3 4)))
  (let ((b (& (>> val 5) #x7)))
   (let ((a (>> (<< val 5) 29)))
    (^ a (aref tab b))))))")
(#(4214F49C 543DAB03 5C8719A1 6731B27F 7D224C44 7E4DD5CC 81748681 845FE436 8DBB3B18 D8F2B7EA)
 "(:ALLOW-OTHER-KEYS :DYNAMIC-EXTENT :FUNS :TAIL-P :SOURCE-PATH :LEXENV :PREV :NEXT :REOPTIMIZE :NUMBER)"
 "((let ((tab #a((8) (unsigned-byte 8) 0 8 2 13 5 2 3 7)))
  (let ((b (& (>> val 5) #x7)))
   (let ((a (>> (<< val 31) 29)))
    (^ a (aref tab b))))))")
(#(4214F49C 543DAB03 6731B27F 7E4DD5CC 81748681 845FE436 8DBB3B18 9DFE1B14 B41DF16F B7DA6CE4 D8F2B7EA)
 "(:ALLOW-OTHER-KEYS :RESULT-TYPE :RESULT :LAMBDA :TAIL-P :SOURCE-PATH :LEXENV :PREV :NEXT :REOPTIMIZE :NUMBER)"
 "((let ((tab #a((8) (unsigned-byte 8) 12 13 12 5 0 0 5 5)))
  (let ((b (& val #x7)))
   (let ((a (>> val 29)))
    (^ a (aref tab b))))))")
(#(4214F49C 543DAB03 6731B27F 7E4DD5CC 81748681 845FE436 8DBB3B18 B7DA6CE4 D8F2B7EA)
 "(:ALLOW-OTHER-KEYS :LAMBDA :TAIL-P :SOURCE-PATH :LEXENV :PREV :NEXT :REOPTIMIZE :NUMBER)"
 "((let ((tab #a((8) (unsigned-byte 8) 0 12 0 5 0 0 5 3)))
  (let ((b (& val #x7)))
   (let ((a (>> val 29)))
    (^ a (aref tab b))))))")
(#(42CFF1D7 50A623EF 5545367C AFB09C7B DB03D182)
 "(&KEY &BODY &REST &AUX &OPTIONAL)"
 "(  (& (- val (>> val 17)) 7))")
(#(42F9EC4F 52ECC4FA 53C6AF8C 546D436A 82FDFC4E D9F0FE17 E77DD8CF)
 "(:APPEND :SUPERSEDE :RENAME-AND-DELETE :RENAME NIL :ERROR :NEW-VERSION)"
 "(  (& (+ (>> val 3) (>> val 9) (>> val 16)) 7))")
(#(42FC2E2E 6228BBC6 D3EA690E DE2EACD2 F709D62D)
 "(:MANDATORY :LITERAL :MISER :FILL :LINEAR)"
 "(  (& (^ (>> val 1) (>> val 22)) 7))")
(#(42FC2E2E 6228BBC6 D3EA690E F709D62D)
 "(:MANDATORY :MISER :FILL :LINEAR)"
 "(  (& (>> val 14) 3) )")
(#(43268980 50B431CB 6C16ABD3 834BCA78 8F6A8805 934E6A73 A1148EC6 E8DC3557 EC047C78)
 "(= >= <= > < EQL EQ SB-C::%INSTANCE-TYPEP %TYPEP)"
 "((let ((tab #a((8) (unsigned-byte 8) 0 0 0 2 0 12 0 4)))
  (let ((b (& val #x7)))
   (let ((a (>> val 29)))
    (^ a (aref tab b))))))")
(#(449607FC 7D224C44 7E4DD5CC 8DBB3B18 97ECB0B8 B4C67B51 C3EABF48 C80506D7 C9A0837E D3801745 FBB90A17 FE6A9C07)
 "(:ALLOW-OTHER-KEYS :KIND :SETS :INFO :DYNAMIC-EXTENT :EVER-USED :REFS :WHERE-FROM :DEFINED-TYPE :TYPE :%SOURCE-NAME :NUMBER)"
 "((let ((tab #a((8) (unsigned-byte 8) 8 0 13 11 10 5 2 3)))
  (let ((b (& (>> val 10) #x7)))
   (let ((a (>> (<< val 31) 29)))
    (^ a (aref tab b))))))")
(#(45EE44A3 60268B01 73FD5977 931F2DBC A9A91179 EC8EB822)
 "(:DEFINED-METHOD :DEFINED :DEFINED-HERE :ASSUMED :DECLARED-VERIFY :DECLARED)"
 "(  (& (>> val 12) 7))")
(#(46CC6774 47991116 5CDDC111 728F28C5 74748736 965CD62A A0FAB3A5 C3127E24)
 "(FLOAT SB-ALIEN::MEM-BLOCK ALIEN-VALUE SINGLE-FLOAT DOUBLE-FLOAT SYSTEM-AREA-POINTER SB-ALIEN::RECORD ENUM)"
 "(  (& (>> val 12) 7))")
(#(47ED28C7 7980B71D 82FDFC4E A4323F41 AE780BE9 C8A25DB2)
 "(NIL EXTENDED-SEQUENCE FUNCALLABLE-INSTANCE INSTANCE * T)"
 "(  (& (+ (>> val 12) (>> val 30)) 7))")
(#(483C9C82 76A22E5D BABC0674 D05C85DE D58C389F DED271A4)
 "(SB-C::PROPER-OR-DOTTED-LIST SB-C::PROPER-OR-CIRCULAR-LIST SB-C::PROPER-SEQUENCE SB-C::PROPER-LIST TYPE-SPECIFIER SB-C::MODIFYING)"
 "(  (& (^ (>> val 15) (>> val 21)) 7))")
(#(487A3F33 7DB72BC4 891C1715 C7977052)
 "(:PROBE :IO :OUTPUT :INPUT)"
 "(  (& val 3) )")
(#(4995E301 58E56AC5 7463EEF9 7B10673A C2E7E4AB)
 "(:BY :BELOW :ABOVE :DOWNTO :TO)"
 "(  (& (>> val 24) 7))")
(#(4A1417AD 7E4DD5CC A48290A3 A7672D4A AAA60979 C13D2E32 C1463E8D CC857E70 E0C1F37E)
 "(:ALLOW-OTHER-KEYS :VALUE-SOURCE-FORMS :LOCAL-POLICY :POST-BINDING-LEXENV :NOTE-LEXICAL-BINDINGS :DEBUG-NAME :SOURCE-NAME :AUX-VALS :AUX-VARS)"
 "((let ((tab #a((8) (unsigned-byte 8) 14 5 0 4 7 5 5 0)))
  (let ((b (& val #x7)))
   (let ((a (>> val 29)))
    (^ a (aref tab b))))))")
(#(4B4A274F 4E4CD394 65D8B1BB 7E4DD5CC 96DAC0E4 B7A0F732 B8D43E7C)
 "(:ALLOW-OTHER-KEYS :COUNT :TOMBSTONES :MUTEX :HASH-FUNCTION :COMPARATOR :STORAGE)"
 "(  (& (- (>> val 1) (>> val 29)) 7))")
(#(4B574AE2 4F94B5E7 714D6B00 88BA357D 8A6265B8 B313FB62 C888E122 D2205031 D37E3DCA DB3125F9 DE352140 FCD93907)
 "#(((:TYPE BIND) (:TYPE SB-C::REF)) ((:TYPE SB-C::CIF)) ((:TYPE SB-C::CSET)) ((:TYPE SB-C::CRETURN)) ((:TYPE EXIT)) ((:TYPE SB-C::COMBINATION) (:TYPE SB-C::MV-COMBINATION) (:TYPE SB-C::BASIC-COMBINATION)) ((:TYPE DELAY) (:TYPE SB-C::ARRAY-INDEX-CAST) (:TYPE CAST)))"
 "((let ((tab #a((8) (unsigned-byte 8) 0 0 0 0 8 0 10 6)))
  (let ((b (& (>> val 15) #x7)))
   (let ((a (>> (<< val 5) 29)))
    (^ a (aref tab b))))))")
(#(4B574AE2 4F94B5E7 714D6B00 88BA357D B313FB62 C888E122 D2205031 D37E3DCA DB3125F9 DE352140)
 "#(((:TYPE SB-C::REF)) ((:TYPE SB-C::COMBINATION)) ((:TYPE SB-C::CIF)) ((:TYPE SB-C::CRETURN)) ((:TYPE SB-C::MV-COMBINATION)) ((:TYPE EXIT)) ((:TYPE SB-C::CSET)) ((:TYPE DELAY) (:TYPE SB-C::ARRAY-INDEX-CAST) (:TYPE CAST)))"
 "((let ((tab #a((8) (unsigned-byte 8) 0 4 0 0 11 5 11 7)))
  (let ((b (& (>> val 10) #x7)))
   (let ((a (>> (<< val 5) 29)))
    (^ a (aref tab b))))))")
(#(4B574AE2 714D6B00 B313FB62 C888E122 D2205031 D37E3DCA DB3125F9 DE352140)
 "#(((:TYPE SB-C::REF)) ((:TYPE SB-C::COMBINATION)) ((:TYPE SB-C::MV-COMBINATION)) ((:TYPE EXIT)) ((:TYPE SB-C::CSET)) ((:TYPE DELAY) (:TYPE SB-C::ARRAY-INDEX-CAST) (:TYPE CAST)))"
 "(  (& (+ (>> val 8) (>> val 25)) 7))")
(#(4C25CEB9 7C9FDF6F 930967BF D9F0FE17 EADF4A0F)
 "(ERROR WARN STYLE-WARN SB-C:COMPILER-WARN SB-C:COMPILER-STYLE-WARN)"
 "(  (& (^ (>> val 1) (>> val 12)) 7))")
(#(4C25CEB9 B0581DD2 D9F0FE17 E43E9C8A)
 "(SIGNAL ERROR CERROR WARN)"
 "(  (& (>> val 18) 3) )")
(#(4CD4B181 57A4C8AB 59A85626 61C0A71B 6C16ABD3 B5558FF2 DCF9423A F4569369)
 "#(:EQ :LT :LE :UNORD :NEQ :NLT :NLE :ORD)"
 "(  (& (+ (>> val 2) (>> val 31)) 7))")
(#(4D74A788 6F779AF3 7773A213 7CBB0DFC E8068BC4)
 "(SB-C::^ + SB-C::>>= SB-C::+= SB-C::^=)"
 "(  (& (+ val (>> val 9)) 7))")
(#(4E4CD394 5107CCF9 7058CBFA 7576E2D1 7E4DD5CC 83F013E2 B59B1040 C1D4C246 C5C94EE3 F034F158 F4EEBB87)
 "(:ALLOW-OTHER-KEYS :EMERGENCY-BEST-EFFORT :METHOD-FRAME-STYLE :PRINT-FRAME-SOURCE :ARGUMENT-LIMIT :PRINT-PC :PRINT-THREAD :COUNT :FROM :START :STREAM)"
 "((let ((tab #a((8) (unsigned-byte 8) 0 0 5 12 11 0 2 7)))
  (let ((b (& val #x7)))
   (let ((a (>> val 29)))
    (^ a (aref tab b))))))")
(#(4E4CD394 7E4DD5CC A256D8C6 C122AEC5 C1D4C246 FCC84496)
 "(:ALLOW-OTHER-KEYS :COUNT :END :KEY :START :FROM-END)"
 "(  (& (- (>> val 2) (>> val 9)) 7))")
(#(4E4CD394 7E4DD5CC C1D4C246 C5C94EE3 F034F158 F4EEBB87)
 "(:ALLOW-OTHER-KEYS :METHOD-FRAME-STYLE :FROM :START :ARGUMENT-LIMIT :COUNT)"
 "(  (& (+ (>> val 2) (>> val 14)) 7))")
(#(4F8B4A07 5DB2EF1B 71A4657D 7980B71D A18392B1 B9213E14)
 "(* COMPLEX-SINGLE-FLOAT COMPLEX-DOUBLE-FLOAT SB-VM::TAGGED-NUM SB-VM::SIGNED-NUM SB-VM::UNSIGNED-NUM)"
 "(  (& (- (>> val 2) (>> val 12)) 7))")
(#(50B431CB 6C16ABD3 834BCA78 8F6A8805 934E6A73 A1148EC6 E8DC3557)
 "(>= <= > < EQL EQ =)"
 "(  (& (^ val (>> val 22)) 7))")
(#(50B431CB 6C16ABD3 834BCA78 934E6A73 A1148EC6 E8DC3557)
 "(< = EQL EQ >= >)"
 "(  (& (^ (>> val 3) (>> val 30)) 7))")
(#(50B431CB 6C16ABD3 934E6A73 A1148EC6 E8DC3557)
 "(= EQL EQ >= >)"
 "(  (& (^ (>> val 3) (>> val 30)) 7))")
(#(50B431CB 834BCA78 8F6A8805 934E6A73 A1148EC6)
 "(<= < >= > =)"
 "(  (& (- (>> val 5) (>> val 28)) 7))")
(#(50B431CB 834BCA78 8F6A8805 A1148EC6)
 "(< <= > >=)"
 "(  (& val 3) )")
(#(50EDFBF1 6C16ABD3 82FDFC4E AC25889A E8DC3557)
 "(NIL EQUALP EQUAL EQL EQ)"
 "(  (& (- (>> val 7) (>> val 18)) 7))")
(#(50EDFBF1 6C16ABD3 934E6A73 AC25889A E8DC3557)
 "(EQ EQL EQUAL EQUALP =)"
 "(  (& (- (>> val 7) (>> val 18)) 7))")
(#(50EDFBF1 6C16ABD3 AC25889A E8DC3557)
 "#(EQ EQL EQUAL EQUALP)"
 "(  (& (>> val 19) 3) )")
(#(50EDFBF1 934E6A73 AC25889A E8DC3557)
 "(= EQL EQUAL EQUALP)"
 "(  (& (>> val 7) 3) )")
(#(5107CCF9 7576E2D1 7E4DD5CC 83F013E2 8DBB3B18 C5C94EE3 F034F158)
 "(:ALLOW-OTHER-KEYS :EMERGENCY-BEST-EFFORT :METHOD-FRAME-STYLE :ARGUMENT-LIMIT :PRINT-PC :NUMBER :PRINT-FRAME-SOURCE)"
 "(  (& (- (>> val 5) (>> val 9)) 7))")
(#(519DD3CE 55B0F9E6 70E7C178 82FDFC4E 92E00046)
 "(:FIXED :KNOWN-RETURN :LOCAL-CALL :FULL-CALL NIL)"
 "(  (& (^ (>> val 1) (>> val 13)) 7))")
(#(530CC6DE 5AAEBDB1 5C3634FE 628720A3 7E4DD5CC)
 "(:ALLOW-OTHER-KEYS :WRAP-BLOCK :ENVIRONMENT :DOC-STRING-ALLOWED :ACCESSOR)"
 "(  (& (^ val (>> val 8)) 7))")
(#(543DAB03 5A66BA35 5EB4DF10 7E4DD5CC BDE7A1BC)
 "(:ALLOW-OTHER-KEYS :ALLOW-LAMBDA-LIST :CONTEXT :BINDING-FORM-P :LEXENV)"
 "(  (& (^ val (>> val 5)) 7))")
(#(55E45869 62971997 82FDFC4E 8F406FFB)
 "(:AUTO :IMMOBILE :DYNAMIC NIL)"
 "(  (& (>> val 4) 3) )")
(#(56823859 70CB34EE D26B8158 E29480A8 E67B3C63 FF414202)
 "(SIMPLE-BASE-STRING SIMPLE-STRING STRING SIMPLE-VECTOR VECTOR LIST)"
 "(  (& (+ (>> val 3) (>> val 8)) 7))")
(#(58402903 7E4DD5CC 941FDD6C A74C5AA3 E32878E5)
 "(:ALLOW-OTHER-KEYS :EXTERNAL-FORMAT :IF-DOES-NOT-EXIST :PRINT :VERBOSE)"
 "(  (& (+ (>> val 1) (>> val 4)) 7))")
(#(58402903 7E4DD5CC B1619E90 C2E7E4AB EE7027A9 F4411A60 FDE111BA)
 "(:ALLOW-OTHER-KEYS :NOT-NULL :ELEMENT-TYPE :EXTERNAL-FORMAT :TO :ALIGNMENT :BITS)"
 "(  (& (+ val (>> val 3)) 7))")
(#(58402903 7E4DD5CC C1D4C246 E7EB4C17 FCC84496)
 "(:ALLOW-OTHER-KEYS :NULL-TERMINATE :EXTERNAL-FORMAT :END :START)"
 "(  (& (>> val 7) 7))")
(#(5AB44D52 775AF7A7 7E4DD5CC 8AD692D5 92586CF4)
 "(:ALLOW-OTHER-KEYS :ARG-INFO :NEXT-METHOD-CALL :PV :FUNCTION)"
 "(  (& (^ (>> val 5) (>> val 10)) 7))")
(#(5B51BB48 5F663783 BDD7F987 DE9F2FCD EA82DC34 ED70D708)
 "(:|4S| :|2S| :|8H| :|4H| :|16B| :|8B|)"
 "(  (& (+ (>> val 1) (>> val 4)) 7))")
(#(5B51BB48 5F663783 BDD7F987 DE9F2FCD EA82DC34 ED70D708 EE485E8D)
 "(:|2D| :|4S| :|2S| :|8H| :|4H| :|16B| :|8B|)"
 "(  (& (+ (>> val 1) (>> val 4)) 7))")
(#(5B51BB48 5F663783 DE9F2FCD EA82DC34)
 "(:|8H| :|4H| :|16B| :|8B|)"
 "(  (& (>> val 2) 3) )")
(#(5B51BB48 5F663783 DE9F2FCD EA82DC34 ED70D708)
 "(:|4S| :|8H| :|4H| :|16B| :|8B|)"
 "(  (& (- (>> val 7) (>> val 9)) 7))")
(#(5C3634FE 70AC33CD 919CF251 C3EABF48 CBC8EE4C D1B31032 DA0BA737 F9076A5F)
 "(:TYPE :DOCUMENTATION :ALLOCATION :INITARG :INITFORM :ACCESSOR :WRITER :READER)"
 "(  (& (+ (>> val 21) (>> val 22)) 7))")
(#(5C3634FE 919CF251 CBC8EE4C DA0BA737 F9076A5F)
 "(:INITFORM :INITARG :WRITER :READER :ACCESSOR)"
 "(  (& (+ (>> val 1) (>> val 7)) 7))")
(#(5C93F3DF 7E4DD5CC 92586CF4 998E7C29 E878F0C3 FD5A79B0)
 "(:ALLOW-OTHER-KEYS :USER-DATA :FUNCTION :INCLUSIVE-PERMITTED :PREPOSITION-GROUPS :NAMES)"
 "(  (& (- (>> val 1) (>> val 2)) 7))")
(#(5CB06058 6187CF81 A87D60AD B3592CF8 C31499A5)
 "((:UNDERFLOW . 8) (:OVERFLOW . 4) (:INEXACT . 16) (:INVALID . 1) (:DIVIDE-BY-ZERO . 2))"
 "(  (& (- val (>> val 11)) 7))")
(#(5CDDC111 728F28C5 965CD62A A0FAB3A5 C3127E24)
 "(SYSTEM-AREA-POINTER DOUBLE-FLOAT SINGLE-FLOAT ENUM SB-ALIEN::RECORD)"
 "(  (& (^ val (>> val 27)) 7))")
(#(5DB2EF1B 71A4657D 965CD62A A0FAB3A5 C8A25DB2 E0A39FB8 FEAFF6CF)
 "(COMPLEX-DOUBLE-FLOAT COMPLEX-SINGLE-FLOAT DOUBLE-FLOAT SINGLE-FLOAT SB-VM:SIGNED-WORD WORD T)"
 "(  (& (^ (>> val 13) (>> val 20)) 7))")
(#(5DB2EF1B 7480CF81 832FC7B8 965CD62A A0FAB3A5 F4411A60)
 "(:COMPLEX-SINGLE-FLOAT :DOUBLE-FLOAT :SINGLE-FLOAT :BITS :CHAR :TAGGED)"
 "(  (& (+ (>> val 1) (>> val 12)) 7))")
(#(5E8314A3 70B930E9 A565D3F4 CA854E43 D0EBB0CC E7A863B7 F613BAB9)
 "(ARRAY-TYPE NEGATION-TYPE ALIEN-TYPE-TYPE SIMD-PACK-256-TYPE SIMD-PACK-TYPE UNKNOWN-TYPE HAIRY-TYPE)"
 "(  (& (+ (>> val 2) (>> val 6)) 7))")
(#(60268B01 73FD5977 A9A91179 EC8EB822)
 "(:DEFINED :ASSUMED :DEFINED-METHOD :DECLARED)"
 "(  (& (+ val (>> val 2)) 3) )")
(#(60574E06 7BC3707A 7F9752D2 82FDFC4E)
 "(:UNSPECIFIC :WILD :NEWEST NIL)"
 "(  (& (>> val 2) 3) )")
(#(60574E06 7F9752D2 82FDFC4E ED8B5226)
 "(:UNC :WILD :UNSPECIFIC NIL)"
 "(  (& (>> val 24) 3) )")
(#(64688A38 87F4227F 8D027A6B B690AE2E D1146057 E0A39FB8)
 "(:HWORD :OWORD :QWORD :DWORD :WORD :BYTE)"
 "(  (& (+ (>> val 7) (>> val 11)) 7))")
(#(64688A38 B690AE2E D1146057 E0A39FB8)
 "#(:QWORD :DWORD :WORD :BYTE)"
 "(  (& (- val (>> val 7)) 3) )")
(#(658DFD3D DBEA8F1C E4A850F1 F1E59E1F FE1CE099)
 "(:FAST-SAFE :FAST :SMALL-SAFE :SMALL :SAFE)"
 "(  (& (+ (>> val 1) (>> val 24)) 7))")
(#(68781F40 6E6889F8 7E4DD5CC D692DDF5 F58C5428)
 "(:ALLOW-OTHER-KEYS :DONT-SAVE :HANDLE :NAMESTRING :PATHNAME)"
 "(  (& (+ (>> val 2) (>> val 13)) 7))")
(#(6A4BF1F0 9C1CB8B3 AF040982 F0C8F231)
 "(:INVERT :PRESERVE :DOWNCASE :UPCASE)"
 "(  (& val 3) )")
(#(6B4D7DF6 7058CBFA 7E4DD5CC BE566485 C0FB5F77 F9D0B9FF)
 "(:ALLOW-OTHER-KEYS :PARENT :LAST-DEFN-SOURCE-LOC :STREAM :FILE-INFO :START-REAL-TIME)"
 "(  (& (+ (>> val 12) (>> val 15)) 7))")
(#(6C16ABD3 834BCA78 8F6A8805 934E6A73 A1148EC6 E8DC3557)
 "(> = EQL EQ <= <)"
 "(  (& (- (>> val 1) (>> val 28)) 7))")
(#(6C16ABD3 834BCA78 8F6A8805 934E6A73 E8DC3557)
 "(= EQL EQ <= <)"
 "(  (& (+ (>> val 3) (>> val 7)) 7))")
(#(6C749137 A4C23C90 CEE63FE3 DC8541EA)
 "(:UNKNOWN-RETURN-PARTNER :FUN-END :FUN-START :CODE-LOCATION)"
 "(  (& (^ val (>> val 6)) 3) )")
(#(701EC480 772926CF 7AF3914D E6101645 EDB26522)
 "(RASSOC ASSOC MEMBER POSITION FIND)"
 "(  (& (+ val (>> val 29)) 7))")
(#(70CB34EE 73FF2F2A FBE234BC FF414202)
 "(FUNCALLABLE-STRUCTURE LIST VECTOR STRUCTURE)"
 "(  (& (+ val (>> val 2)) 3) )")
(#(70CB34EE 82FDFC4E A74C4D40 E29480A8 FF414202)
 "(SIMPLE-VECTOR VECTOR CONS LIST NIL)"
 "(  (& (^ (>> val 1) (>> val 10)) 7))")
(#(70CB34EE 9C97CBC8 D23C57ED FF414202)
 "(SB-IMPL::|List| LIST SB-IMPL::|Vector| VECTOR)"
 "(  (& (>> val 1) 3) )")
(#(711A4A7E 7E4DD5CC B9299420 BDE7A1BC F51BE375)
 "(:ALLOW-OTHER-KEYS :SILENT :CONDITION-CLASS :ACCEPT :CONTEXT)"
 "(  (& (^ (>> val 2) (>> val 22)) 7))")
(#(714D6B00 8A6265B8 B313FB62 C888E122 D2205031 DB3125F9 DE352140)
 "#(((:TYPE BIND)) ((:TYPE SB-C::REF)) ((:TYPE DELAY) (:TYPE SB-C::ARRAY-INDEX-CAST) (:TYPE CAST)) ((:TYPE SB-C::CSET)) ((:TYPE SB-C::COMBINATION)))"
 "(  (& (- (>> val 7) (>> val 24)) 7))")
(#(74477BB4 7709FA94 7E4DD5CC 869ECAB2 B43F165A)
 "(:ALLOW-OTHER-KEYS :LEXICAL-VARS :DECLARATIONS :WALK-FORM :WALK-FUNCTION)"
 "(  (& (+ (>> val 8) (>> val 10)) 7))")
(#(76A22E5D BABC0674 D05C85DE D58C389F)
 "(SB-C::PROPER-OR-DOTTED-LIST SB-C::PROPER-OR-CIRCULAR-LIST SB-C::PROPER-SEQUENCE SB-C::PROPER-LIST)"
 "(  (& val 3) )")
(#(76A22E5D BABC0674 D05C85DE D58C389F DED271A4)
 "(SB-C::PROPER-OR-CIRCULAR-LIST SB-C::PROPER-OR-DOTTED-LIST SB-C::PROPER-LIST SB-C::PROPER-SEQUENCE TYPE-SPECIFIER)"
 "(  (& (^ val (>> val 21)) 7))")
(#(7980B71D 7C678985 82FDFC4E CD22F006)
 "(NIL BASE-CHAR CHARACTER *)"
 "(  (& (>> val 10) 3) )")
(#(7A03BEDF 82FDFC4E 8E8B60F0 9D81B113 D8C1EE02 FBADBE01)
 "(:NAMED :PREDICATE :COPIER :CONSTRUCTOR :CONC-NAME NIL)"
 "(  (& (- (>> val 4) (>> val 24)) 7))")
(#(7AB68FF5 B15ADCA9 CFEE5049 D3801745 F458B829)
 "#(:BINDS :CALLS :SETS :REFERENCES :MACROEXPANDS)"
 "(  (& (+ (>> val 2) (>> val 16)) 7))")
(#(7C678985 965CD62A A0FAB3A5 C8A25DB2 CD22F006)
 "(BASE-CHAR CHARACTER T SINGLE-FLOAT DOUBLE-FLOAT)"
 "(  (& (- (>> val 6) (>> val 29)) 7))")
(#(7E07E4B9 7E4DD5CC 931F2DBC C3EABF48 C9A0837E CED537B8)
 "(:ALLOW-OTHER-KEYS :TYPE :ASSERTED-TYPE :DEFINED-HERE :UNKNOWN-KEYS-FUN :INFO)"
 "(  (& (>> val 19) 7))")
(#(7E4DD5CC A256D8C6 C122AEC5 C1D4C246 FCC84496)
 "(:ALLOW-OTHER-KEYS :KEY :END :START :FROM-END)"
 "(  (& (+ (>> val 5) (>> val 11)) 7))")
(#(7E4DD5CC B7DA6CE4 C9A0837E CEDEE978 FA6E74B3)
 "(:ALLOW-OTHER-KEYS :INFO :NLX-INFO :CLOSURE :LAMBDA)"
 "(  (& (+ (>> val 1) (>> val 24)) 7))")
(#(7E4DD5CC C7E8085B E7FC6B6E ED178322 F3FC2F5A)
 "(:ALLOW-OTHER-KEYS :KEYS :TYPES :MAX-ARGS :MIN-ARGS)"
 "(  (& (^ (>> val 4) (>> val 28)) 7))")
(#(8059D202 A3C11751 A55DBD6F CF79C550 F32C02D3)
 "(SB-C::MORE REST SB-C::OPTIONAL SB-C::SUPPLIED-P SB-C::DELETED)"
 "(  (& (+ (>> val 2) (>> val 29)) 7))")
(#(82FDFC4E 83A45D5A 90B78E0C C8A25DB2)
 "(:COMPUTE-ONLY :FORCE-TO-STACK NIL T)"
 "(  (& (>> val 16) 3) )")
(#(82FDFC4E 8D87477C C8A25DB2 F987A176)
 "(SB-C::INITIAL-UNUSED T SET NIL)"
 "(  (& (>> val 12) 3) )")
(#(82FDFC4E 905F66AC 92586CF4 9D5025AF)
 "(:SPECIAL-FORM :MACRO :FUNCTION NIL)"
 "(  (& (+ val (>> val 3)) 3) )")
(#(82FDFC4E C07E71ED E022967D E41ED3F1)
 "(NIL :STRINGS :BOTH :SYMBOLS)"
 "(  (& (>> val 8) 3) )")
(#(82FDFC4E E022967D FB685091 FF5AE652)
 "(NIL :HEAD :TAIL :BOTH)"
 "(  (& (>> val 1) 3) )")
(#(874B4BCB B6F3711F B8A52F9F BBCCDE6E CB85BF00)
 "#(((:TYPE SB-PRETTY::NEWLINE)) ((:TYPE SB-PRETTY::INDENTATION)) ((:TYPE SB-PRETTY::BLOCK-START)) ((:TYPE SB-PRETTY::BLOCK-END)) ((:TYPE SB-PRETTY::TAB)))"
 "(  (& (- (>> val 1) (>> val 21)) 7))")
(#(8E8B60F0 9D81B113 D8C1EE02 FBADBE01)
 "(:CONC-NAME :CONSTRUCTOR :COPIER :PREDICATE)"
 "(  (& val 3) )")
(#(923ECA5A 965CD62A A0FAB3A5 A447FB2F)
 "(SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)"
 "(  (& (>> val 25) 3) )")
(#(95B7F751 95EB707D E4E46523 E8DC3557)
 "(CLASS SB-PCL::PROTOTYPE SB-PCL::CLASS-EQ EQL)"
 "(  (& (>> val 1) 3) )")
(#(95EB707D 9F884B31 A17B2D40 B34F601E E4E46523 E8DC3557)
 "(EQL SB-PCL::CLASS-EQ CLASS OR AND NOT)"
 "(  (& (>> val 10) 7))")
(#(95EB707D 9F884B31 A17B2D40 E4E46523 E8DC3557 F7023710)
 "(CLASS SB-PCL::CLASS-EQ SB-PCL::WRAPPER-EQ EQL AND NOT)"
 "(  (& (^ val (>> val 21)) 7))")
(#(63B56423 7E4DD5CC 99E696E5 9D9824C0 C9221F88)
 "(:ALLOW-OTHER-KEYS :ARG-OPS :STACK-FRAME-SIZE :FP-REGISTERS :NUM-REGISTER-ARGS)"
 "(  (& (^ (>> val 3) (>> val 16)) 7))")
(#(63B56423 7D7DD058 7E4DD5CC 9D9824C0 C9221F88)
 "(:ALLOW-OTHER-KEYS :FPOFFS :STACK-FRAME-SIZE :FP-REGISTERS :NUM-REGISTER-ARGS)"
 "(  (& (- (>> val 2) (>> val 3)) 7))")
(#(4A6511EA 63B56423 7E4DD5CC 84982184 9D9824C0 C9221F88)
 "(:ALLOW-OTHER-KEYS :SBOFFS :SBOFF :STACK-FRAME-SIZE :FP-REGISTERS :NUM-REGISTER-ARGS)"
 "(  (& (+ (>> val 1) (>> val 6)) 7))")
(#(40D5954C 63B56423 7E4DD5CC 9D9824C0 C9221F88)
 "(:ALLOW-OTHER-KEYS :STACK-FRAME-SIZE :FP-REGISTERS :NUM-REGISTER-ARGS :PP-STATE)"
 "(  (& (^ (>> val 14) (>> val 28)) 7))")
(#(1 2 4 8 10)
 "(1 2 4 8 16)"
 "((let ((tab #a((4) (unsigned-byte 8) 0 3 4 0)))
  (let ((b (& val #x3)))
   (let ((a (>> (<< val 27) 30)))
    (^ a (aref tab b))))))")
)
;; EOF
